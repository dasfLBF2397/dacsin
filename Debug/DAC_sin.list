
DAC_sin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b030  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800b1b8  0800b1b8  0000c1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3f8  0800b3f8  0000d0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3f8  0800b3f8  0000c3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b400  0800b400  0000d0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b400  0800b400  0000c400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b404  0800b404  0000c404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800b408  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d0fc  2**0
                  CONTENTS
 10 .bss          00002250  200000fc  200000fc  0000d0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000234c  2000234c  0000d0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c15c  00000000  00000000  0000d12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fe5  00000000  00000000  00029288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  0002d270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000133b  00000000  00000000  0002eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267f1  00000000  00000000  0002fe63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000202fe  00000000  00000000  00056654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e08dd  00000000  00000000  00076952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015722f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d4c  00000000  00000000  00157274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0015dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b1a0 	.word	0x0800b1a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800b1a0 	.word	0x0800b1a0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96a 	b.w	8000df0 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	460c      	mov	r4, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d14e      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b40:	4694      	mov	ip, r2
 8000b42:	458c      	cmp	ip, r1
 8000b44:	4686      	mov	lr, r0
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	d962      	bls.n	8000c12 <__udivmoddi4+0xde>
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0320 	rsb	r3, r2, #32
 8000b52:	4091      	lsls	r1, r2
 8000b54:	fa20 f303 	lsr.w	r3, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	4319      	orrs	r1, r3
 8000b5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b66:	fa1f f68c 	uxth.w	r6, ip
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b72:	fb07 1114 	mls	r1, r7, r4, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb04 f106 	mul.w	r1, r4, r6
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b8a:	f080 8112 	bcs.w	8000db2 <__udivmoddi4+0x27e>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 810f 	bls.w	8000db2 <__udivmoddi4+0x27e>
 8000b94:	3c02      	subs	r4, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000baa:	fb00 f606 	mul.w	r6, r0, r6
 8000bae:	429e      	cmp	r6, r3
 8000bb0:	d90a      	bls.n	8000bc8 <__udivmoddi4+0x94>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bba:	f080 80fc 	bcs.w	8000db6 <__udivmoddi4+0x282>
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	f240 80f9 	bls.w	8000db6 <__udivmoddi4+0x282>
 8000bc4:	4463      	add	r3, ip
 8000bc6:	3802      	subs	r0, #2
 8000bc8:	1b9b      	subs	r3, r3, r6
 8000bca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bce:	2100      	movs	r1, #0
 8000bd0:	b11d      	cbz	r5, 8000bda <__udivmoddi4+0xa6>
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d905      	bls.n	8000bee <__udivmoddi4+0xba>
 8000be2:	b10d      	cbz	r5, 8000be8 <__udivmoddi4+0xb4>
 8000be4:	e9c5 0100 	strd	r0, r1, [r5]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4608      	mov	r0, r1
 8000bec:	e7f5      	b.n	8000bda <__udivmoddi4+0xa6>
 8000bee:	fab3 f183 	clz	r1, r3
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d146      	bne.n	8000c84 <__udivmoddi4+0x150>
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xcc>
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	f0c0 80f0 	bcc.w	8000de0 <__udivmoddi4+0x2ac>
 8000c00:	1a86      	subs	r6, r0, r2
 8000c02:	eb64 0303 	sbc.w	r3, r4, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d0e6      	beq.n	8000bda <__udivmoddi4+0xa6>
 8000c0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c10:	e7e3      	b.n	8000bda <__udivmoddi4+0xa6>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	f040 8090 	bne.w	8000d38 <__udivmoddi4+0x204>
 8000c18:	eba1 040c 	sub.w	r4, r1, ip
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	fa1f f78c 	uxth.w	r7, ip
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c36:	fb07 f006 	mul.w	r0, r7, r6
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x11c>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x11a>
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c4e:	4626      	mov	r6, r4
 8000c50:	1a1c      	subs	r4, r3, r0
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c62:	fb00 f707 	mul.w	r7, r0, r7
 8000c66:	429f      	cmp	r7, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x148>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x146>
 8000c74:	429f      	cmp	r7, r3
 8000c76:	f200 80b0 	bhi.w	8000dda <__udivmoddi4+0x2a6>
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	1bdb      	subs	r3, r3, r7
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	e7a5      	b.n	8000bd0 <__udivmoddi4+0x9c>
 8000c84:	f1c1 0620 	rsb	r6, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c94:	fa04 f301 	lsl.w	r3, r4, r1
 8000c98:	ea43 030c 	orr.w	r3, r3, ip
 8000c9c:	40f4      	lsrs	r4, r6
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	0c38      	lsrs	r0, r7, #16
 8000ca4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cbc:	45a1      	cmp	r9, r4
 8000cbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x1a6>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cca:	f080 8084 	bcs.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cce:	45a1      	cmp	r9, r4
 8000cd0:	f240 8081 	bls.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd8:	443c      	add	r4, r7
 8000cda:	eba4 0409 	sub.w	r4, r4, r9
 8000cde:	fa1f f983 	uxth.w	r9, r3
 8000ce2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ce6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x1d2>
 8000cf6:	193c      	adds	r4, r7, r4
 8000cf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cfc:	d267      	bcs.n	8000dce <__udivmoddi4+0x29a>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	d965      	bls.n	8000dce <__udivmoddi4+0x29a>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	443c      	add	r4, r7
 8000d06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d0e:	eba4 040c 	sub.w	r4, r4, ip
 8000d12:	429c      	cmp	r4, r3
 8000d14:	46ce      	mov	lr, r9
 8000d16:	469c      	mov	ip, r3
 8000d18:	d351      	bcc.n	8000dbe <__udivmoddi4+0x28a>
 8000d1a:	d04e      	beq.n	8000dba <__udivmoddi4+0x286>
 8000d1c:	b155      	cbz	r5, 8000d34 <__udivmoddi4+0x200>
 8000d1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d22:	eb64 040c 	sbc.w	r4, r4, ip
 8000d26:	fa04 f606 	lsl.w	r6, r4, r6
 8000d2a:	40cb      	lsrs	r3, r1
 8000d2c:	431e      	orrs	r6, r3
 8000d2e:	40cc      	lsrs	r4, r1
 8000d30:	e9c5 6400 	strd	r6, r4, [r5]
 8000d34:	2100      	movs	r1, #0
 8000d36:	e750      	b.n	8000bda <__udivmoddi4+0xa6>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d44:	fa24 f303 	lsr.w	r3, r4, r3
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	430c      	orrs	r4, r1
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	fb00 f107 	mul.w	r1, r0, r7
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x24c>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d76:	d22c      	bcs.n	8000dd2 <__udivmoddi4+0x29e>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d92a      	bls.n	8000dd2 <__udivmoddi4+0x29e>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d88:	fb08 3311 	mls	r3, r8, r1, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb01 f307 	mul.w	r3, r1, r7
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x276>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da0:	d213      	bcs.n	8000dca <__udivmoddi4+0x296>
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	d911      	bls.n	8000dca <__udivmoddi4+0x296>
 8000da6:	3902      	subs	r1, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	1ae4      	subs	r4, r4, r3
 8000dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db0:	e739      	b.n	8000c26 <__udivmoddi4+0xf2>
 8000db2:	4604      	mov	r4, r0
 8000db4:	e6f0      	b.n	8000b98 <__udivmoddi4+0x64>
 8000db6:	4608      	mov	r0, r1
 8000db8:	e706      	b.n	8000bc8 <__udivmoddi4+0x94>
 8000dba:	45c8      	cmp	r8, r9
 8000dbc:	d2ae      	bcs.n	8000d1c <__udivmoddi4+0x1e8>
 8000dbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7a8      	b.n	8000d1c <__udivmoddi4+0x1e8>
 8000dca:	4631      	mov	r1, r6
 8000dcc:	e7ed      	b.n	8000daa <__udivmoddi4+0x276>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e799      	b.n	8000d06 <__udivmoddi4+0x1d2>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e7d4      	b.n	8000d80 <__udivmoddi4+0x24c>
 8000dd6:	46d6      	mov	lr, sl
 8000dd8:	e77f      	b.n	8000cda <__udivmoddi4+0x1a6>
 8000dda:	4463      	add	r3, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e74d      	b.n	8000c7c <__udivmoddi4+0x148>
 8000de0:	4606      	mov	r6, r0
 8000de2:	4623      	mov	r3, r4
 8000de4:	4608      	mov	r0, r1
 8000de6:	e70f      	b.n	8000c08 <__udivmoddi4+0xd4>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	e730      	b.n	8000c50 <__udivmoddi4+0x11c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <updatePhaseIncrement>:
//void DAC_Update(void) {
//	uint16_t index = (phase_accumulator >> 21) % SINE_SAMPLES;
//	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, (uint32_t *)sine_wave, SINE_ARRAY_SIZE, DAC_ALIGN_12B_R)
//}

void updatePhaseIncrement(float frequency){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	ed87 0a01 	vstr	s0, [r7, #4]
	phase_increment = (uint32_t) ((frequency/SAMPLING_FREQUENCY)*(1LL << 32));
 8000dfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e02:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000e2c <updatePhaseIncrement+0x38>
 8000e06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e0a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000e30 <updatePhaseIncrement+0x3c>
 8000e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e16:	ee17 2a90 	vmov	r2, s15
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <updatePhaseIncrement+0x40>)
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	45fa0000 	.word	0x45fa0000
 8000e30:	4f800000 	.word	0x4f800000
 8000e34:	20000760 	.word	0x20000760

08000e38 <generate_sine_wave>:
}
/**
 * @brief to generate sine wave
 * @retrival none
 */
static void generate_sine_wave() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0

#if SIN_DDFS
	for(uint16_t i = 0; i < SINE_LUT_SIZE; i++){
 8000e3e:	2300      	movs	r3, #0
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	e03d      	b.n	8000ec0 <generate_sine_wave+0x88>
		sine_wave_LUT[i] = (uint16_t)sin((2.0f * PI * i/SINE_LUT_SIZE)*1822 + 2046);
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fb10 	bl	800046c <__aeabi_i2d>
 8000e4c:	a326      	add	r3, pc, #152	@ (adr r3, 8000ee8 <generate_sine_wave+0xb0>)
 8000e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e52:	f7ff fb75 	bl	8000540 <__aeabi_dmul>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <generate_sine_wave+0xa8>)
 8000e64:	f7ff fc96 	bl	8000794 <__aeabi_ddiv>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	a317      	add	r3, pc, #92	@ (adr r3, 8000ed0 <generate_sine_wave+0x98>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	f7ff fb63 	bl	8000540 <__aeabi_dmul>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	a315      	add	r3, pc, #84	@ (adr r3, 8000ed8 <generate_sine_wave+0xa0>)
 8000e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e88:	f7ff f9a4 	bl	80001d4 <__adddf3>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	ec43 2b17 	vmov	d7, r2, r3
 8000e94:	eeb0 0a47 	vmov.f32	s0, s14
 8000e98:	eef0 0a67 	vmov.f32	s1, s15
 8000e9c:	f009 f950 	bl	800a140 <sin>
 8000ea0:	ec53 2b10 	vmov	r2, r3, d0
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fe0c 	bl	8000ac4 <__aeabi_d2uiz>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee4 <generate_sine_wave+0xac>)
 8000eb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint16_t i = 0; i < SINE_LUT_SIZE; i++){
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	80fb      	strh	r3, [r7, #6]
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	2bff      	cmp	r3, #255	@ 0xff
 8000ec4:	d9be      	bls.n	8000e44 <generate_sine_wave+0xc>
#if SIN_WAVE_20Khz
	for(uint8_t i = 0; i < SINE_ARRAY_SIZE_20Khz; i++) {
			sine_wave[i] = (uint16_t)(sin(i*2*PI / SINE_ARRAY_SIZE_20Khz) * 1822 + 2046);
	}
#endif
}
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	00000000 	.word	0x00000000
 8000ed4:	409c7800 	.word	0x409c7800
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	409ff800 	.word	0x409ff800
 8000ee0:	40700000 	.word	0x40700000
 8000ee4:	20000360 	.word	0x20000360
 8000ee8:	51eb851f 	.word	0x51eb851f
 8000eec:	40191eb8 	.word	0x40191eb8

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 fe2f 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f84d 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f000 fa4d 	bl	800139c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f02:	f000 fa15 	bl	8001330 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f06:	f000 f939 	bl	800117c <MX_I2C1_Init>
  MX_DAC_Init();
 8000f0a:	f000 f901 	bl	8001110 <MX_DAC_Init>
  MX_ADC3_Init();
 8000f0e:	f000 f8ad 	bl	800106c <MX_ADC3_Init>
  MX_TIM2_Init();
 8000f12:	f000 f961 	bl	80011d8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000f16:	f000 f9e1 	bl	80012dc <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000f1a:	f008 fbe1 	bl	80096e0 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8000f1e:	f000 f9a7 	bl	8001270 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  generate_sine_wave();
 8000f22:	f7ff ff89 	bl	8000e38 <generate_sine_wave>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *)sine_wave_LUT, SINE_LUT_SIZE, DAC_ALIGN_12B_R);
 8000f26:	2300      	movs	r3, #0
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f2e:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <main+0x90>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4814      	ldr	r0, [pc, #80]	@ (8000f84 <main+0x94>)
 8000f34:	f001 fa3c 	bl	80023b0 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8000f38:	4813      	ldr	r0, [pc, #76]	@ (8000f88 <main+0x98>)
 8000f3a:	f004 fa0b 	bl	8005354 <HAL_TIM_Base_Start>
  /*
  HAL_UART_Transmit(&huart3,(uint8_t *)buffer_uart,sizeof(buffer_uart),100);
  HAL_ADC_Start_DMA(&hadc3, (uint32_t *) adc_buffer, ADC_BUFFER_SIZE);
  */

  updatePhaseIncrement(87.5);
 8000f3e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000f8c <main+0x9c>
 8000f42:	f7ff ff57 	bl	8000df4 <updatePhaseIncrement>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(float freq = 87.5; freq <= 830; freq += 1) {
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <main+0xa0>)
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	e00f      	b.n	8000f6c <main+0x7c>
		  updatePhaseIncrement(freq);
 8000f4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f50:	f7ff ff50 	bl	8000df4 <updatePhaseIncrement>
		  HAL_Delay(1000);
 8000f54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f58:	f000 fe70 	bl	8001c3c <HAL_Delay>
	  for(float freq = 87.5; freq <= 830; freq += 1) {
 8000f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f68:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f70:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000f94 <main+0xa4>
 8000f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	d9e6      	bls.n	8000f4c <main+0x5c>
 8000f7e:	e7e2      	b.n	8000f46 <main+0x56>
 8000f80:	20000360 	.word	0x20000360
 8000f84:	200001c0 	.word	0x200001c0
 8000f88:	200002d0 	.word	0x200002d0
 8000f8c:	42af0000 	.word	0x42af0000
 8000f90:	42af0000 	.word	0x42af0000
 8000f94:	444f8000 	.word	0x444f8000

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	@ 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	2230      	movs	r2, #48	@ 0x30
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f009 f89c 	bl	800a0e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b28      	ldr	r3, [pc, #160]	@ (8001064 <SystemClock_Config+0xcc>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	4a27      	ldr	r2, [pc, #156]	@ (8001064 <SystemClock_Config+0xcc>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fcc:	4b25      	ldr	r3, [pc, #148]	@ (8001064 <SystemClock_Config+0xcc>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a21      	ldr	r2, [pc, #132]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001006:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001008:	2308      	movs	r3, #8
 800100a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800100c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001010:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001012:	2302      	movs	r3, #2
 8001014:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001016:	2307      	movs	r3, #7
 8001018:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fcb0 	bl	8004984 <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800102a:	f000 fad5 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2302      	movs	r3, #2
 8001034:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001036:	2380      	movs	r3, #128	@ 0x80
 8001038:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001044:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2102      	movs	r1, #2
 800104c:	4618      	mov	r0, r3
 800104e:	f003 ff11 	bl	8004e74 <HAL_RCC_ClockConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001058:	f000 fabe 	bl	80015d8 <Error_Handler>
  }
}
 800105c:	bf00      	nop
 800105e:	3750      	adds	r7, #80	@ 0x50
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001072:	463b      	mov	r3, r7
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <MX_ADC3_Init+0x98>)
 8001080:	4a21      	ldr	r2, [pc, #132]	@ (8001108 <MX_ADC3_Init+0x9c>)
 8001082:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001084:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <MX_ADC3_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800108a:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <MX_ADC3_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001090:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <MX_ADC3_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001096:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <MX_ADC3_Init+0x98>)
 8001098:	2201      	movs	r2, #1
 800109a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_ADC3_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_ADC3_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_ADC3_Init+0x98>)
 80010ac:	4a17      	ldr	r2, [pc, #92]	@ (800110c <MX_ADC3_Init+0xa0>)
 80010ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_ADC3_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MX_ADC3_Init+0x98>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_ADC3_Init+0x98>)
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_ADC3_Init+0x98>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010ca:	480e      	ldr	r0, [pc, #56]	@ (8001104 <MX_ADC3_Init+0x98>)
 80010cc:	f000 fdda 	bl	8001c84 <HAL_ADC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80010d6:	f000 fa7f 	bl	80015d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010da:	2301      	movs	r3, #1
 80010dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010de:	2301      	movs	r3, #1
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	@ (8001104 <MX_ADC3_Init+0x98>)
 80010ec:	f000 fe0e 	bl	8001d0c <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80010f6:	f000 fa6f 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000118 	.word	0x20000118
 8001108:	40012200 	.word	0x40012200
 800110c:	0f000001 	.word	0x0f000001

08001110 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <MX_DAC_Init+0x64>)
 8001120:	4a15      	ldr	r2, [pc, #84]	@ (8001178 <MX_DAC_Init+0x68>)
 8001122:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001124:	4813      	ldr	r0, [pc, #76]	@ (8001174 <MX_DAC_Init+0x64>)
 8001126:	f001 f920 	bl	800236a <HAL_DAC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001130:	f000 fa52 	bl	80015d8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001134:	2304      	movs	r3, #4
 8001136:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	480c      	ldr	r0, [pc, #48]	@ (8001174 <MX_DAC_Init+0x64>)
 8001144:	f001 fa74 	bl	8002630 <HAL_DAC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800114e:	f000 fa43 	bl	80015d8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	2210      	movs	r2, #16
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_DAC_Init+0x64>)
 800115e:	f001 fa67 	bl	8002630 <HAL_DAC_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8001168:	f000 fa36 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200001c0 	.word	0x200001c0
 8001178:	40007400 	.word	0x40007400

0800117c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <MX_I2C1_Init+0x50>)
 8001182:	4a13      	ldr	r2, [pc, #76]	@ (80011d0 <MX_I2C1_Init+0x54>)
 8001184:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_I2C1_Init+0x50>)
 8001188:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <MX_I2C1_Init+0x58>)
 800118a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <MX_I2C1_Init+0x50>)
 800119a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800119e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	@ (80011cc <MX_I2C1_Init+0x50>)
 80011ba:	f002 f84d 	bl	8003258 <HAL_I2C_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c4:	f000 fa08 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000234 	.word	0x20000234
 80011d0:	40005400 	.word	0x40005400
 80011d4:	000186a0 	.word	0x000186a0

080011d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <MX_TIM2_Init+0x94>)
 80011f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <MX_TIM2_Init+0x94>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <MX_TIM2_Init+0x94>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <MX_TIM2_Init+0x94>)
 800120a:	2240      	movs	r2, #64	@ 0x40
 800120c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <MX_TIM2_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <MX_TIM2_Init+0x94>)
 8001216:	2280      	movs	r2, #128	@ 0x80
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800121a:	4814      	ldr	r0, [pc, #80]	@ (800126c <MX_TIM2_Init+0x94>)
 800121c:	f004 f84a 	bl	80052b4 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001226:	f000 f9d7 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	@ (800126c <MX_TIM2_Init+0x94>)
 8001238:	f004 f9e4 	bl	8005604 <HAL_TIM_ConfigClockSource>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001242:	f000 f9c9 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001246:	2320      	movs	r3, #32
 8001248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	@ (800126c <MX_TIM2_Init+0x94>)
 8001254:	f004 fc16 	bl	8005a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800125e:	f000 f9bb 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000288 	.word	0x20000288

08001270 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	463b      	mov	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <MX_TIM6_Init+0x64>)
 8001280:	4a15      	ldr	r2, [pc, #84]	@ (80012d8 <MX_TIM6_Init+0x68>)
 8001282:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <MX_TIM6_Init+0x64>)
 8001286:	220a      	movs	r2, #10
 8001288:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <MX_TIM6_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 949;
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_TIM6_Init+0x64>)
 8001292:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8001296:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <MX_TIM6_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800129e:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <MX_TIM6_Init+0x64>)
 80012a0:	f004 f808 	bl	80052b4 <HAL_TIM_Base_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012aa:	f000 f995 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012ae:	2320      	movs	r3, #32
 80012b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012b6:	463b      	mov	r3, r7
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <MX_TIM6_Init+0x64>)
 80012bc:	f004 fbe2 	bl	8005a84 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012c6:	f000 f987 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200002d0 	.word	0x200002d0
 80012d8:	40001000 	.word	0x40001000

080012dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_USART3_UART_Init+0x4c>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	@ (800132c <MX_USART3_UART_Init+0x50>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <MX_USART3_UART_Init+0x4c>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <MX_USART3_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <MX_USART3_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <MX_USART3_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <MX_USART3_UART_Init+0x4c>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <MX_USART3_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <MX_USART3_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_USART3_UART_Init+0x4c>)
 8001314:	f004 fc46 	bl	8005ba4 <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800131e:	f000 f95b 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000318 	.word	0x20000318
 800132c:	40004800 	.word	0x40004800

08001330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <MX_DMA_Init+0x68>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a16      	ldr	r2, [pc, #88]	@ (8001398 <MX_DMA_Init+0x68>)
 8001340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_DMA_Init+0x68>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <MX_DMA_Init+0x68>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <MX_DMA_Init+0x68>)
 800135c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <MX_DMA_Init+0x68>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2010      	movs	r0, #16
 8001374:	f000 ffc3 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001378:	2010      	movs	r0, #16
 800137a:	f000 ffdc 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2038      	movs	r0, #56	@ 0x38
 8001384:	f000 ffbb 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001388:	2038      	movs	r0, #56	@ 0x38
 800138a:	f000 ffd4 	bl	8002336 <HAL_NVIC_EnableIRQ>

}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	@ 0x30
 80013a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	4b82      	ldr	r3, [pc, #520]	@ (80015c0 <MX_GPIO_Init+0x224>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a81      	ldr	r2, [pc, #516]	@ (80015c0 <MX_GPIO_Init+0x224>)
 80013bc:	f043 0310 	orr.w	r3, r3, #16
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b7f      	ldr	r3, [pc, #508]	@ (80015c0 <MX_GPIO_Init+0x224>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	4b7b      	ldr	r3, [pc, #492]	@ (80015c0 <MX_GPIO_Init+0x224>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a7a      	ldr	r2, [pc, #488]	@ (80015c0 <MX_GPIO_Init+0x224>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b78      	ldr	r3, [pc, #480]	@ (80015c0 <MX_GPIO_Init+0x224>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b74      	ldr	r3, [pc, #464]	@ (80015c0 <MX_GPIO_Init+0x224>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a73      	ldr	r2, [pc, #460]	@ (80015c0 <MX_GPIO_Init+0x224>)
 80013f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b71      	ldr	r3, [pc, #452]	@ (80015c0 <MX_GPIO_Init+0x224>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b6d      	ldr	r3, [pc, #436]	@ (80015c0 <MX_GPIO_Init+0x224>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a6c      	ldr	r2, [pc, #432]	@ (80015c0 <MX_GPIO_Init+0x224>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b6a      	ldr	r3, [pc, #424]	@ (80015c0 <MX_GPIO_Init+0x224>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b66      	ldr	r3, [pc, #408]	@ (80015c0 <MX_GPIO_Init+0x224>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a65      	ldr	r2, [pc, #404]	@ (80015c0 <MX_GPIO_Init+0x224>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b63      	ldr	r3, [pc, #396]	@ (80015c0 <MX_GPIO_Init+0x224>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b5f      	ldr	r3, [pc, #380]	@ (80015c0 <MX_GPIO_Init+0x224>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a5e      	ldr	r2, [pc, #376]	@ (80015c0 <MX_GPIO_Init+0x224>)
 8001448:	f043 0308 	orr.w	r3, r3, #8
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b5c      	ldr	r3, [pc, #368]	@ (80015c0 <MX_GPIO_Init+0x224>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2108      	movs	r1, #8
 800145e:	4859      	ldr	r0, [pc, #356]	@ (80015c4 <MX_GPIO_Init+0x228>)
 8001460:	f001 fee0 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2101      	movs	r1, #1
 8001468:	4857      	ldr	r0, [pc, #348]	@ (80015c8 <MX_GPIO_Init+0x22c>)
 800146a:	f001 fedb 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800146e:	2200      	movs	r2, #0
 8001470:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001474:	4855      	ldr	r0, [pc, #340]	@ (80015cc <MX_GPIO_Init+0x230>)
 8001476:	f001 fed5 	bl	8003224 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800147a:	2308      	movs	r3, #8
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	484c      	ldr	r0, [pc, #304]	@ (80015c4 <MX_GPIO_Init+0x228>)
 8001492:	f001 fd2b 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001496:	2301      	movs	r3, #1
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4846      	ldr	r0, [pc, #280]	@ (80015c8 <MX_GPIO_Init+0x22c>)
 80014ae:	f001 fd1d 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014b2:	2308      	movs	r3, #8
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014c2:	2305      	movs	r3, #5
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	483e      	ldr	r0, [pc, #248]	@ (80015c8 <MX_GPIO_Init+0x22c>)
 80014ce:	f001 fd0d 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014d6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	483a      	ldr	r0, [pc, #232]	@ (80015d0 <MX_GPIO_Init+0x234>)
 80014e8:	f001 fd00 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014ec:	23c0      	movs	r3, #192	@ 0xc0
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014fc:	2305      	movs	r3, #5
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4832      	ldr	r0, [pc, #200]	@ (80015d0 <MX_GPIO_Init+0x234>)
 8001508:	f001 fcf0 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800150c:	2304      	movs	r3, #4
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	482d      	ldr	r0, [pc, #180]	@ (80015d4 <MX_GPIO_Init+0x238>)
 8001520:	f001 fce4 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001524:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001536:	2305      	movs	r3, #5
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4824      	ldr	r0, [pc, #144]	@ (80015d4 <MX_GPIO_Init+0x238>)
 8001542:	f001 fcd3 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001546:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800154a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	481b      	ldr	r0, [pc, #108]	@ (80015cc <MX_GPIO_Init+0x230>)
 8001560:	f001 fcc4 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001564:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001576:	2306      	movs	r3, #6
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	4811      	ldr	r0, [pc, #68]	@ (80015c8 <MX_GPIO_Init+0x22c>)
 8001582:	f001 fcb3 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001586:	2320      	movs	r3, #32
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	480c      	ldr	r0, [pc, #48]	@ (80015cc <MX_GPIO_Init+0x230>)
 800159a:	f001 fca7 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015a2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <MX_GPIO_Init+0x228>)
 80015b4:	f001 fc9a 	bl	8002eec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b8:	bf00      	nop
 80015ba:	3730      	adds	r7, #48	@ 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <Error_Handler+0x8>

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_MspInit+0x4c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001630 <HAL_MspInit+0x4c>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <HAL_MspInit+0x4c>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001622:	2007      	movs	r0, #7
 8001624:	f000 fe60 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a2f      	ldr	r2, [pc, #188]	@ (8001710 <HAL_ADC_MspInit+0xdc>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d158      	bne.n	8001708 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b2e      	ldr	r3, [pc, #184]	@ (8001714 <HAL_ADC_MspInit+0xe0>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	4a2d      	ldr	r2, [pc, #180]	@ (8001714 <HAL_ADC_MspInit+0xe0>)
 8001660:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001664:	6453      	str	r3, [r2, #68]	@ 0x44
 8001666:	4b2b      	ldr	r3, [pc, #172]	@ (8001714 <HAL_ADC_MspInit+0xe0>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <HAL_ADC_MspInit+0xe0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a26      	ldr	r2, [pc, #152]	@ (8001714 <HAL_ADC_MspInit+0xe0>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <HAL_ADC_MspInit+0xe0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800168e:	2302      	movs	r3, #2
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001692:	2303      	movs	r3, #3
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	481d      	ldr	r0, [pc, #116]	@ (8001718 <HAL_ADC_MspInit+0xe4>)
 80016a2:	f001 fc23 	bl	8002eec <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 80016a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_ADC_MspInit+0xec>)
 80016aa:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 80016ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016b2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b4:	4b19      	ldr	r3, [pc, #100]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80016c0:	4b16      	ldr	r3, [pc, #88]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 80016c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016c6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 80016ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016ce:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 80016d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016d6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80016d8:	4b10      	ldr	r3, [pc, #64]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 80016da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016de:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80016e0:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e6:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80016ec:	480b      	ldr	r0, [pc, #44]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 80016ee:	f001 f88d 	bl	800280c <HAL_DMA_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80016f8:	f7ff ff6e 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a07      	ldr	r2, [pc, #28]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 8001700:	639a      	str	r2, [r3, #56]	@ 0x38
 8001702:	4a06      	ldr	r2, [pc, #24]	@ (800171c <HAL_ADC_MspInit+0xe8>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40012200 	.word	0x40012200
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000
 800171c:	20000160 	.word	0x20000160
 8001720:	40026410 	.word	0x40026410

08001724 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a34      	ldr	r2, [pc, #208]	@ (8001814 <HAL_DAC_MspInit+0xf0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d161      	bne.n	800180a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b33      	ldr	r3, [pc, #204]	@ (8001818 <HAL_DAC_MspInit+0xf4>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	4a32      	ldr	r2, [pc, #200]	@ (8001818 <HAL_DAC_MspInit+0xf4>)
 8001750:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
 8001756:	4b30      	ldr	r3, [pc, #192]	@ (8001818 <HAL_DAC_MspInit+0xf4>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b2c      	ldr	r3, [pc, #176]	@ (8001818 <HAL_DAC_MspInit+0xf4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a2b      	ldr	r2, [pc, #172]	@ (8001818 <HAL_DAC_MspInit+0xf4>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <HAL_DAC_MspInit+0xf4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800177e:	2330      	movs	r3, #48	@ 0x30
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001782:	2303      	movs	r3, #3
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4822      	ldr	r0, [pc, #136]	@ (800181c <HAL_DAC_MspInit+0xf8>)
 8001792:	f001 fbab 	bl	8002eec <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001796:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 8001798:	4a22      	ldr	r2, [pc, #136]	@ (8001824 <HAL_DAC_MspInit+0x100>)
 800179a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800179c:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 800179e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80017a2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 80017a6:	2240      	movs	r2, #64	@ 0x40
 80017a8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 80017b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017b6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 80017ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017be:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017c0:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 80017c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017c6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 80017ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ce:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 80017d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017d6:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80017de:	4810      	ldr	r0, [pc, #64]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 80017e0:	f001 f814 	bl	800280c <HAL_DMA_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80017ea:	f7ff fef5 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <HAL_DAC_MspInit+0xfc>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2036      	movs	r0, #54	@ 0x36
 8001800:	f000 fd7d 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001804:	2036      	movs	r0, #54	@ 0x36
 8001806:	f000 fd96 	bl	8002336 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	@ 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40007400 	.word	0x40007400
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000
 8001820:	200001d4 	.word	0x200001d4
 8001824:	40026088 	.word	0x40026088

08001828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a19      	ldr	r2, [pc, #100]	@ (80018ac <HAL_I2C_MspInit+0x84>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d12c      	bne.n	80018a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001866:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186c:	2312      	movs	r3, #18
 800186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001870:	2301      	movs	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001878:	2304      	movs	r3, #4
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <HAL_I2C_MspInit+0x8c>)
 8001884:	f001 fb32 	bl	8002eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 8001892:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001896:	6413      	str	r3, [r2, #64]	@ 0x40
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	@ 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40005400 	.word	0x40005400
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020400 	.word	0x40020400

080018b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c8:	d116      	bne.n	80018f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <HAL_TIM_Base_MspInit+0x80>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	4a19      	ldr	r2, [pc, #100]	@ (8001938 <HAL_TIM_Base_MspInit+0x80>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <HAL_TIM_Base_MspInit+0x80>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	201c      	movs	r0, #28
 80018ec:	f000 fd07 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f0:	201c      	movs	r0, #28
 80018f2:	f000 fd20 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018f6:	e01a      	b.n	800192e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0f      	ldr	r2, [pc, #60]	@ (800193c <HAL_TIM_Base_MspInit+0x84>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d115      	bne.n	800192e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <HAL_TIM_Base_MspInit+0x80>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	4a0b      	ldr	r2, [pc, #44]	@ (8001938 <HAL_TIM_Base_MspInit+0x80>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	6413      	str	r3, [r2, #64]	@ 0x40
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <HAL_TIM_Base_MspInit+0x80>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2036      	movs	r0, #54	@ 0x36
 8001924:	f000 fceb 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001928:	2036      	movs	r0, #54	@ 0x36
 800192a:	f000 fd04 	bl	8002336 <HAL_NVIC_EnableIRQ>
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40001000 	.word	0x40001000

08001940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	@ 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a29      	ldr	r2, [pc, #164]	@ (8001a04 <HAL_UART_MspInit+0xc4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d14b      	bne.n	80019fa <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <HAL_UART_MspInit+0xc8>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a27      	ldr	r2, [pc, #156]	@ (8001a08 <HAL_UART_MspInit+0xc8>)
 800196c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <HAL_UART_MspInit+0xc8>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <HAL_UART_MspInit+0xc8>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a20      	ldr	r2, [pc, #128]	@ (8001a08 <HAL_UART_MspInit+0xc8>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <HAL_UART_MspInit+0xc8>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_UART_MspInit+0xc8>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a19      	ldr	r2, [pc, #100]	@ (8001a08 <HAL_UART_MspInit+0xc8>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <HAL_UART_MspInit+0xc8>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019c8:	2307      	movs	r3, #7
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	480e      	ldr	r0, [pc, #56]	@ (8001a0c <HAL_UART_MspInit+0xcc>)
 80019d4:	f001 fa8a 	bl	8002eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ea:	2307      	movs	r3, #7
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4806      	ldr	r0, [pc, #24]	@ (8001a10 <HAL_UART_MspInit+0xd0>)
 80019f6:	f001 fa79 	bl	8002eec <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	@ 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40004800 	.word	0x40004800
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020c00 	.word	0x40020c00

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <NMI_Handler+0x4>

08001a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6a:	f000 f8c7 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <DMA1_Stream5_IRQHandler+0x10>)
 8001a7a:	f000 ffcd 	bl	8002a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200001d4 	.word	0x200001d4

08001a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <TIM2_IRQHandler+0x10>)
 8001a8e:	f003 fcc9 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000288 	.word	0x20000288

08001a9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001aa0:	4803      	ldr	r0, [pc, #12]	@ (8001ab0 <TIM6_DAC_IRQHandler+0x14>)
 8001aa2:	f000 fd47 	bl	8002534 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001aa6:	4803      	ldr	r0, [pc, #12]	@ (8001ab4 <TIM6_DAC_IRQHandler+0x18>)
 8001aa8:	f003 fcbc 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200001c0 	.word	0x200001c0
 8001ab4:	200002d0 	.word	0x200002d0

08001ab8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001abc:	4802      	ldr	r0, [pc, #8]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x10>)
 8001abe:	f000 ffab 	bl	8002a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000160 	.word	0x20000160

08001acc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <OTG_FS_IRQHandler+0x10>)
 8001ad2:	f001 fe49 	bl	8003768 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20001c48 	.word	0x20001c48

08001ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b08:	f7ff ffea 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b0c:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b0e:	490d      	ldr	r1, [pc, #52]	@ (8001b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b10:	4a0d      	ldr	r2, [pc, #52]	@ (8001b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b24:	4c0a      	ldr	r4, [pc, #40]	@ (8001b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b32:	f008 fadf 	bl	800a0f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b36:	f7ff f9db 	bl	8000ef0 <main>
  bx  lr    
 8001b3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001b48:	0800b408 	.word	0x0800b408
  ldr r2, =_sbss
 8001b4c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001b50:	2000234c 	.word	0x2000234c

08001b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <HAL_Init+0x40>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <HAL_Init+0x40>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	@ (8001b98 <HAL_Init+0x40>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 fbb1 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 f808 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff fd2a 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_InitTick+0x54>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_InitTick+0x58>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fbc9 	bl	8002352 <HAL_SYSTICK_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00e      	b.n	8001be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d80a      	bhi.n	8001be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f000 fb91 	bl	80022fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bdc:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <HAL_InitTick+0x5c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	20000764 	.word	0x20000764

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000764 	.word	0x20000764

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff ffee 	bl	8001c24 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <HAL_Delay+0x44>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffde 	bl	8001c24 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d8f7      	bhi.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008

08001c84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e033      	b.n	8001d02 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fcc6 	bl	8001634 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d118      	bne.n	8001cf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cca:	f023 0302 	bic.w	r3, r3, #2
 8001cce:	f043 0202 	orr.w	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f93a 	bl	8001f50 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cf2:	e001      	b.n	8001cf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1c>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e105      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x228>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b09      	cmp	r3, #9
 8001d36:	d925      	bls.n	8001d84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68d9      	ldr	r1, [r3, #12]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b1e      	subs	r3, #30
 8001d4e:	2207      	movs	r2, #7
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43da      	mvns	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68d9      	ldr	r1, [r3, #12]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	4603      	mov	r3, r0
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4403      	add	r3, r0
 8001d76:	3b1e      	subs	r3, #30
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	e022      	b.n	8001dca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	2207      	movs	r2, #7
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4403      	add	r3, r0
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d824      	bhi.n	8001e1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	3b05      	subs	r3, #5
 8001de4:	221f      	movs	r2, #31
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	400a      	ands	r2, r1
 8001df2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b05      	subs	r3, #5
 8001e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e1a:	e04c      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	d824      	bhi.n	8001e6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b23      	subs	r3, #35	@ 0x23
 8001e36:	221f      	movs	r2, #31
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	400a      	ands	r2, r1
 8001e44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b23      	subs	r3, #35	@ 0x23
 8001e60:	fa00 f203 	lsl.w	r2, r0, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e6c:	e023      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b41      	subs	r3, #65	@ 0x41
 8001e80:	221f      	movs	r2, #31
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b41      	subs	r3, #65	@ 0x41
 8001eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb6:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <HAL_ADC_ConfigChannel+0x234>)
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a21      	ldr	r2, [pc, #132]	@ (8001f44 <HAL_ADC_ConfigChannel+0x238>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d109      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b12      	cmp	r3, #18
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a19      	ldr	r2, [pc, #100]	@ (8001f44 <HAL_ADC_ConfigChannel+0x238>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d123      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x21e>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d003      	beq.n	8001ef2 <HAL_ADC_ConfigChannel+0x1e6>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b11      	cmp	r3, #17
 8001ef0:	d11b      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b10      	cmp	r3, #16
 8001f04:	d111      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <HAL_ADC_ConfigChannel+0x23c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a10      	ldr	r2, [pc, #64]	@ (8001f4c <HAL_ADC_ConfigChannel+0x240>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	0c9a      	lsrs	r2, r3, #18
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f1c:	e002      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f9      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40012300 	.word	0x40012300
 8001f44:	40012000 	.word	0x40012000
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	431bde83 	.word	0x431bde83

08001f50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f58:	4b79      	ldr	r3, [pc, #484]	@ (8002140 <ADC_Init+0x1f0>)
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	021a      	lsls	r2, r3, #8
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6899      	ldr	r1, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe2:	4a58      	ldr	r2, [pc, #352]	@ (8002144 <ADC_Init+0x1f4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d022      	beq.n	800202e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ff6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6899      	ldr	r1, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002018:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6899      	ldr	r1, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	e00f      	b.n	800204e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800203c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800204c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0202 	bic.w	r2, r2, #2
 800205c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6899      	ldr	r1, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	7e1b      	ldrb	r3, [r3, #24]
 8002068:	005a      	lsls	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01b      	beq.n	80020b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800208a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800209a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6859      	ldr	r1, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	3b01      	subs	r3, #1
 80020a8:	035a      	lsls	r2, r3, #13
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	e007      	b.n	80020c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	3b01      	subs	r3, #1
 80020e0:	051a      	lsls	r2, r3, #20
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6899      	ldr	r1, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002106:	025a      	lsls	r2, r3, #9
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800211e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6899      	ldr	r1, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	029a      	lsls	r2, r3, #10
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40012300 	.word	0x40012300
 8002144:	0f000001 	.word	0x0f000001

08002148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217a:	4a04      	ldr	r2, [pc, #16]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db0b      	blt.n	80021d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4907      	ldr	r1, [pc, #28]	@ (80021e4 <__NVIC_EnableIRQ+0x38>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2001      	movs	r0, #1
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	@ (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	@ (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	@ 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	bf28      	it	cs
 800225a:	2304      	movcs	r3, #4
 800225c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	2b06      	cmp	r3, #6
 8002264:	d902      	bls.n	800226c <NVIC_EncodePriority+0x30>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b03      	subs	r3, #3
 800226a:	e000      	b.n	800226e <NVIC_EncodePriority+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	401a      	ands	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43d9      	mvns	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	4313      	orrs	r3, r2
         );
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	@ 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b4:	d301      	bcc.n	80022ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <SysTick_Config+0x40>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c2:	210f      	movs	r1, #15
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
 80022c8:	f7ff ff8e 	bl	80021e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <SysTick_Config+0x40>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <SysTick_Config+0x40>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff29 	bl	8002148 <__NVIC_SetPriorityGrouping>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002310:	f7ff ff3e 	bl	8002190 <__NVIC_GetPriorityGrouping>
 8002314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff ff8e 	bl	800223c <NVIC_EncodePriority>
 8002320:	4602      	mov	r2, r0
 8002322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff5d 	bl	80021e8 <__NVIC_SetPriority>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff31 	bl	80021ac <__NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffa2 	bl	80022a4 <SysTick_Config>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e014      	b.n	80023a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	791b      	ldrb	r3, [r3, #4]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff f9c9 	bl	8001724 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0a2      	b.n	8002512 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	795b      	ldrb	r3, [r3, #5]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_DAC_Start_DMA+0x28>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e09c      	b.n	8002512 <HAL_DAC_Start_DMA+0x162>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2202      	movs	r2, #2
 80023e2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d129      	bne.n	800243e <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4a4b      	ldr	r2, [pc, #300]	@ (800251c <HAL_DAC_Start_DMA+0x16c>)
 80023f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002520 <HAL_DAC_Start_DMA+0x170>)
 80023f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4a49      	ldr	r2, [pc, #292]	@ (8002524 <HAL_DAC_Start_DMA+0x174>)
 8002400:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002410:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_DAC_Start_DMA+0x70>
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	2b04      	cmp	r3, #4
 800241c:	d005      	beq.n	800242a <HAL_DAC_Start_DMA+0x7a>
 800241e:	e009      	b.n	8002434 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3308      	adds	r3, #8
 8002426:	613b      	str	r3, [r7, #16]
        break;
 8002428:	e033      	b.n	8002492 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	330c      	adds	r3, #12
 8002430:	613b      	str	r3, [r7, #16]
        break;
 8002432:	e02e      	b.n	8002492 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3310      	adds	r3, #16
 800243a:	613b      	str	r3, [r7, #16]
        break;
 800243c:	e029      	b.n	8002492 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	4a39      	ldr	r2, [pc, #228]	@ (8002528 <HAL_DAC_Start_DMA+0x178>)
 8002444:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4a38      	ldr	r2, [pc, #224]	@ (800252c <HAL_DAC_Start_DMA+0x17c>)
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4a37      	ldr	r2, [pc, #220]	@ (8002530 <HAL_DAC_Start_DMA+0x180>)
 8002454:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002464:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_DAC_Start_DMA+0xc4>
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	2b04      	cmp	r3, #4
 8002470:	d005      	beq.n	800247e <HAL_DAC_Start_DMA+0xce>
 8002472:	e009      	b.n	8002488 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3314      	adds	r3, #20
 800247a:	613b      	str	r3, [r7, #16]
        break;
 800247c:	e009      	b.n	8002492 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3318      	adds	r3, #24
 8002484:	613b      	str	r3, [r7, #16]
        break;
 8002486:	e004      	b.n	8002492 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	331c      	adds	r3, #28
 800248e:	613b      	str	r3, [r7, #16]
        break;
 8002490:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6898      	ldr	r0, [r3, #8]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	f000 fa59 	bl	8002968 <HAL_DMA_Start_IT>
 80024b6:	4603      	mov	r3, r0
 80024b8:	75fb      	strb	r3, [r7, #23]
 80024ba:	e010      	b.n	80024de <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80024ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	68d8      	ldr	r0, [r3, #12]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	f000 fa47 	bl	8002968 <HAL_DMA_Start_IT>
 80024da:	4603      	mov	r3, r0
 80024dc:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2201      	movs	r2, #1
 80024f8:	409a      	lsls	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e005      	b.n	8002510 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f043 0204 	orr.w	r2, r3, #4
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002510:	7dfb      	ldrb	r3, [r7, #23]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	080026e3 	.word	0x080026e3
 8002520:	08002705 	.word	0x08002705
 8002524:	08002721 	.word	0x08002721
 8002528:	0800279f 	.word	0x0800279f
 800252c:	080027c1 	.word	0x080027c1
 8002530:	080027dd 	.word	0x080027dd

08002534 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01d      	beq.n	8002592 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d018      	beq.n	8002592 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2204      	movs	r2, #4
 8002564:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800257a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800258a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f845 	bl	800261c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01d      	beq.n	80025d8 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d018      	beq.n	80025d8 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2204      	movs	r2, #4
 80025aa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f043 0202 	orr.w	r2, r3, #2
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80025c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80025d0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8d9 	bl	800278a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	@ 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_DAC_ConfigChannel+0x1c>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e042      	b.n	80026d6 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	795b      	ldrb	r3, [r3, #5]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_DAC_ConfigChannel+0x2c>
 8002658:	2302      	movs	r3, #2
 800265a:	e03c      	b.n	80026d6 <HAL_DAC_ConfigChannel+0xa6>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2202      	movs	r2, #2
 8002666:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	22c0      	movs	r2, #192	@ 0xc0
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	400a      	ands	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80026d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	@ 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ee:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff ff75 	bl	80025e0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	711a      	strb	r2, [r3, #4]
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002710:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff ff6e 	bl	80025f4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f043 0204 	orr.w	r2, r3, #4
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff ff64 	bl	8002608 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	711a      	strb	r2, [r3, #4]
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027aa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff ffce 	bl	800274e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	711a      	strb	r2, [r3, #4]
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027cc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f7ff ffc7 	bl	8002762 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f043 0204 	orr.w	r2, r3, #4
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff ffbd 	bl	8002776 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	711a      	strb	r2, [r3, #4]
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff fa04 	bl	8001c24 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e099      	b.n	800295c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002848:	e00f      	b.n	800286a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800284a:	f7ff f9eb 	bl	8001c24 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b05      	cmp	r3, #5
 8002856:	d908      	bls.n	800286a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2203      	movs	r2, #3
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e078      	b.n	800295c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e8      	bne.n	800284a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4b38      	ldr	r3, [pc, #224]	@ (8002964 <HAL_DMA_Init+0x158>)
 8002884:	4013      	ands	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002896:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d107      	bne.n	80028d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	4313      	orrs	r3, r2
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f023 0307 	bic.w	r3, r3, #7
 80028ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d117      	bne.n	800292e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00e      	beq.n	800292e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fa6f 	bl	8002df4 <DMA_CheckFifoParam>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2240      	movs	r2, #64	@ 0x40
 8002920:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800292a:	2301      	movs	r3, #1
 800292c:	e016      	b.n	800295c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa26 	bl	8002d88 <DMA_CalcBaseAndBitshift>
 800293c:	4603      	mov	r3, r0
 800293e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002944:	223f      	movs	r2, #63	@ 0x3f
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	f010803f 	.word	0xf010803f

08002968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_DMA_Start_IT+0x26>
 800298a:	2302      	movs	r3, #2
 800298c:	e040      	b.n	8002a10 <HAL_DMA_Start_IT+0xa8>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d12f      	bne.n	8002a02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f9b8 	bl	8002d2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	223f      	movs	r2, #63	@ 0x3f
 80029c2:	409a      	lsls	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0216 	orr.w	r2, r2, #22
 80029d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0208 	orr.w	r2, r2, #8
 80029ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e005      	b.n	8002a0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a24:	4b8e      	ldr	r3, [pc, #568]	@ (8002c60 <HAL_DMA_IRQHandler+0x248>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a8e      	ldr	r2, [pc, #568]	@ (8002c64 <HAL_DMA_IRQHandler+0x24c>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0a9b      	lsrs	r3, r3, #10
 8002a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a42:	2208      	movs	r2, #8
 8002a44:	409a      	lsls	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01a      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0204 	bic.w	r2, r2, #4
 8002a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a70:	2208      	movs	r2, #8
 8002a72:	409a      	lsls	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	2201      	movs	r2, #1
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d012      	beq.n	8002aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab2:	f043 0202 	orr.w	r2, r3, #2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	2204      	movs	r2, #4
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d012      	beq.n	8002af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002adc:	2204      	movs	r2, #4
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae8:	f043 0204 	orr.w	r2, r3, #4
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af4:	2210      	movs	r2, #16
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d043      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d03c      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b12:	2210      	movs	r2, #16
 8002b14:	409a      	lsls	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d018      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d108      	bne.n	8002b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d024      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
 8002b46:	e01f      	b.n	8002b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
 8002b58:	e016      	b.n	8002b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0208 	bic.w	r2, r2, #8
 8002b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 808f 	beq.w	8002cb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8087 	beq.w	8002cb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bae:	2220      	movs	r2, #32
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b05      	cmp	r3, #5
 8002bc0:	d136      	bne.n	8002c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0216 	bic.w	r2, r2, #22
 8002bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <HAL_DMA_IRQHandler+0x1da>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0208 	bic.w	r2, r2, #8
 8002c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c06:	223f      	movs	r2, #63	@ 0x3f
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d07e      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	4798      	blx	r3
        }
        return;
 8002c2e:	e079      	b.n	8002d24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d01d      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10d      	bne.n	8002c68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d031      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
 8002c5c:	e02c      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x2a0>
 8002c5e:	bf00      	nop
 8002c60:	20000000 	.word	0x20000000
 8002c64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d023      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
 8002c78:	e01e      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10f      	bne.n	8002ca8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0210 	bic.w	r2, r2, #16
 8002c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d032      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d022      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2205      	movs	r2, #5
 8002cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d307      	bcc.n	8002d00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f2      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x2cc>
 8002cfe:	e000      	b.n	8002d02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	4798      	blx	r3
 8002d22:	e000      	b.n	8002d26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d24:	bf00      	nop
    }
  }
}
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b40      	cmp	r3, #64	@ 0x40
 8002d58:	d108      	bne.n	8002d6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d6a:	e007      	b.n	8002d7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	60da      	str	r2, [r3, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	3b10      	subs	r3, #16
 8002d98:	4a14      	ldr	r2, [pc, #80]	@ (8002dec <DMA_CalcBaseAndBitshift+0x64>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002da2:	4a13      	ldr	r2, [pc, #76]	@ (8002df0 <DMA_CalcBaseAndBitshift+0x68>)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d909      	bls.n	8002dca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	1d1a      	adds	r2, r3, #4
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dc8:	e007      	b.n	8002dda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dd2:	f023 0303 	bic.w	r3, r3, #3
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	aaaaaaab 	.word	0xaaaaaaab
 8002df0:	0800b218 	.word	0x0800b218

08002df4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11f      	bne.n	8002e4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d856      	bhi.n	8002ec2 <DMA_CheckFifoParam+0xce>
 8002e14:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <DMA_CheckFifoParam+0x28>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e3f 	.word	0x08002e3f
 8002e24:	08002e2d 	.word	0x08002e2d
 8002e28:	08002ec3 	.word	0x08002ec3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d046      	beq.n	8002ec6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3c:	e043      	b.n	8002ec6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e46:	d140      	bne.n	8002eca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e4c:	e03d      	b.n	8002eca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e56:	d121      	bne.n	8002e9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d837      	bhi.n	8002ece <DMA_CheckFifoParam+0xda>
 8002e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e64 <DMA_CheckFifoParam+0x70>)
 8002e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e64:	08002e75 	.word	0x08002e75
 8002e68:	08002e7b 	.word	0x08002e7b
 8002e6c:	08002e75 	.word	0x08002e75
 8002e70:	08002e8d 	.word	0x08002e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      break;
 8002e78:	e030      	b.n	8002edc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d025      	beq.n	8002ed2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8a:	e022      	b.n	8002ed2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e94:	d11f      	bne.n	8002ed6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e9a:	e01c      	b.n	8002ed6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d903      	bls.n	8002eaa <DMA_CheckFifoParam+0xb6>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d003      	beq.n	8002eb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ea8:	e018      	b.n	8002edc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
      break;
 8002eae:	e015      	b.n	8002edc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00e      	beq.n	8002eda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec0:	e00b      	b.n	8002eda <DMA_CheckFifoParam+0xe6>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e00a      	b.n	8002edc <DMA_CheckFifoParam+0xe8>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e008      	b.n	8002edc <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e006      	b.n	8002edc <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e004      	b.n	8002edc <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e002      	b.n	8002edc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ed6:	bf00      	nop
 8002ed8:	e000      	b.n	8002edc <DMA_CheckFifoParam+0xe8>
      break;
 8002eda:	bf00      	nop
    }
  } 
  
  return status; 
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b089      	sub	sp, #36	@ 0x24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e16b      	b.n	80031e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f08:	2201      	movs	r2, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	f040 815a 	bne.w	80031da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d005      	beq.n	8002f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d130      	bne.n	8002fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	2203      	movs	r2, #3
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f74:	2201      	movs	r2, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 0201 	and.w	r2, r3, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d017      	beq.n	8002fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d123      	bne.n	8003030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	08da      	lsrs	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3208      	adds	r2, #8
 8002ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	08da      	lsrs	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3208      	adds	r2, #8
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0203 	and.w	r2, r3, #3
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80b4 	beq.w	80031da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	4b60      	ldr	r3, [pc, #384]	@ (80031f8 <HAL_GPIO_Init+0x30c>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307a:	4a5f      	ldr	r2, [pc, #380]	@ (80031f8 <HAL_GPIO_Init+0x30c>)
 800307c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003080:	6453      	str	r3, [r2, #68]	@ 0x44
 8003082:	4b5d      	ldr	r3, [pc, #372]	@ (80031f8 <HAL_GPIO_Init+0x30c>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800308e:	4a5b      	ldr	r2, [pc, #364]	@ (80031fc <HAL_GPIO_Init+0x310>)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	3302      	adds	r3, #2
 8003096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	220f      	movs	r2, #15
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a52      	ldr	r2, [pc, #328]	@ (8003200 <HAL_GPIO_Init+0x314>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d02b      	beq.n	8003112 <HAL_GPIO_Init+0x226>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a51      	ldr	r2, [pc, #324]	@ (8003204 <HAL_GPIO_Init+0x318>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d025      	beq.n	800310e <HAL_GPIO_Init+0x222>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a50      	ldr	r2, [pc, #320]	@ (8003208 <HAL_GPIO_Init+0x31c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01f      	beq.n	800310a <HAL_GPIO_Init+0x21e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a4f      	ldr	r2, [pc, #316]	@ (800320c <HAL_GPIO_Init+0x320>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d019      	beq.n	8003106 <HAL_GPIO_Init+0x21a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003210 <HAL_GPIO_Init+0x324>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_GPIO_Init+0x216>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003214 <HAL_GPIO_Init+0x328>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00d      	beq.n	80030fe <HAL_GPIO_Init+0x212>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003218 <HAL_GPIO_Init+0x32c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <HAL_GPIO_Init+0x20e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4b      	ldr	r2, [pc, #300]	@ (800321c <HAL_GPIO_Init+0x330>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_GPIO_Init+0x20a>
 80030f2:	2307      	movs	r3, #7
 80030f4:	e00e      	b.n	8003114 <HAL_GPIO_Init+0x228>
 80030f6:	2308      	movs	r3, #8
 80030f8:	e00c      	b.n	8003114 <HAL_GPIO_Init+0x228>
 80030fa:	2306      	movs	r3, #6
 80030fc:	e00a      	b.n	8003114 <HAL_GPIO_Init+0x228>
 80030fe:	2305      	movs	r3, #5
 8003100:	e008      	b.n	8003114 <HAL_GPIO_Init+0x228>
 8003102:	2304      	movs	r3, #4
 8003104:	e006      	b.n	8003114 <HAL_GPIO_Init+0x228>
 8003106:	2303      	movs	r3, #3
 8003108:	e004      	b.n	8003114 <HAL_GPIO_Init+0x228>
 800310a:	2302      	movs	r3, #2
 800310c:	e002      	b.n	8003114 <HAL_GPIO_Init+0x228>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_GPIO_Init+0x228>
 8003112:	2300      	movs	r3, #0
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	f002 0203 	and.w	r2, r2, #3
 800311a:	0092      	lsls	r2, r2, #2
 800311c:	4093      	lsls	r3, r2
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4313      	orrs	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003124:	4935      	ldr	r1, [pc, #212]	@ (80031fc <HAL_GPIO_Init+0x310>)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	3302      	adds	r3, #2
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003132:	4b3b      	ldr	r3, [pc, #236]	@ (8003220 <HAL_GPIO_Init+0x334>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003156:	4a32      	ldr	r2, [pc, #200]	@ (8003220 <HAL_GPIO_Init+0x334>)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800315c:	4b30      	ldr	r3, [pc, #192]	@ (8003220 <HAL_GPIO_Init+0x334>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003180:	4a27      	ldr	r2, [pc, #156]	@ (8003220 <HAL_GPIO_Init+0x334>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003186:	4b26      	ldr	r3, [pc, #152]	@ (8003220 <HAL_GPIO_Init+0x334>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <HAL_GPIO_Init+0x334>)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <HAL_GPIO_Init+0x334>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d4:	4a12      	ldr	r2, [pc, #72]	@ (8003220 <HAL_GPIO_Init+0x334>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3301      	adds	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b0f      	cmp	r3, #15
 80031e4:	f67f ae90 	bls.w	8002f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3724      	adds	r7, #36	@ 0x24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40013800 	.word	0x40013800
 8003200:	40020000 	.word	0x40020000
 8003204:	40020400 	.word	0x40020400
 8003208:	40020800 	.word	0x40020800
 800320c:	40020c00 	.word	0x40020c00
 8003210:	40021000 	.word	0x40021000
 8003214:	40021400 	.word	0x40021400
 8003218:	40021800 	.word	0x40021800
 800321c:	40021c00 	.word	0x40021c00
 8003220:	40013c00 	.word	0x40013c00

08003224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]
 8003230:	4613      	mov	r3, r2
 8003232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003234:	787b      	ldrb	r3, [r7, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003240:	e003      	b.n	800324a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	041a      	lsls	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	619a      	str	r2, [r3, #24]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e12b      	b.n	80034c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fad2 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2224      	movs	r2, #36	@ 0x24
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032bc:	f001 ffd2 	bl	8005264 <HAL_RCC_GetPCLK1Freq>
 80032c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a81      	ldr	r2, [pc, #516]	@ (80034cc <HAL_I2C_Init+0x274>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d807      	bhi.n	80032dc <HAL_I2C_Init+0x84>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a80      	ldr	r2, [pc, #512]	@ (80034d0 <HAL_I2C_Init+0x278>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	bf94      	ite	ls
 80032d4:	2301      	movls	r3, #1
 80032d6:	2300      	movhi	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e006      	b.n	80032ea <HAL_I2C_Init+0x92>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a7d      	ldr	r2, [pc, #500]	@ (80034d4 <HAL_I2C_Init+0x27c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	bf94      	ite	ls
 80032e4:	2301      	movls	r3, #1
 80032e6:	2300      	movhi	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0e7      	b.n	80034c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a78      	ldr	r2, [pc, #480]	@ (80034d8 <HAL_I2C_Init+0x280>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0c9b      	lsrs	r3, r3, #18
 80032fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a6a      	ldr	r2, [pc, #424]	@ (80034cc <HAL_I2C_Init+0x274>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d802      	bhi.n	800332c <HAL_I2C_Init+0xd4>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	3301      	adds	r3, #1
 800332a:	e009      	b.n	8003340 <HAL_I2C_Init+0xe8>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	4a69      	ldr	r2, [pc, #420]	@ (80034dc <HAL_I2C_Init+0x284>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	3301      	adds	r3, #1
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	430b      	orrs	r3, r1
 8003346:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003352:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	495c      	ldr	r1, [pc, #368]	@ (80034cc <HAL_I2C_Init+0x274>)
 800335c:	428b      	cmp	r3, r1
 800335e:	d819      	bhi.n	8003394 <HAL_I2C_Init+0x13c>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1e59      	subs	r1, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fbb1 f3f3 	udiv	r3, r1, r3
 800336e:	1c59      	adds	r1, r3, #1
 8003370:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003374:	400b      	ands	r3, r1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_I2C_Init+0x138>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1e59      	subs	r1, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fbb1 f3f3 	udiv	r3, r1, r3
 8003388:	3301      	adds	r3, #1
 800338a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338e:	e051      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 8003390:	2304      	movs	r3, #4
 8003392:	e04f      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d111      	bne.n	80033c0 <HAL_I2C_Init+0x168>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1e58      	subs	r0, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e012      	b.n	80033e6 <HAL_I2C_Init+0x18e>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1e58      	subs	r0, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	0099      	lsls	r1, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Init+0x196>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e022      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10e      	bne.n	8003414 <HAL_I2C_Init+0x1bc>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1e58      	subs	r0, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	440b      	add	r3, r1
 8003404:	fbb0 f3f3 	udiv	r3, r0, r3
 8003408:	3301      	adds	r3, #1
 800340a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003412:	e00f      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e58      	subs	r0, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	0099      	lsls	r1, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	fbb0 f3f3 	udiv	r3, r0, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003430:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	6809      	ldr	r1, [r1, #0]
 8003438:	4313      	orrs	r3, r2
 800343a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003462:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6911      	ldr	r1, [r2, #16]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68d2      	ldr	r2, [r2, #12]
 800346e:	4311      	orrs	r1, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	430b      	orrs	r3, r1
 8003476:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	000186a0 	.word	0x000186a0
 80034d0:	001e847f 	.word	0x001e847f
 80034d4:	003d08ff 	.word	0x003d08ff
 80034d8:	431bde83 	.word	0x431bde83
 80034dc:	10624dd3 	.word	0x10624dd3

080034e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e101      	b.n	80036f6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d106      	bne.n	8003512 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f006 fac7 	bl	8009aa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2203      	movs	r2, #3
 8003516:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003520:	d102      	bne.n	8003528 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f002 ff14 	bl	800635a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	7c1a      	ldrb	r2, [r3, #16]
 800353a:	f88d 2000 	strb.w	r2, [sp]
 800353e:	3304      	adds	r3, #4
 8003540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003542:	f002 fdf3 	bl	800612c <USB_CoreInit>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0ce      	b.n	80036f6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f002 ff0c 	bl	800637c <USB_SetCurrentMode>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0bf      	b.n	80036f6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	e04a      	b.n	8003612 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3315      	adds	r3, #21
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	3314      	adds	r3, #20
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	b298      	uxth	r0, r3
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	332e      	adds	r3, #46	@ 0x2e
 80035b8:	4602      	mov	r2, r0
 80035ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3318      	adds	r3, #24
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	331c      	adds	r3, #28
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3320      	adds	r3, #32
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3324      	adds	r3, #36	@ 0x24
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	3301      	adds	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	791b      	ldrb	r3, [r3, #4]
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	429a      	cmp	r2, r3
 800361a:	d3af      	bcc.n	800357c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e044      	b.n	80036ac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	3301      	adds	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	791b      	ldrb	r3, [r3, #4]
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d3b5      	bcc.n	8003622 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7c1a      	ldrb	r2, [r3, #16]
 80036be:	f88d 2000 	strb.w	r2, [sp]
 80036c2:	3304      	adds	r3, #4
 80036c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c6:	f002 fea5 	bl	8006414 <USB_DevInit>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e00c      	b.n	80036f6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 feef 	bl	80074d2 <USB_DevDisconnect>

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_PCD_Start+0x1c>
 8003716:	2302      	movs	r3, #2
 8003718:	e022      	b.n	8003760 <HAL_PCD_Start+0x62>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f002 fdf6 	bl	8006338 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f003 fe9d 	bl	8007490 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b08d      	sub	sp, #52	@ 0x34
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f003 ff5b 	bl	800763a <USB_GetMode>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	f040 848c 	bne.w	80040a4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f003 febf 	bl	8007514 <USB_ReadInterrupts>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8482 	beq.w	80040a2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 feac 	bl	8007514 <USB_ReadInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d107      	bne.n	80037d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f002 0202 	and.w	r2, r2, #2
 80037d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f003 fe9a 	bl	8007514 <USB_ReadInterrupts>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d161      	bne.n	80038ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0210 	bic.w	r2, r2, #16
 80037f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	3304      	adds	r3, #4
 8003818:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	0c5b      	lsrs	r3, r3, #17
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	2b02      	cmp	r3, #2
 8003824:	d124      	bne.n	8003870 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d035      	beq.n	800389e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800383c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003840:	b29b      	uxth	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	6a38      	ldr	r0, [r7, #32]
 8003846:	f003 fcd1 	bl	80071ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003856:	441a      	add	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003868:	441a      	add	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	615a      	str	r2, [r3, #20]
 800386e:	e016      	b.n	800389e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	0c5b      	lsrs	r3, r3, #17
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	2b06      	cmp	r3, #6
 800387a:	d110      	bne.n	800389e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003882:	2208      	movs	r2, #8
 8003884:	4619      	mov	r1, r3
 8003886:	6a38      	ldr	r0, [r7, #32]
 8003888:	f003 fcb0 	bl	80071ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003898:	441a      	add	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0210 	orr.w	r2, r2, #16
 80038ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f003 fe2e 	bl	8007514 <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038c2:	f040 80a7 	bne.w	8003a14 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f003 fe33 	bl	800753a <USB_ReadDevAllOutEpInterrupt>
 80038d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80038d6:	e099      	b.n	8003a0c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 808e 	beq.w	8003a00 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f003 fe57 	bl	80075a2 <USB_ReadDevOutEPInterrupt>
 80038f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00c      	beq.n	800391a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390c:	461a      	mov	r2, r3
 800390e:	2301      	movs	r3, #1
 8003910:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003912:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fea3 	bl	8004660 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003930:	461a      	mov	r2, r3
 8003932:	2308      	movs	r3, #8
 8003934:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003936:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 ff79 	bl	8004830 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003954:	461a      	mov	r2, r3
 8003956:	2310      	movs	r3, #16
 8003958:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d030      	beq.n	80039c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396c:	2b80      	cmp	r3, #128	@ 0x80
 800396e:	d109      	bne.n	8003984 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800397e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003982:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	3304      	adds	r3, #4
 8003998:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	78db      	ldrb	r3, [r3, #3]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d108      	bne.n	80039b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f006 f98a 	bl	8009cc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	2302      	movs	r3, #2
 80039c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039dc:	461a      	mov	r2, r3
 80039de:	2320      	movs	r3, #32
 80039e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f8:	461a      	mov	r2, r3
 80039fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	3301      	adds	r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f47f af62 	bne.w	80038d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f003 fd7b 	bl	8007514 <USB_ReadInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a28:	f040 80db 	bne.w	8003be2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 fd9c 	bl	800756e <USB_ReadDevAllInEpInterrupt>
 8003a36:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003a3c:	e0cd      	b.n	8003bda <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80c2 	beq.w	8003bce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f003 fdc2 	bl	80075de <USB_ReadDevInEPInterrupt>
 8003a5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d057      	beq.n	8003b16 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69f9      	ldr	r1, [r7, #28]
 8003a82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a86:	4013      	ands	r3, r2
 8003a88:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a96:	461a      	mov	r2, r3
 8003a98:	2301      	movs	r3, #1
 8003a9a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	799b      	ldrb	r3, [r3, #6]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d132      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3320      	adds	r3, #32
 8003ab4:	6819      	ldr	r1, [r3, #0]
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4403      	add	r3, r0
 8003ac4:	331c      	adds	r3, #28
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4419      	add	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4403      	add	r3, r0
 8003ad8:	3320      	adds	r3, #32
 8003ada:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d113      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x3a2>
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	3324      	adds	r3, #36	@ 0x24
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d108      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b02:	461a      	mov	r2, r3
 8003b04:	2101      	movs	r1, #1
 8003b06:	f003 fdc9 	bl	800769c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f006 f854 	bl	8009bbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2308      	movs	r3, #8
 8003b30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b64:	461a      	mov	r2, r3
 8003b66:	2340      	movs	r3, #64	@ 0x40
 8003b68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d023      	beq.n	8003bbc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b76:	6a38      	ldr	r0, [r7, #32]
 8003b78:	f002 fdb0 	bl	80066dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	3310      	adds	r3, #16
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	78db      	ldrb	r3, [r3, #3]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d108      	bne.n	8003baa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f006 f8a1 	bl	8009cec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2302      	movs	r3, #2
 8003bba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fcbd 	bl	8004548 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f47f af2e 	bne.w	8003a3e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 fc94 	bl	8007514 <USB_ReadInterrupts>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bf6:	d122      	bne.n	8003c3e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d108      	bne.n	8003c28 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c1e:	2100      	movs	r1, #0
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fea3 	bl	800496c <HAL_PCDEx_LPM_Callback>
 8003c26:	e002      	b.n	8003c2e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f006 f83f 	bl	8009cac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f003 fc66 	bl	8007514 <USB_ReadInterrupts>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c52:	d112      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d102      	bne.n	8003c6a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f005 fffb 	bl	8009c60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003c78:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f003 fc48 	bl	8007514 <USB_ReadInterrupts>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8e:	f040 80b7 	bne.w	8003e00 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2110      	movs	r1, #16
 8003cac:	4618      	mov	r0, r3
 8003cae:	f002 fd15 	bl	80066dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cb6:	e046      	b.n	8003d46 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cdc:	0151      	lsls	r1, r2, #5
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	440a      	add	r2, r1
 8003ce2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ce6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cfe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d10:	0151      	lsls	r1, r2, #5
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	440a      	add	r2, r1
 8003d16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d3e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d42:	3301      	adds	r3, #1
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	791b      	ldrb	r3, [r3, #4]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d3b2      	bcc.n	8003cb8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d60:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003d64:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	7bdb      	ldrb	r3, [r3, #15]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d7e:	f043 030b 	orr.w	r3, r3, #11
 8003d82:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d94:	f043 030b 	orr.w	r3, r3, #11
 8003d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d9a:	e015      	b.n	8003dc8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003daa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003db2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dc2:	f043 030b 	orr.w	r3, r3, #11
 8003dc6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dd6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003dda:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dea:	461a      	mov	r2, r3
 8003dec:	f003 fc56 	bl	800769c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f003 fb85 	bl	8007514 <USB_ReadInterrupts>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e14:	d123      	bne.n	8003e5e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f003 fc1b 	bl	8007656 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f002 fcd2 	bl	80067ce <USB_GetDevSpeed>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681c      	ldr	r4, [r3, #0]
 8003e36:	f001 fa09 	bl	800524c <HAL_RCC_GetHCLKFreq>
 8003e3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e40:	461a      	mov	r2, r3
 8003e42:	4620      	mov	r0, r4
 8003e44:	f002 f9d6 	bl	80061f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f005 fee0 	bl	8009c0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f003 fb56 	bl	8007514 <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d10a      	bne.n	8003e88 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f005 febd 	bl	8009bf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f002 0208 	and.w	r2, r2, #8
 8003e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f003 fb41 	bl	8007514 <USB_ReadInterrupts>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e98:	2b80      	cmp	r3, #128	@ 0x80
 8003e9a:	d123      	bne.n	8003ee4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eac:	e014      	b.n	8003ed8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fb0a 	bl	80044e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	791b      	ldrb	r3, [r3, #4]
 8003edc:	461a      	mov	r2, r3
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d3e4      	bcc.n	8003eae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f003 fb13 	bl	8007514 <USB_ReadInterrupts>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ef4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef8:	d13c      	bne.n	8003f74 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003efa:	2301      	movs	r3, #1
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efe:	e02b      	b.n	8003f58 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3318      	adds	r3, #24
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d115      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	da12      	bge.n	8003f52 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	3317      	adds	r3, #23
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 faca 	bl	80044e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	3301      	adds	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	791b      	ldrb	r3, [r3, #4]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d3cd      	bcc.n	8003f00 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f003 facb 	bl	8007514 <USB_ReadInterrupts>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f88:	d156      	bne.n	8004038 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8e:	e045      	b.n	800401c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d12e      	bne.n	8004016 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	da2b      	bge.n	8004016 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003fca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d121      	bne.n	8004016 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800400e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004012:	6053      	str	r3, [r2, #4]
            break;
 8004014:	e008      	b.n	8004028 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	3301      	adds	r3, #1
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	791b      	ldrb	r3, [r3, #4]
 8004020:	461a      	mov	r2, r3
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	4293      	cmp	r3, r2
 8004026:	d3b3      	bcc.n	8003f90 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004036:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f003 fa69 	bl	8007514 <USB_ReadInterrupts>
 8004042:	4603      	mov	r3, r0
 8004044:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404c:	d10a      	bne.n	8004064 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f005 fe5e 	bl	8009d10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f003 fa53 	bl	8007514 <USB_ReadInterrupts>
 800406e:	4603      	mov	r3, r0
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d115      	bne.n	80040a4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f005 fe4e 	bl	8009d2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	e000      	b.n	80040a4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80040a2:	bf00      	nop
    }
  }
}
 80040a4:	3734      	adds	r7, #52	@ 0x34
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd90      	pop	{r4, r7, pc}

080040aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	460b      	mov	r3, r1
 80040b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_PCD_SetAddress+0x1a>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e012      	b.n	80040ea <HAL_PCD_SetAddress+0x40>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f003 f9b2 	bl	8007444 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	4608      	mov	r0, r1
 80040fc:	4611      	mov	r1, r2
 80040fe:	461a      	mov	r2, r3
 8004100:	4603      	mov	r3, r0
 8004102:	70fb      	strb	r3, [r7, #3]
 8004104:	460b      	mov	r3, r1
 8004106:	803b      	strh	r3, [r7, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004114:	2b00      	cmp	r3, #0
 8004116:	da0f      	bge.n	8004138 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 020f 	and.w	r2, r3, #15
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	3310      	adds	r3, #16
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	4413      	add	r3, r2
 800412c:	3304      	adds	r3, #4
 800412e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	705a      	strb	r2, [r3, #1]
 8004136:	e00f      	b.n	8004158 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 020f 	and.w	r2, r3, #15
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	3304      	adds	r3, #4
 8004150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004164:	883b      	ldrh	r3, [r7, #0]
 8004166:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	78ba      	ldrb	r2, [r7, #2]
 8004172:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	785b      	ldrb	r3, [r3, #1]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004186:	78bb      	ldrb	r3, [r7, #2]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d102      	bne.n	8004192 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_PCD_EP_Open+0xae>
 800419c:	2302      	movs	r3, #2
 800419e:	e00e      	b.n	80041be <HAL_PCD_EP_Open+0xcc>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68f9      	ldr	r1, [r7, #12]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f002 fb32 	bl	8006818 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80041bc:	7afb      	ldrb	r3, [r7, #11]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	460b      	mov	r3, r1
 80041d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	da0f      	bge.n	80041fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	f003 020f 	and.w	r2, r3, #15
 80041e0:	4613      	mov	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	3310      	adds	r3, #16
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	705a      	strb	r2, [r3, #1]
 80041f8:	e00f      	b.n	800421a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 020f 	and.w	r2, r3, #15
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4413      	add	r3, r2
 8004210:	3304      	adds	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	b2da      	uxtb	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_PCD_EP_Close+0x6e>
 8004230:	2302      	movs	r3, #2
 8004232:	e00e      	b.n	8004252 <HAL_PCD_EP_Close+0x8c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	4618      	mov	r0, r3
 8004244:	f002 fb70 	bl	8006928 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	460b      	mov	r3, r1
 8004268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800426a:	7afb      	ldrb	r3, [r7, #11]
 800426c:	f003 020f 	and.w	r2, r3, #15
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	3304      	adds	r3, #4
 8004282:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2200      	movs	r2, #0
 8004294:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2200      	movs	r2, #0
 800429a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800429c:	7afb      	ldrb	r3, [r7, #11]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	799b      	ldrb	r3, [r3, #6]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d102      	bne.n	80042b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	799b      	ldrb	r3, [r3, #6]
 80042be:	461a      	mov	r2, r3
 80042c0:	6979      	ldr	r1, [r7, #20]
 80042c2:	f002 fc0d 	bl	8006ae0 <USB_EPStartXfer>

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	f003 020f 	and.w	r2, r3, #15
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	460b      	mov	r3, r1
 800430e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004310:	7afb      	ldrb	r3, [r7, #11]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	3310      	adds	r3, #16
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	3304      	adds	r3, #4
 8004326:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2200      	movs	r2, #0
 8004338:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2201      	movs	r2, #1
 800433e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004340:	7afb      	ldrb	r3, [r7, #11]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	b2da      	uxtb	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	799b      	ldrb	r3, [r3, #6]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d102      	bne.n	800435a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	799b      	ldrb	r3, [r3, #6]
 8004362:	461a      	mov	r2, r3
 8004364:	6979      	ldr	r1, [r7, #20]
 8004366:	f002 fbbb 	bl	8006ae0 <USB_EPStartXfer>

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	7912      	ldrb	r2, [r2, #4]
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e04f      	b.n	8004432 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004396:	2b00      	cmp	r3, #0
 8004398:	da0f      	bge.n	80043ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	f003 020f 	and.w	r2, r3, #15
 80043a0:	4613      	mov	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	3310      	adds	r3, #16
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	3304      	adds	r3, #4
 80043b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	705a      	strb	r2, [r3, #1]
 80043b8:	e00d      	b.n	80043d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	4613      	mov	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_PCD_EP_SetStall+0x82>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e01d      	b.n	8004432 <HAL_PCD_EP_SetStall+0xbe>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	4618      	mov	r0, r3
 8004406:	f002 ff49 	bl	800729c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	7999      	ldrb	r1, [r3, #6]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004422:	461a      	mov	r2, r3
 8004424:	f003 f93a 	bl	800769c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	7912      	ldrb	r2, [r2, #4]
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e042      	b.n	80044de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800445c:	2b00      	cmp	r3, #0
 800445e:	da0f      	bge.n	8004480 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	f003 020f 	and.w	r2, r3, #15
 8004466:	4613      	mov	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	3310      	adds	r3, #16
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	4413      	add	r3, r2
 8004474:	3304      	adds	r3, #4
 8004476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	705a      	strb	r2, [r3, #1]
 800447e:	e00f      	b.n	80044a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	f003 020f 	and.w	r2, r3, #15
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	3304      	adds	r3, #4
 8004498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_PCD_EP_ClrStall+0x86>
 80044bc:	2302      	movs	r3, #2
 80044be:	e00e      	b.n	80044de <HAL_PCD_EP_ClrStall+0xa4>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68f9      	ldr	r1, [r7, #12]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f002 ff52 	bl	8007378 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	da0c      	bge.n	8004514 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	3310      	adds	r3, #16
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	3304      	adds	r3, #4
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e00c      	b.n	800452e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	f003 020f 	and.w	r2, r3, #15
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	3304      	adds	r3, #4
 800452c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	4618      	mov	r0, r3
 8004536:	f002 fd71 	bl	800701c <USB_EPStopXfer>
 800453a:	4603      	mov	r3, r0
 800453c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800453e:	7afb      	ldrb	r3, [r7, #11]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	@ 0x28
 800454c:	af02      	add	r7, sp, #8
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	3310      	adds	r3, #16
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4413      	add	r3, r2
 800456c:	3304      	adds	r3, #4
 800456e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	429a      	cmp	r2, r3
 800457a:	d901      	bls.n	8004580 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e06b      	b.n	8004658 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	429a      	cmp	r2, r3
 8004594:	d902      	bls.n	800459c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	3303      	adds	r3, #3
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045a4:	e02a      	b.n	80045fc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d902      	bls.n	80045c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3303      	adds	r3, #3
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68d9      	ldr	r1, [r3, #12]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	4603      	mov	r3, r0
 80045de:	6978      	ldr	r0, [r7, #20]
 80045e0:	f002 fdc6 	bl	8007170 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	441a      	add	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	441a      	add	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	429a      	cmp	r2, r3
 8004610:	d809      	bhi.n	8004626 <PCD_WriteEmptyTxFifo+0xde>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800461a:	429a      	cmp	r2, r3
 800461c:	d203      	bcs.n	8004626 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1bf      	bne.n	80045a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	429a      	cmp	r2, r3
 8004630:	d811      	bhi.n	8004656 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	2201      	movs	r2, #1
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	43db      	mvns	r3, r3
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004652:	4013      	ands	r3, r2
 8004654:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	333c      	adds	r3, #60	@ 0x3c
 8004678:	3304      	adds	r3, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	799b      	ldrb	r3, [r3, #6]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d17b      	bne.n	800478e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d015      	beq.n	80046cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4a61      	ldr	r2, [pc, #388]	@ (8004828 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	f240 80b9 	bls.w	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80b3 	beq.w	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c2:	461a      	mov	r2, r3
 80046c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046c8:	6093      	str	r3, [r2, #8]
 80046ca:	e0a7      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e2:	461a      	mov	r2, r3
 80046e4:	2320      	movs	r3, #32
 80046e6:	6093      	str	r3, [r2, #8]
 80046e8:	e098      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 8093 	bne.w	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004828 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d90f      	bls.n	800471e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004714:	461a      	mov	r2, r3
 8004716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800471a:	6093      	str	r3, [r2, #8]
 800471c:	e07e      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	3304      	adds	r3, #4
 8004732:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	0159      	lsls	r1, r3, #5
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	440b      	add	r3, r1
 8004740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d114      	bne.n	8004780 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004768:	461a      	mov	r2, r3
 800476a:	2101      	movs	r1, #1
 800476c:	f002 ff96 	bl	800769c <USB_EP0_OutStart>
 8004770:	e006      	b.n	8004780 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	441a      	add	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f005 f9fe 	bl	8009b88 <HAL_PCD_DataOutStageCallback>
 800478c:	e046      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	4a26      	ldr	r2, [pc, #152]	@ (800482c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d124      	bne.n	80047e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b2:	6093      	str	r3, [r2, #8]
 80047b4:	e032      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047cc:	461a      	mov	r2, r3
 80047ce:	2320      	movs	r3, #32
 80047d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f005 f9d5 	bl	8009b88 <HAL_PCD_DataOutStageCallback>
 80047de:	e01d      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d114      	bne.n	8004810 <PCD_EP_OutXfrComplete_int+0x1b0>
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d108      	bne.n	8004810 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004808:	461a      	mov	r2, r3
 800480a:	2100      	movs	r1, #0
 800480c:	f002 ff46 	bl	800769c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f005 f9b6 	bl	8009b88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	4f54300a 	.word	0x4f54300a
 800482c:	4f54310a 	.word	0x4f54310a

08004830 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	333c      	adds	r3, #60	@ 0x3c
 8004848:	3304      	adds	r3, #4
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a15      	ldr	r2, [pc, #84]	@ (80048b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d90e      	bls.n	8004884 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487c:	461a      	mov	r2, r3
 800487e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004882:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f005 f96d 	bl	8009b64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a0a      	ldr	r2, [pc, #40]	@ (80048b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d90c      	bls.n	80048ac <PCD_EP_OutSetupPacket_int+0x7c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	799b      	ldrb	r3, [r3, #6]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d108      	bne.n	80048ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048a4:	461a      	mov	r2, r3
 80048a6:	2101      	movs	r1, #1
 80048a8:	f002 fef8 	bl	800769c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	4f54300a 	.word	0x4f54300a

080048bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
 80048c8:	4613      	mov	r3, r2
 80048ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048da:	883b      	ldrh	r3, [r7, #0]
 80048dc:	0419      	lsls	r1, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048e8:	e028      	b.n	800493c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4413      	add	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	73fb      	strb	r3, [r7, #15]
 80048fc:	e00d      	b.n	800491a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	3340      	adds	r3, #64	@ 0x40
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	4413      	add	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	3301      	adds	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
 800491a:	7bfa      	ldrb	r2, [r7, #15]
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	3b01      	subs	r3, #1
 8004920:	429a      	cmp	r2, r3
 8004922:	d3ec      	bcc.n	80048fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004924:	883b      	ldrh	r3, [r7, #0]
 8004926:	0418      	lsls	r0, r3, #16
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6819      	ldr	r1, [r3, #0]
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	3b01      	subs	r3, #1
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	4302      	orrs	r2, r0
 8004934:	3340      	adds	r3, #64	@ 0x40
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e267      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d075      	beq.n	8004a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049a2:	4b88      	ldr	r3, [pc, #544]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d00c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ae:	4b85      	ldr	r3, [pc, #532]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d112      	bne.n	80049e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ba:	4b82      	ldr	r3, [pc, #520]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c6:	d10b      	bne.n	80049e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	4b7e      	ldr	r3, [pc, #504]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d05b      	beq.n	8004a8c <HAL_RCC_OscConfig+0x108>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d157      	bne.n	8004a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e242      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e8:	d106      	bne.n	80049f8 <HAL_RCC_OscConfig+0x74>
 80049ea:	4b76      	ldr	r3, [pc, #472]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a75      	ldr	r2, [pc, #468]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e01d      	b.n	8004a34 <HAL_RCC_OscConfig+0xb0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x98>
 8004a02:	4b70      	ldr	r3, [pc, #448]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a6f      	ldr	r2, [pc, #444]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6c      	ldr	r2, [pc, #432]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e00b      	b.n	8004a34 <HAL_RCC_OscConfig+0xb0>
 8004a1c:	4b69      	ldr	r3, [pc, #420]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a68      	ldr	r2, [pc, #416]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	4b66      	ldr	r3, [pc, #408]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a65      	ldr	r2, [pc, #404]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fd f8f2 	bl	8001c24 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fd f8ee 	bl	8001c24 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	@ 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e207      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a56:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0xc0>
 8004a62:	e014      	b.n	8004a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fd f8de 	bl	8001c24 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fd f8da 	bl	8001c24 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	@ 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e1f3      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7e:	4b51      	ldr	r3, [pc, #324]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0xe8>
 8004a8a:	e000      	b.n	8004a8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d063      	beq.n	8004b62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa6:	4b47      	ldr	r3, [pc, #284]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d11c      	bne.n	8004aec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab2:	4b44      	ldr	r3, [pc, #272]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d116      	bne.n	8004aec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004abe:	4b41      	ldr	r3, [pc, #260]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x152>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d001      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e1c7      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4937      	ldr	r1, [pc, #220]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aea:	e03a      	b.n	8004b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d020      	beq.n	8004b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af4:	4b34      	ldr	r3, [pc, #208]	@ (8004bc8 <HAL_RCC_OscConfig+0x244>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fd f893 	bl	8001c24 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b02:	f7fd f88f 	bl	8001c24 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e1a8      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b14:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b20:	4b28      	ldr	r3, [pc, #160]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4925      	ldr	r1, [pc, #148]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	600b      	str	r3, [r1, #0]
 8004b34:	e015      	b.n	8004b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b36:	4b24      	ldr	r3, [pc, #144]	@ (8004bc8 <HAL_RCC_OscConfig+0x244>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fd f872 	bl	8001c24 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b44:	f7fd f86e 	bl	8001c24 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e187      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b56:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d036      	beq.n	8004bdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d016      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b76:	4b15      	ldr	r3, [pc, #84]	@ (8004bcc <HAL_RCC_OscConfig+0x248>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7c:	f7fd f852 	bl	8001c24 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b84:	f7fd f84e 	bl	8001c24 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e167      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b96:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0x200>
 8004ba2:	e01b      	b.n	8004bdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba4:	4b09      	ldr	r3, [pc, #36]	@ (8004bcc <HAL_RCC_OscConfig+0x248>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004baa:	f7fd f83b 	bl	8001c24 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb0:	e00e      	b.n	8004bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb2:	f7fd f837 	bl	8001c24 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d907      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e150      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	42470000 	.word	0x42470000
 8004bcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd0:	4b88      	ldr	r3, [pc, #544]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1ea      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8097 	beq.w	8004d18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bee:	4b81      	ldr	r3, [pc, #516]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	4b7d      	ldr	r3, [pc, #500]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	4a7c      	ldr	r2, [pc, #496]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c0a:	4b7a      	ldr	r3, [pc, #488]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c16:	2301      	movs	r3, #1
 8004c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1a:	4b77      	ldr	r3, [pc, #476]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d118      	bne.n	8004c58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c26:	4b74      	ldr	r3, [pc, #464]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a73      	ldr	r2, [pc, #460]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c32:	f7fc fff7 	bl	8001c24 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3a:	f7fc fff3 	bl	8001c24 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e10c      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d106      	bne.n	8004c6e <HAL_RCC_OscConfig+0x2ea>
 8004c60:	4b64      	ldr	r3, [pc, #400]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c64:	4a63      	ldr	r2, [pc, #396]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c6c:	e01c      	b.n	8004ca8 <HAL_RCC_OscConfig+0x324>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x30c>
 8004c76:	4b5f      	ldr	r3, [pc, #380]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	f043 0304 	orr.w	r3, r3, #4
 8004c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c82:	4b5c      	ldr	r3, [pc, #368]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c86:	4a5b      	ldr	r2, [pc, #364]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c8e:	e00b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x324>
 8004c90:	4b58      	ldr	r3, [pc, #352]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c94:	4a57      	ldr	r2, [pc, #348]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c9c:	4b55      	ldr	r3, [pc, #340]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca0:	4a54      	ldr	r2, [pc, #336]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	f023 0304 	bic.w	r3, r3, #4
 8004ca6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d015      	beq.n	8004cdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb0:	f7fc ffb8 	bl	8001c24 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fc ffb4 	bl	8001c24 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e0cb      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cce:	4b49      	ldr	r3, [pc, #292]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0ee      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x334>
 8004cda:	e014      	b.n	8004d06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cdc:	f7fc ffa2 	bl	8001c24 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce4:	f7fc ff9e 	bl	8001c24 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e0b5      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1ee      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0c:	4b39      	ldr	r3, [pc, #228]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	4a38      	ldr	r2, [pc, #224]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80a1 	beq.w	8004e64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d22:	4b34      	ldr	r3, [pc, #208]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d05c      	beq.n	8004de8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d141      	bne.n	8004dba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d36:	4b31      	ldr	r3, [pc, #196]	@ (8004dfc <HAL_RCC_OscConfig+0x478>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fc ff72 	bl	8001c24 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fc ff6e 	bl	8001c24 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e087      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d56:	4b27      	ldr	r3, [pc, #156]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69da      	ldr	r2, [r3, #28]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	019b      	lsls	r3, r3, #6
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d78:	085b      	lsrs	r3, r3, #1
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	041b      	lsls	r3, r3, #16
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	061b      	lsls	r3, r3, #24
 8004d86:	491b      	ldr	r1, [pc, #108]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <HAL_RCC_OscConfig+0x478>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d92:	f7fc ff47 	bl	8001c24 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9a:	f7fc ff43 	bl	8001c24 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e05c      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dac:	4b11      	ldr	r3, [pc, #68]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x416>
 8004db8:	e054      	b.n	8004e64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dba:	4b10      	ldr	r3, [pc, #64]	@ (8004dfc <HAL_RCC_OscConfig+0x478>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fc ff30 	bl	8001c24 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc8:	f7fc ff2c 	bl	8001c24 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e045      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dda:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x444>
 8004de6:	e03d      	b.n	8004e64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d107      	bne.n	8004e00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e038      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e00:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <HAL_RCC_OscConfig+0x4ec>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d028      	beq.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d121      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d11a      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e30:	4013      	ands	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d111      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d107      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800

08004e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0cc      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e88:	4b68      	ldr	r3, [pc, #416]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d90c      	bls.n	8004eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e96:	4b65      	ldr	r3, [pc, #404]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9e:	4b63      	ldr	r3, [pc, #396]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0b8      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d020      	beq.n	8004efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ec8:	4b59      	ldr	r3, [pc, #356]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4a58      	ldr	r2, [pc, #352]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ed2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ee0:	4b53      	ldr	r3, [pc, #332]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4a52      	ldr	r2, [pc, #328]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eec:	4b50      	ldr	r3, [pc, #320]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	494d      	ldr	r1, [pc, #308]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d044      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d107      	bne.n	8004f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	4b47      	ldr	r3, [pc, #284]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d119      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e07f      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d003      	beq.n	8004f32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d107      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f32:	4b3f      	ldr	r3, [pc, #252]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e06f      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f42:	4b3b      	ldr	r3, [pc, #236]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e067      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f52:	4b37      	ldr	r3, [pc, #220]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f023 0203 	bic.w	r2, r3, #3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	4934      	ldr	r1, [pc, #208]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f64:	f7fc fe5e 	bl	8001c24 <HAL_GetTick>
 8004f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f6c:	f7fc fe5a 	bl	8001c24 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e04f      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f82:	4b2b      	ldr	r3, [pc, #172]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 020c 	and.w	r2, r3, #12
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d1eb      	bne.n	8004f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f94:	4b25      	ldr	r3, [pc, #148]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d20c      	bcs.n	8004fbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa2:	4b22      	ldr	r3, [pc, #136]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004faa:	4b20      	ldr	r3, [pc, #128]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e032      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc8:	4b19      	ldr	r3, [pc, #100]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4916      	ldr	r1, [pc, #88]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fe6:	4b12      	ldr	r3, [pc, #72]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	490e      	ldr	r1, [pc, #56]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ffa:	f000 f821 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8004ffe:	4602      	mov	r2, r0
 8005000:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	091b      	lsrs	r3, r3, #4
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	490a      	ldr	r1, [pc, #40]	@ (8005034 <HAL_RCC_ClockConfig+0x1c0>)
 800500c:	5ccb      	ldrb	r3, [r1, r3]
 800500e:	fa22 f303 	lsr.w	r3, r2, r3
 8005012:	4a09      	ldr	r2, [pc, #36]	@ (8005038 <HAL_RCC_ClockConfig+0x1c4>)
 8005014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005016:	4b09      	ldr	r3, [pc, #36]	@ (800503c <HAL_RCC_ClockConfig+0x1c8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fc fdbe 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40023c00 	.word	0x40023c00
 8005030:	40023800 	.word	0x40023800
 8005034:	0800b200 	.word	0x0800b200
 8005038:	20000000 	.word	0x20000000
 800503c:	20000004 	.word	0x20000004

08005040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005044:	b094      	sub	sp, #80	@ 0x50
 8005046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005058:	4b79      	ldr	r3, [pc, #484]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 030c 	and.w	r3, r3, #12
 8005060:	2b08      	cmp	r3, #8
 8005062:	d00d      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x40>
 8005064:	2b08      	cmp	r3, #8
 8005066:	f200 80e1 	bhi.w	800522c <HAL_RCC_GetSysClockFreq+0x1ec>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_RCC_GetSysClockFreq+0x34>
 800506e:	2b04      	cmp	r3, #4
 8005070:	d003      	beq.n	800507a <HAL_RCC_GetSysClockFreq+0x3a>
 8005072:	e0db      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005074:	4b73      	ldr	r3, [pc, #460]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x204>)
 8005076:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005078:	e0db      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800507a:	4b73      	ldr	r3, [pc, #460]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x208>)
 800507c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800507e:	e0d8      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005080:	4b6f      	ldr	r3, [pc, #444]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005088:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800508a:	4b6d      	ldr	r3, [pc, #436]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d063      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005096:	4b6a      	ldr	r3, [pc, #424]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	099b      	lsrs	r3, r3, #6
 800509c:	2200      	movs	r2, #0
 800509e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050aa:	2300      	movs	r3, #0
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050b2:	4622      	mov	r2, r4
 80050b4:	462b      	mov	r3, r5
 80050b6:	f04f 0000 	mov.w	r0, #0
 80050ba:	f04f 0100 	mov.w	r1, #0
 80050be:	0159      	lsls	r1, r3, #5
 80050c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050c4:	0150      	lsls	r0, r2, #5
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4621      	mov	r1, r4
 80050cc:	1a51      	subs	r1, r2, r1
 80050ce:	6139      	str	r1, [r7, #16]
 80050d0:	4629      	mov	r1, r5
 80050d2:	eb63 0301 	sbc.w	r3, r3, r1
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050e4:	4659      	mov	r1, fp
 80050e6:	018b      	lsls	r3, r1, #6
 80050e8:	4651      	mov	r1, sl
 80050ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050ee:	4651      	mov	r1, sl
 80050f0:	018a      	lsls	r2, r1, #6
 80050f2:	4651      	mov	r1, sl
 80050f4:	ebb2 0801 	subs.w	r8, r2, r1
 80050f8:	4659      	mov	r1, fp
 80050fa:	eb63 0901 	sbc.w	r9, r3, r1
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800510a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800510e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005112:	4690      	mov	r8, r2
 8005114:	4699      	mov	r9, r3
 8005116:	4623      	mov	r3, r4
 8005118:	eb18 0303 	adds.w	r3, r8, r3
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	462b      	mov	r3, r5
 8005120:	eb49 0303 	adc.w	r3, r9, r3
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005132:	4629      	mov	r1, r5
 8005134:	024b      	lsls	r3, r1, #9
 8005136:	4621      	mov	r1, r4
 8005138:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800513c:	4621      	mov	r1, r4
 800513e:	024a      	lsls	r2, r1, #9
 8005140:	4610      	mov	r0, r2
 8005142:	4619      	mov	r1, r3
 8005144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005146:	2200      	movs	r2, #0
 8005148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800514a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800514c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005150:	f7fb fcd8 	bl	8000b04 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4613      	mov	r3, r2
 800515a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800515c:	e058      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800515e:	4b38      	ldr	r3, [pc, #224]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	099b      	lsrs	r3, r3, #6
 8005164:	2200      	movs	r2, #0
 8005166:	4618      	mov	r0, r3
 8005168:	4611      	mov	r1, r2
 800516a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800516e:	623b      	str	r3, [r7, #32]
 8005170:	2300      	movs	r3, #0
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
 8005174:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005178:	4642      	mov	r2, r8
 800517a:	464b      	mov	r3, r9
 800517c:	f04f 0000 	mov.w	r0, #0
 8005180:	f04f 0100 	mov.w	r1, #0
 8005184:	0159      	lsls	r1, r3, #5
 8005186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800518a:	0150      	lsls	r0, r2, #5
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4641      	mov	r1, r8
 8005192:	ebb2 0a01 	subs.w	sl, r2, r1
 8005196:	4649      	mov	r1, r9
 8005198:	eb63 0b01 	sbc.w	fp, r3, r1
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051b0:	ebb2 040a 	subs.w	r4, r2, sl
 80051b4:	eb63 050b 	sbc.w	r5, r3, fp
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	00eb      	lsls	r3, r5, #3
 80051c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051c6:	00e2      	lsls	r2, r4, #3
 80051c8:	4614      	mov	r4, r2
 80051ca:	461d      	mov	r5, r3
 80051cc:	4643      	mov	r3, r8
 80051ce:	18e3      	adds	r3, r4, r3
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	464b      	mov	r3, r9
 80051d4:	eb45 0303 	adc.w	r3, r5, r3
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051e6:	4629      	mov	r1, r5
 80051e8:	028b      	lsls	r3, r1, #10
 80051ea:	4621      	mov	r1, r4
 80051ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051f0:	4621      	mov	r1, r4
 80051f2:	028a      	lsls	r2, r1, #10
 80051f4:	4610      	mov	r0, r2
 80051f6:	4619      	mov	r1, r3
 80051f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051fa:	2200      	movs	r2, #0
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	61fa      	str	r2, [r7, #28]
 8005200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005204:	f7fb fc7e 	bl	8000b04 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4613      	mov	r3, r2
 800520e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005210:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	0c1b      	lsrs	r3, r3, #16
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	3301      	adds	r3, #1
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005220:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800522a:	e002      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800522c:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x204>)
 800522e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005234:	4618      	mov	r0, r3
 8005236:	3750      	adds	r7, #80	@ 0x50
 8005238:	46bd      	mov	sp, r7
 800523a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800
 8005244:	00f42400 	.word	0x00f42400
 8005248:	007a1200 	.word	0x007a1200

0800524c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005250:	4b03      	ldr	r3, [pc, #12]	@ (8005260 <HAL_RCC_GetHCLKFreq+0x14>)
 8005252:	681b      	ldr	r3, [r3, #0]
}
 8005254:	4618      	mov	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	20000000 	.word	0x20000000

08005264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005268:	f7ff fff0 	bl	800524c <HAL_RCC_GetHCLKFreq>
 800526c:	4602      	mov	r2, r0
 800526e:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	0a9b      	lsrs	r3, r3, #10
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	4903      	ldr	r1, [pc, #12]	@ (8005288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800527a:	5ccb      	ldrb	r3, [r1, r3]
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005280:	4618      	mov	r0, r3
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40023800 	.word	0x40023800
 8005288:	0800b210 	.word	0x0800b210

0800528c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005290:	f7ff ffdc 	bl	800524c <HAL_RCC_GetHCLKFreq>
 8005294:	4602      	mov	r2, r0
 8005296:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	0b5b      	lsrs	r3, r3, #13
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	4903      	ldr	r1, [pc, #12]	@ (80052b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052a2:	5ccb      	ldrb	r3, [r1, r3]
 80052a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40023800 	.word	0x40023800
 80052b0:	0800b210 	.word	0x0800b210

080052b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e041      	b.n	800534a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fc faec 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f000 fa80 	bl	80057f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d001      	beq.n	800536c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e046      	b.n	80053fa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a23      	ldr	r2, [pc, #140]	@ (8005408 <HAL_TIM_Base_Start+0xb4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d022      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005386:	d01d      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1f      	ldr	r2, [pc, #124]	@ (800540c <HAL_TIM_Base_Start+0xb8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d018      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1e      	ldr	r2, [pc, #120]	@ (8005410 <HAL_TIM_Base_Start+0xbc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005414 <HAL_TIM_Base_Start+0xc0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00e      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005418 <HAL_TIM_Base_Start+0xc4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a19      	ldr	r2, [pc, #100]	@ (800541c <HAL_TIM_Base_Start+0xc8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_TIM_Base_Start+0x70>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a18      	ldr	r2, [pc, #96]	@ (8005420 <HAL_TIM_Base_Start+0xcc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d111      	bne.n	80053e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b06      	cmp	r3, #6
 80053d4:	d010      	beq.n	80053f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e6:	e007      	b.n	80053f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40010000 	.word	0x40010000
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40010400 	.word	0x40010400
 800541c:	40014000 	.word	0x40014000
 8005420:	40001800 	.word	0x40001800

08005424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d020      	beq.n	8005488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01b      	beq.n	8005488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0202 	mvn.w	r2, #2
 8005458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f9a3 	bl	80057ba <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f995 	bl	80057a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f9a6 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d020      	beq.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01b      	beq.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0204 	mvn.w	r2, #4
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f97d 	bl	80057ba <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f96f 	bl	80057a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f980 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d020      	beq.n	8005520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01b      	beq.n	8005520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0208 	mvn.w	r2, #8
 80054f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2204      	movs	r2, #4
 80054f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f957 	bl	80057ba <HAL_TIM_IC_CaptureCallback>
 800550c:	e005      	b.n	800551a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f949 	bl	80057a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f95a 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	d020      	beq.n	800556c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01b      	beq.n	800556c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0210 	mvn.w	r2, #16
 800553c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2208      	movs	r2, #8
 8005542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f931 	bl	80057ba <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f923 	bl	80057a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f934 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00c      	beq.n	8005590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0201 	mvn.w	r2, #1
 8005588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f901 	bl	8005792 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00c      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 faee 	bl	8005b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f905 	bl	80057e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00c      	beq.n	80055fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0220 	mvn.w	r2, #32
 80055f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fac0 	bl	8005b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_TIM_ConfigClockSource+0x1c>
 800561c:	2302      	movs	r3, #2
 800561e:	e0b4      	b.n	800578a <HAL_TIM_ConfigClockSource+0x186>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800563e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005658:	d03e      	beq.n	80056d8 <HAL_TIM_ConfigClockSource+0xd4>
 800565a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800565e:	f200 8087 	bhi.w	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005666:	f000 8086 	beq.w	8005776 <HAL_TIM_ConfigClockSource+0x172>
 800566a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800566e:	d87f      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005670:	2b70      	cmp	r3, #112	@ 0x70
 8005672:	d01a      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0xa6>
 8005674:	2b70      	cmp	r3, #112	@ 0x70
 8005676:	d87b      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005678:	2b60      	cmp	r3, #96	@ 0x60
 800567a:	d050      	beq.n	800571e <HAL_TIM_ConfigClockSource+0x11a>
 800567c:	2b60      	cmp	r3, #96	@ 0x60
 800567e:	d877      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b50      	cmp	r3, #80	@ 0x50
 8005682:	d03c      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0xfa>
 8005684:	2b50      	cmp	r3, #80	@ 0x50
 8005686:	d873      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005688:	2b40      	cmp	r3, #64	@ 0x40
 800568a:	d058      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x13a>
 800568c:	2b40      	cmp	r3, #64	@ 0x40
 800568e:	d86f      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005690:	2b30      	cmp	r3, #48	@ 0x30
 8005692:	d064      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x15a>
 8005694:	2b30      	cmp	r3, #48	@ 0x30
 8005696:	d86b      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005698:	2b20      	cmp	r3, #32
 800569a:	d060      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x15a>
 800569c:	2b20      	cmp	r3, #32
 800569e:	d867      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d05c      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x15a>
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d05a      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x15a>
 80056a8:	e062      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ba:	f000 f9c3 	bl	8005a44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	609a      	str	r2, [r3, #8]
      break;
 80056d6:	e04f      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056e8:	f000 f9ac 	bl	8005a44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056fa:	609a      	str	r2, [r3, #8]
      break;
 80056fc:	e03c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800570a:	461a      	mov	r2, r3
 800570c:	f000 f920 	bl	8005950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2150      	movs	r1, #80	@ 0x50
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f979 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 800571c:	e02c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800572a:	461a      	mov	r2, r3
 800572c:	f000 f93f 	bl	80059ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2160      	movs	r1, #96	@ 0x60
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f969 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 800573c:	e01c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800574a:	461a      	mov	r2, r3
 800574c:	f000 f900 	bl	8005950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2140      	movs	r1, #64	@ 0x40
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f959 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 800575c:	e00c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4619      	mov	r1, r3
 8005768:	4610      	mov	r0, r2
 800576a:	f000 f950 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 800576e:	e003      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
      break;
 8005774:	e000      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a46      	ldr	r2, [pc, #280]	@ (8005924 <TIM_Base_SetConfig+0x12c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d013      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005816:	d00f      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a43      	ldr	r2, [pc, #268]	@ (8005928 <TIM_Base_SetConfig+0x130>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00b      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a42      	ldr	r2, [pc, #264]	@ (800592c <TIM_Base_SetConfig+0x134>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d007      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a41      	ldr	r2, [pc, #260]	@ (8005930 <TIM_Base_SetConfig+0x138>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a40      	ldr	r2, [pc, #256]	@ (8005934 <TIM_Base_SetConfig+0x13c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d108      	bne.n	800584a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a35      	ldr	r2, [pc, #212]	@ (8005924 <TIM_Base_SetConfig+0x12c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d02b      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005858:	d027      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a32      	ldr	r2, [pc, #200]	@ (8005928 <TIM_Base_SetConfig+0x130>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d023      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a31      	ldr	r2, [pc, #196]	@ (800592c <TIM_Base_SetConfig+0x134>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d01f      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a30      	ldr	r2, [pc, #192]	@ (8005930 <TIM_Base_SetConfig+0x138>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01b      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2f      	ldr	r2, [pc, #188]	@ (8005934 <TIM_Base_SetConfig+0x13c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d017      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2e      	ldr	r2, [pc, #184]	@ (8005938 <TIM_Base_SetConfig+0x140>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2d      	ldr	r2, [pc, #180]	@ (800593c <TIM_Base_SetConfig+0x144>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00f      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2c      	ldr	r2, [pc, #176]	@ (8005940 <TIM_Base_SetConfig+0x148>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00b      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2b      	ldr	r2, [pc, #172]	@ (8005944 <TIM_Base_SetConfig+0x14c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d007      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2a      	ldr	r2, [pc, #168]	@ (8005948 <TIM_Base_SetConfig+0x150>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a29      	ldr	r2, [pc, #164]	@ (800594c <TIM_Base_SetConfig+0x154>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d108      	bne.n	80058bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a10      	ldr	r2, [pc, #64]	@ (8005924 <TIM_Base_SetConfig+0x12c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_Base_SetConfig+0xf8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a12      	ldr	r2, [pc, #72]	@ (8005934 <TIM_Base_SetConfig+0x13c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d103      	bne.n	80058f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b01      	cmp	r3, #1
 8005908:	d105      	bne.n	8005916 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f023 0201 	bic.w	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	611a      	str	r2, [r3, #16]
  }
}
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40010400 	.word	0x40010400
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800
 8005944:	40001800 	.word	0x40001800
 8005948:	40001c00 	.word	0x40001c00
 800594c:	40002000 	.word	0x40002000

08005950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0201 	bic.w	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800597a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f023 030a 	bic.w	r3, r3, #10
 800598c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b087      	sub	sp, #28
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	f023 0210 	bic.w	r2, r3, #16
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	031b      	lsls	r3, r3, #12
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f043 0307 	orr.w	r3, r3, #7
 8005a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	021a      	lsls	r2, r3, #8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	609a      	str	r2, [r3, #8]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e05a      	b.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a21      	ldr	r2, [pc, #132]	@ (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d022      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae8:	d01d      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1d      	ldr	r2, [pc, #116]	@ (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d018      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d013      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1a      	ldr	r2, [pc, #104]	@ (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00e      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a18      	ldr	r2, [pc, #96]	@ (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d009      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a17      	ldr	r2, [pc, #92]	@ (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d004      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a15      	ldr	r2, [pc, #84]	@ (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d10c      	bne.n	8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40010000 	.word	0x40010000
 8005b64:	40000400 	.word	0x40000400
 8005b68:	40000800 	.word	0x40000800
 8005b6c:	40000c00 	.word	0x40000c00
 8005b70:	40010400 	.word	0x40010400
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40001800 	.word	0x40001800

08005b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e042      	b.n	8005c3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fb feb8 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2224      	movs	r2, #36	@ 0x24
 8005bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f82b 	bl	8005c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c48:	b0c0      	sub	sp, #256	@ 0x100
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c60:	68d9      	ldr	r1, [r3, #12]
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	ea40 0301 	orr.w	r3, r0, r1
 8005c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c9c:	f021 010c 	bic.w	r1, r1, #12
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005caa:	430b      	orrs	r3, r1
 8005cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbe:	6999      	ldr	r1, [r3, #24]
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	ea40 0301 	orr.w	r3, r0, r1
 8005cca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b8f      	ldr	r3, [pc, #572]	@ (8005f10 <UART_SetConfig+0x2cc>)
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d005      	beq.n	8005ce4 <UART_SetConfig+0xa0>
 8005cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4b8d      	ldr	r3, [pc, #564]	@ (8005f14 <UART_SetConfig+0x2d0>)
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d104      	bne.n	8005cee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ce4:	f7ff fad2 	bl	800528c <HAL_RCC_GetPCLK2Freq>
 8005ce8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cec:	e003      	b.n	8005cf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cee:	f7ff fab9 	bl	8005264 <HAL_RCC_GetPCLK1Freq>
 8005cf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d00:	f040 810c 	bne.w	8005f1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d16:	4622      	mov	r2, r4
 8005d18:	462b      	mov	r3, r5
 8005d1a:	1891      	adds	r1, r2, r2
 8005d1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d1e:	415b      	adcs	r3, r3
 8005d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d26:	4621      	mov	r1, r4
 8005d28:	eb12 0801 	adds.w	r8, r2, r1
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	eb43 0901 	adc.w	r9, r3, r1
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d46:	4690      	mov	r8, r2
 8005d48:	4699      	mov	r9, r3
 8005d4a:	4623      	mov	r3, r4
 8005d4c:	eb18 0303 	adds.w	r3, r8, r3
 8005d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d54:	462b      	mov	r3, r5
 8005d56:	eb49 0303 	adc.w	r3, r9, r3
 8005d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d72:	460b      	mov	r3, r1
 8005d74:	18db      	adds	r3, r3, r3
 8005d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d78:	4613      	mov	r3, r2
 8005d7a:	eb42 0303 	adc.w	r3, r2, r3
 8005d7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d88:	f7fa febc 	bl	8000b04 <__aeabi_uldivmod>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4b61      	ldr	r3, [pc, #388]	@ (8005f18 <UART_SetConfig+0x2d4>)
 8005d92:	fba3 2302 	umull	r2, r3, r3, r2
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	011c      	lsls	r4, r3, #4
 8005d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005da4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005da8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005dac:	4642      	mov	r2, r8
 8005dae:	464b      	mov	r3, r9
 8005db0:	1891      	adds	r1, r2, r2
 8005db2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005db4:	415b      	adcs	r3, r3
 8005db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005db8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	eb12 0a01 	adds.w	sl, r2, r1
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	eb43 0b01 	adc.w	fp, r3, r1
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ddc:	4692      	mov	sl, r2
 8005dde:	469b      	mov	fp, r3
 8005de0:	4643      	mov	r3, r8
 8005de2:	eb1a 0303 	adds.w	r3, sl, r3
 8005de6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dea:	464b      	mov	r3, r9
 8005dec:	eb4b 0303 	adc.w	r3, fp, r3
 8005df0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	18db      	adds	r3, r3, r3
 8005e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e0e:	4613      	mov	r3, r2
 8005e10:	eb42 0303 	adc.w	r3, r2, r3
 8005e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e1e:	f7fa fe71 	bl	8000b04 <__aeabi_uldivmod>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4611      	mov	r1, r2
 8005e28:	4b3b      	ldr	r3, [pc, #236]	@ (8005f18 <UART_SetConfig+0x2d4>)
 8005e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	2264      	movs	r2, #100	@ 0x64
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	1acb      	subs	r3, r1, r3
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e3e:	4b36      	ldr	r3, [pc, #216]	@ (8005f18 <UART_SetConfig+0x2d4>)
 8005e40:	fba3 2302 	umull	r2, r3, r3, r2
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e4c:	441c      	add	r4, r3
 8005e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	1891      	adds	r1, r2, r2
 8005e66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e68:	415b      	adcs	r3, r3
 8005e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e70:	4641      	mov	r1, r8
 8005e72:	1851      	adds	r1, r2, r1
 8005e74:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e76:	4649      	mov	r1, r9
 8005e78:	414b      	adcs	r3, r1
 8005e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e88:	4659      	mov	r1, fp
 8005e8a:	00cb      	lsls	r3, r1, #3
 8005e8c:	4651      	mov	r1, sl
 8005e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e92:	4651      	mov	r1, sl
 8005e94:	00ca      	lsls	r2, r1, #3
 8005e96:	4610      	mov	r0, r2
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	189b      	adds	r3, r3, r2
 8005ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	460a      	mov	r2, r1
 8005ea8:	eb42 0303 	adc.w	r3, r2, r3
 8005eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ebc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	18db      	adds	r3, r3, r3
 8005ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eca:	4613      	mov	r3, r2
 8005ecc:	eb42 0303 	adc.w	r3, r2, r3
 8005ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005eda:	f7fa fe13 	bl	8000b04 <__aeabi_uldivmod>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f18 <UART_SetConfig+0x2d4>)
 8005ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	2164      	movs	r1, #100	@ 0x64
 8005eec:	fb01 f303 	mul.w	r3, r1, r3
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	3332      	adds	r3, #50	@ 0x32
 8005ef6:	4a08      	ldr	r2, [pc, #32]	@ (8005f18 <UART_SetConfig+0x2d4>)
 8005ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	f003 0207 	and.w	r2, r3, #7
 8005f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4422      	add	r2, r4
 8005f0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f0c:	e106      	b.n	800611c <UART_SetConfig+0x4d8>
 8005f0e:	bf00      	nop
 8005f10:	40011000 	.word	0x40011000
 8005f14:	40011400 	.word	0x40011400
 8005f18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f2e:	4642      	mov	r2, r8
 8005f30:	464b      	mov	r3, r9
 8005f32:	1891      	adds	r1, r2, r2
 8005f34:	6239      	str	r1, [r7, #32]
 8005f36:	415b      	adcs	r3, r3
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f3e:	4641      	mov	r1, r8
 8005f40:	1854      	adds	r4, r2, r1
 8005f42:	4649      	mov	r1, r9
 8005f44:	eb43 0501 	adc.w	r5, r3, r1
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	00eb      	lsls	r3, r5, #3
 8005f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f56:	00e2      	lsls	r2, r4, #3
 8005f58:	4614      	mov	r4, r2
 8005f5a:	461d      	mov	r5, r3
 8005f5c:	4643      	mov	r3, r8
 8005f5e:	18e3      	adds	r3, r4, r3
 8005f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f64:	464b      	mov	r3, r9
 8005f66:	eb45 0303 	adc.w	r3, r5, r3
 8005f6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f7e:	f04f 0200 	mov.w	r2, #0
 8005f82:	f04f 0300 	mov.w	r3, #0
 8005f86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	008b      	lsls	r3, r1, #2
 8005f8e:	4621      	mov	r1, r4
 8005f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f94:	4621      	mov	r1, r4
 8005f96:	008a      	lsls	r2, r1, #2
 8005f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f9c:	f7fa fdb2 	bl	8000b04 <__aeabi_uldivmod>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4b60      	ldr	r3, [pc, #384]	@ (8006128 <UART_SetConfig+0x4e4>)
 8005fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	011c      	lsls	r4, r3, #4
 8005fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	1891      	adds	r1, r2, r2
 8005fc6:	61b9      	str	r1, [r7, #24]
 8005fc8:	415b      	adcs	r3, r3
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	1851      	adds	r1, r2, r1
 8005fd4:	6139      	str	r1, [r7, #16]
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	414b      	adcs	r3, r1
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fe8:	4659      	mov	r1, fp
 8005fea:	00cb      	lsls	r3, r1, #3
 8005fec:	4651      	mov	r1, sl
 8005fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ff2:	4651      	mov	r1, sl
 8005ff4:	00ca      	lsls	r2, r1, #3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	189b      	adds	r3, r3, r2
 8006000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006004:	464b      	mov	r3, r9
 8006006:	460a      	mov	r2, r1
 8006008:	eb42 0303 	adc.w	r3, r2, r3
 800600c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	67bb      	str	r3, [r7, #120]	@ 0x78
 800601a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006028:	4649      	mov	r1, r9
 800602a:	008b      	lsls	r3, r1, #2
 800602c:	4641      	mov	r1, r8
 800602e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006032:	4641      	mov	r1, r8
 8006034:	008a      	lsls	r2, r1, #2
 8006036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800603a:	f7fa fd63 	bl	8000b04 <__aeabi_uldivmod>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4611      	mov	r1, r2
 8006044:	4b38      	ldr	r3, [pc, #224]	@ (8006128 <UART_SetConfig+0x4e4>)
 8006046:	fba3 2301 	umull	r2, r3, r3, r1
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	2264      	movs	r2, #100	@ 0x64
 800604e:	fb02 f303 	mul.w	r3, r2, r3
 8006052:	1acb      	subs	r3, r1, r3
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	3332      	adds	r3, #50	@ 0x32
 8006058:	4a33      	ldr	r2, [pc, #204]	@ (8006128 <UART_SetConfig+0x4e4>)
 800605a:	fba2 2303 	umull	r2, r3, r2, r3
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006064:	441c      	add	r4, r3
 8006066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800606a:	2200      	movs	r2, #0
 800606c:	673b      	str	r3, [r7, #112]	@ 0x70
 800606e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006070:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006074:	4642      	mov	r2, r8
 8006076:	464b      	mov	r3, r9
 8006078:	1891      	adds	r1, r2, r2
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	415b      	adcs	r3, r3
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006084:	4641      	mov	r1, r8
 8006086:	1851      	adds	r1, r2, r1
 8006088:	6039      	str	r1, [r7, #0]
 800608a:	4649      	mov	r1, r9
 800608c:	414b      	adcs	r3, r1
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800609c:	4659      	mov	r1, fp
 800609e:	00cb      	lsls	r3, r1, #3
 80060a0:	4651      	mov	r1, sl
 80060a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a6:	4651      	mov	r1, sl
 80060a8:	00ca      	lsls	r2, r1, #3
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	4642      	mov	r2, r8
 80060b2:	189b      	adds	r3, r3, r2
 80060b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060b6:	464b      	mov	r3, r9
 80060b8:	460a      	mov	r2, r1
 80060ba:	eb42 0303 	adc.w	r3, r2, r3
 80060be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80060ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060d8:	4649      	mov	r1, r9
 80060da:	008b      	lsls	r3, r1, #2
 80060dc:	4641      	mov	r1, r8
 80060de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e2:	4641      	mov	r1, r8
 80060e4:	008a      	lsls	r2, r1, #2
 80060e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060ea:	f7fa fd0b 	bl	8000b04 <__aeabi_uldivmod>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006128 <UART_SetConfig+0x4e4>)
 80060f4:	fba3 1302 	umull	r1, r3, r3, r2
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	2164      	movs	r1, #100	@ 0x64
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	3332      	adds	r3, #50	@ 0x32
 8006106:	4a08      	ldr	r2, [pc, #32]	@ (8006128 <UART_SetConfig+0x4e4>)
 8006108:	fba2 2303 	umull	r2, r3, r2, r3
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	f003 020f 	and.w	r2, r3, #15
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4422      	add	r2, r4
 800611a:	609a      	str	r2, [r3, #8]
}
 800611c:	bf00      	nop
 800611e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006122:	46bd      	mov	sp, r7
 8006124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006128:	51eb851f 	.word	0x51eb851f

0800612c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800612c:	b084      	sub	sp, #16
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	f107 001c 	add.w	r0, r7, #28
 800613a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800613e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006142:	2b01      	cmp	r3, #1
 8006144:	d123      	bne.n	800618e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800615a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800616e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006172:	2b01      	cmp	r3, #1
 8006174:	d105      	bne.n	8006182 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 fae8 	bl	8007758 <USB_CoreReset>
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
 800618c:	e01b      	b.n	80061c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fadc 	bl	8007758 <USB_CoreReset>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80061b8:	e005      	b.n	80061c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061c6:	7fbb      	ldrb	r3, [r7, #30]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d10b      	bne.n	80061e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f043 0206 	orr.w	r2, r3, #6
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f043 0220 	orr.w	r2, r3, #32
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061f0:	b004      	add	sp, #16
 80061f2:	4770      	bx	lr

080061f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d165      	bne.n	80062d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4a41      	ldr	r2, [pc, #260]	@ (8006310 <USB_SetTurnaroundTime+0x11c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d906      	bls.n	800621e <USB_SetTurnaroundTime+0x2a>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4a40      	ldr	r2, [pc, #256]	@ (8006314 <USB_SetTurnaroundTime+0x120>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d202      	bcs.n	800621e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006218:	230f      	movs	r3, #15
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e062      	b.n	80062e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	4a3c      	ldr	r2, [pc, #240]	@ (8006314 <USB_SetTurnaroundTime+0x120>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d306      	bcc.n	8006234 <USB_SetTurnaroundTime+0x40>
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4a3b      	ldr	r2, [pc, #236]	@ (8006318 <USB_SetTurnaroundTime+0x124>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d202      	bcs.n	8006234 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800622e:	230e      	movs	r3, #14
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	e057      	b.n	80062e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4a38      	ldr	r2, [pc, #224]	@ (8006318 <USB_SetTurnaroundTime+0x124>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d306      	bcc.n	800624a <USB_SetTurnaroundTime+0x56>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4a37      	ldr	r2, [pc, #220]	@ (800631c <USB_SetTurnaroundTime+0x128>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d202      	bcs.n	800624a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006244:	230d      	movs	r3, #13
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	e04c      	b.n	80062e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	4a33      	ldr	r2, [pc, #204]	@ (800631c <USB_SetTurnaroundTime+0x128>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d306      	bcc.n	8006260 <USB_SetTurnaroundTime+0x6c>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4a32      	ldr	r2, [pc, #200]	@ (8006320 <USB_SetTurnaroundTime+0x12c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d802      	bhi.n	8006260 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800625a:	230c      	movs	r3, #12
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	e041      	b.n	80062e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4a2f      	ldr	r2, [pc, #188]	@ (8006320 <USB_SetTurnaroundTime+0x12c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d906      	bls.n	8006276 <USB_SetTurnaroundTime+0x82>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4a2e      	ldr	r2, [pc, #184]	@ (8006324 <USB_SetTurnaroundTime+0x130>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d802      	bhi.n	8006276 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006270:	230b      	movs	r3, #11
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	e036      	b.n	80062e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4a2a      	ldr	r2, [pc, #168]	@ (8006324 <USB_SetTurnaroundTime+0x130>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d906      	bls.n	800628c <USB_SetTurnaroundTime+0x98>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4a29      	ldr	r2, [pc, #164]	@ (8006328 <USB_SetTurnaroundTime+0x134>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d802      	bhi.n	800628c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006286:	230a      	movs	r3, #10
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	e02b      	b.n	80062e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4a26      	ldr	r2, [pc, #152]	@ (8006328 <USB_SetTurnaroundTime+0x134>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d906      	bls.n	80062a2 <USB_SetTurnaroundTime+0xae>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4a25      	ldr	r2, [pc, #148]	@ (800632c <USB_SetTurnaroundTime+0x138>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d202      	bcs.n	80062a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800629c:	2309      	movs	r3, #9
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e020      	b.n	80062e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4a21      	ldr	r2, [pc, #132]	@ (800632c <USB_SetTurnaroundTime+0x138>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d306      	bcc.n	80062b8 <USB_SetTurnaroundTime+0xc4>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4a20      	ldr	r2, [pc, #128]	@ (8006330 <USB_SetTurnaroundTime+0x13c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d802      	bhi.n	80062b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062b2:	2308      	movs	r3, #8
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	e015      	b.n	80062e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006330 <USB_SetTurnaroundTime+0x13c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d906      	bls.n	80062ce <USB_SetTurnaroundTime+0xda>
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006334 <USB_SetTurnaroundTime+0x140>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d202      	bcs.n	80062ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062c8:	2307      	movs	r3, #7
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	e00a      	b.n	80062e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062ce:	2306      	movs	r3, #6
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	e007      	b.n	80062e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80062d4:	79fb      	ldrb	r3, [r7, #7]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d102      	bne.n	80062e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80062da:	2309      	movs	r3, #9
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	e001      	b.n	80062e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062e0:	2309      	movs	r3, #9
 80062e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	029b      	lsls	r3, r3, #10
 80062f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	00d8acbf 	.word	0x00d8acbf
 8006314:	00e4e1c0 	.word	0x00e4e1c0
 8006318:	00f42400 	.word	0x00f42400
 800631c:	01067380 	.word	0x01067380
 8006320:	011a499f 	.word	0x011a499f
 8006324:	01312cff 	.word	0x01312cff
 8006328:	014ca43f 	.word	0x014ca43f
 800632c:	016e3600 	.word	0x016e3600
 8006330:	01a6ab1f 	.word	0x01a6ab1f
 8006334:	01e84800 	.word	0x01e84800

08006338 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f043 0201 	orr.w	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f023 0201 	bic.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d115      	bne.n	80063ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063aa:	200a      	movs	r0, #10
 80063ac:	f7fb fc46 	bl	8001c3c <HAL_Delay>
      ms += 10U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	330a      	adds	r3, #10
 80063b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 f93f 	bl	800763a <USB_GetMode>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d01e      	beq.n	8006400 <USB_SetCurrentMode+0x84>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80063c6:	d9f0      	bls.n	80063aa <USB_SetCurrentMode+0x2e>
 80063c8:	e01a      	b.n	8006400 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d115      	bne.n	80063fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063dc:	200a      	movs	r0, #10
 80063de:	f7fb fc2d 	bl	8001c3c <HAL_Delay>
      ms += 10U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	330a      	adds	r3, #10
 80063e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 f926 	bl	800763a <USB_GetMode>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <USB_SetCurrentMode+0x84>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80063f8:	d9f0      	bls.n	80063dc <USB_SetCurrentMode+0x60>
 80063fa:	e001      	b.n	8006400 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e005      	b.n	800640c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2bc8      	cmp	r3, #200	@ 0xc8
 8006404:	d101      	bne.n	800640a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006414:	b084      	sub	sp, #16
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800642e:	2300      	movs	r3, #0
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	e009      	b.n	8006448 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	3340      	adds	r3, #64	@ 0x40
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	2200      	movs	r2, #0
 8006440:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	3301      	adds	r3, #1
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2b0e      	cmp	r3, #14
 800644c:	d9f2      	bls.n	8006434 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800644e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006452:	2b00      	cmp	r3, #0
 8006454:	d11c      	bne.n	8006490 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006464:	f043 0302 	orr.w	r3, r3, #2
 8006468:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006486:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	639a      	str	r2, [r3, #56]	@ 0x38
 800648e:	e00b      	b.n	80064a8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006494:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064ae:	461a      	mov	r2, r3
 80064b0:	2300      	movs	r3, #0
 80064b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d10d      	bne.n	80064d8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064c4:	2100      	movs	r1, #0
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f968 	bl	800679c <USB_SetDevSpeed>
 80064cc:	e008      	b.n	80064e0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064ce:	2101      	movs	r1, #1
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f963 	bl	800679c <USB_SetDevSpeed>
 80064d6:	e003      	b.n	80064e0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064d8:	2103      	movs	r1, #3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f95e 	bl	800679c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064e0:	2110      	movs	r1, #16
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f8fa 	bl	80066dc <USB_FlushTxFifo>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f924 	bl	8006740 <USB_FlushRxFifo>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006508:	461a      	mov	r2, r3
 800650a:	2300      	movs	r3, #0
 800650c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006514:	461a      	mov	r2, r3
 8006516:	2300      	movs	r3, #0
 8006518:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006520:	461a      	mov	r2, r3
 8006522:	2300      	movs	r3, #0
 8006524:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006526:	2300      	movs	r3, #0
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	e043      	b.n	80065b4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800653e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006542:	d118      	bne.n	8006576 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006556:	461a      	mov	r2, r3
 8006558:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	e013      	b.n	8006588 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800656c:	461a      	mov	r2, r3
 800656e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	e008      	b.n	8006588 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006582:	461a      	mov	r2, r3
 8006584:	2300      	movs	r3, #0
 8006586:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006594:	461a      	mov	r2, r3
 8006596:	2300      	movs	r3, #0
 8006598:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a6:	461a      	mov	r2, r3
 80065a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	3301      	adds	r3, #1
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065b8:	461a      	mov	r2, r3
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	4293      	cmp	r3, r2
 80065be:	d3b5      	bcc.n	800652c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	e043      	b.n	800664e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065dc:	d118      	bne.n	8006610 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f0:	461a      	mov	r2, r3
 80065f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	e013      	b.n	8006622 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006606:	461a      	mov	r2, r3
 8006608:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e008      	b.n	8006622 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661c:	461a      	mov	r2, r3
 800661e:	2300      	movs	r3, #0
 8006620:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662e:	461a      	mov	r2, r3
 8006630:	2300      	movs	r3, #0
 8006632:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006640:	461a      	mov	r2, r3
 8006642:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006646:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	3301      	adds	r3, #1
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006652:	461a      	mov	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	4293      	cmp	r3, r2
 8006658:	d3b5      	bcc.n	80065c6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800666c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800667a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800667c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006680:	2b00      	cmp	r3, #0
 8006682:	d105      	bne.n	8006690 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f043 0210 	orr.w	r2, r3, #16
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699a      	ldr	r2, [r3, #24]
 8006694:	4b10      	ldr	r3, [pc, #64]	@ (80066d8 <USB_DevInit+0x2c4>)
 8006696:	4313      	orrs	r3, r2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800669c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	f043 0208 	orr.w	r2, r3, #8
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d107      	bne.n	80066c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066c0:	f043 0304 	orr.w	r3, r3, #4
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066d4:	b004      	add	sp, #16
 80066d6:	4770      	bx	lr
 80066d8:	803c3800 	.word	0x803c3800

080066dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3301      	adds	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066f6:	d901      	bls.n	80066fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e01b      	b.n	8006734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	daf2      	bge.n	80066ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	019b      	lsls	r3, r3, #6
 800670c:	f043 0220 	orr.w	r2, r3, #32
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006720:	d901      	bls.n	8006726 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e006      	b.n	8006734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b20      	cmp	r3, #32
 8006730:	d0f0      	beq.n	8006714 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006758:	d901      	bls.n	800675e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e018      	b.n	8006790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	daf2      	bge.n	800674c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2210      	movs	r2, #16
 800676e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3301      	adds	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800677c:	d901      	bls.n	8006782 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e006      	b.n	8006790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b10      	cmp	r3, #16
 800678c:	d0f0      	beq.n	8006770 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	68f9      	ldr	r1, [r7, #12]
 80067b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067bc:	4313      	orrs	r3, r2
 80067be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b087      	sub	sp, #28
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0306 	and.w	r3, r3, #6
 80067e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
 80067f2:	e00a      	b.n	800680a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d002      	beq.n	8006800 <USB_GetDevSpeed+0x32>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b06      	cmp	r3, #6
 80067fe:	d102      	bne.n	8006806 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006800:	2302      	movs	r3, #2
 8006802:	75fb      	strb	r3, [r7, #23]
 8006804:	e001      	b.n	800680a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006806:	230f      	movs	r3, #15
 8006808:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
}
 800680c:	4618      	mov	r0, r3
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d13a      	bne.n	80068aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	2101      	movs	r1, #1
 8006846:	fa01 f303 	lsl.w	r3, r1, r3
 800684a:	b29b      	uxth	r3, r3
 800684c:	68f9      	ldr	r1, [r7, #12]
 800684e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006852:	4313      	orrs	r3, r2
 8006854:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d155      	bne.n	8006918 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	791b      	ldrb	r3, [r3, #4]
 8006886:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006888:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	059b      	lsls	r3, r3, #22
 800688e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006890:	4313      	orrs	r3, r2
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800689e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	e036      	b.n	8006918 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b0:	69da      	ldr	r2, [r3, #28]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	2101      	movs	r1, #1
 80068bc:	fa01 f303 	lsl.w	r3, r1, r3
 80068c0:	041b      	lsls	r3, r3, #16
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068c8:	4313      	orrs	r3, r2
 80068ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d11a      	bne.n	8006918 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	791b      	ldrb	r3, [r3, #4]
 80068fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068fe:	430b      	orrs	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800690e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006916:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d161      	bne.n	8006a08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006956:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800695a:	d11f      	bne.n	800699c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006976:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800697a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006996:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800699a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	2101      	movs	r1, #1
 80069ae:	fa01 f303 	lsl.w	r3, r1, r3
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	43db      	mvns	r3, r3
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069bc:	4013      	ands	r3, r2
 80069be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	2101      	movs	r1, #1
 80069d2:	fa01 f303 	lsl.w	r3, r1, r3
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	43db      	mvns	r3, r3
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069e0:	4013      	ands	r3, r2
 80069e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	0159      	lsls	r1, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	440b      	add	r3, r1
 80069fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069fe:	4619      	mov	r1, r3
 8006a00:	4b35      	ldr	r3, [pc, #212]	@ (8006ad8 <USB_DeactivateEndpoint+0x1b0>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	600b      	str	r3, [r1, #0]
 8006a06:	e060      	b.n	8006aca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a1e:	d11f      	bne.n	8006a60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	2101      	movs	r1, #1
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a80:	4013      	ands	r3, r2
 8006a82:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	2101      	movs	r1, #1
 8006a96:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9a:	041b      	lsls	r3, r3, #16
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	0159      	lsls	r1, r3, #5
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	440b      	add	r3, r1
 8006abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4b05      	ldr	r3, [pc, #20]	@ (8006adc <USB_DeactivateEndpoint+0x1b4>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	ec337800 	.word	0xec337800
 8006adc:	eff37800 	.word	0xeff37800

08006ae0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08a      	sub	sp, #40	@ 0x28
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	f040 817f 	bne.w	8006e00 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d132      	bne.n	8006b70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	69fa      	ldr	r2, [r7, #28]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b24:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b28:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b68:	0cdb      	lsrs	r3, r3, #19
 8006b6a:	04db      	lsls	r3, r3, #19
 8006b6c:	6113      	str	r3, [r2, #16]
 8006b6e:	e097      	b.n	8006ca0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b8a:	0cdb      	lsrs	r3, r3, #19
 8006b8c:	04db      	lsls	r3, r3, #19
 8006b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006baa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006bae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006bb2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d11a      	bne.n	8006bf0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d903      	bls.n	8006bce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006be8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bec:	6113      	str	r3, [r2, #16]
 8006bee:	e044      	b.n	8006c7a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	1e5a      	subs	r2, r3, #1
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c04:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	8afb      	ldrh	r3, [r7, #22]
 8006c16:	04d9      	lsls	r1, r3, #19
 8006c18:	4ba4      	ldr	r3, [pc, #656]	@ (8006eac <USB_EPStartXfer+0x3cc>)
 8006c1a:	400b      	ands	r3, r1
 8006c1c:	69b9      	ldr	r1, [r7, #24]
 8006c1e:	0148      	lsls	r0, r1, #5
 8006c20:	69f9      	ldr	r1, [r7, #28]
 8006c22:	4401      	add	r1, r0
 8006c24:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	791b      	ldrb	r3, [r3, #4]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d122      	bne.n	8006c7a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c4e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006c52:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	8afb      	ldrh	r3, [r7, #22]
 8006c64:	075b      	lsls	r3, r3, #29
 8006c66:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006c6a:	69b9      	ldr	r1, [r7, #24]
 8006c6c:	0148      	lsls	r0, r1, #5
 8006c6e:	69f9      	ldr	r1, [r7, #28]
 8006c70:	4401      	add	r1, r0
 8006c72:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c76:	4313      	orrs	r3, r2
 8006c78:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c90:	69b9      	ldr	r1, [r7, #24]
 8006c92:	0148      	lsls	r0, r1, #5
 8006c94:	69f9      	ldr	r1, [r7, #28]
 8006c96:	4401      	add	r1, r0
 8006c98:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d14b      	bne.n	8006d3e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	791b      	ldrb	r3, [r3, #4]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d128      	bne.n	8006d1c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d110      	bne.n	8006cfc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e00f      	b.n	8006d1c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	0151      	lsls	r1, r2, #5
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	440a      	add	r2, r1
 8006d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d1a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	69fa      	ldr	r2, [r7, #28]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d36:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	e166      	b.n	800700c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	0151      	lsls	r1, r2, #5
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	440a      	add	r2, r1
 8006d54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d58:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d5c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	791b      	ldrb	r3, [r3, #4]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d015      	beq.n	8006d92 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 814e 	beq.w	800700c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	2101      	movs	r1, #1
 8006d82:	fa01 f303 	lsl.w	r3, r1, r3
 8006d86:	69f9      	ldr	r1, [r7, #28]
 8006d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006d90:	e13c      	b.n	800700c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d110      	bne.n	8006dc4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	e00f      	b.n	8006de4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	68d9      	ldr	r1, [r3, #12]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	781a      	ldrb	r2, [r3, #0]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	b298      	uxth	r0, r3
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	4603      	mov	r3, r0
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f9b9 	bl	8007170 <USB_WritePacket>
 8006dfe:	e105      	b.n	800700c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e1a:	0cdb      	lsrs	r3, r3, #19
 8006e1c:	04db      	lsls	r3, r3, #19
 8006e1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e3a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e3e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e42:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d132      	bne.n	8006eb0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e78:	69b9      	ldr	r1, [r7, #24]
 8006e7a:	0148      	lsls	r0, r1, #5
 8006e7c:	69f9      	ldr	r1, [r7, #28]
 8006e7e:	4401      	add	r1, r0
 8006e80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e84:	4313      	orrs	r3, r2
 8006e86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	0151      	lsls	r1, r2, #5
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ea2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ea6:	6113      	str	r3, [r2, #16]
 8006ea8:	e062      	b.n	8006f70 <USB_EPStartXfer+0x490>
 8006eaa:	bf00      	nop
 8006eac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d123      	bne.n	8006f00 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ece:	69b9      	ldr	r1, [r7, #24]
 8006ed0:	0148      	lsls	r0, r1, #5
 8006ed2:	69f9      	ldr	r1, [r7, #28]
 8006ed4:	4401      	add	r1, r0
 8006ed6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006eda:	4313      	orrs	r3, r2
 8006edc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ef8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006efc:	6113      	str	r3, [r2, #16]
 8006efe:	e037      	b.n	8006f70 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	1e5a      	subs	r2, r3, #1
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	8afa      	ldrh	r2, [r7, #22]
 8006f1c:	fb03 f202 	mul.w	r2, r3, r2
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f30:	691a      	ldr	r2, [r3, #16]
 8006f32:	8afb      	ldrh	r3, [r7, #22]
 8006f34:	04d9      	lsls	r1, r3, #19
 8006f36:	4b38      	ldr	r3, [pc, #224]	@ (8007018 <USB_EPStartXfer+0x538>)
 8006f38:	400b      	ands	r3, r1
 8006f3a:	69b9      	ldr	r1, [r7, #24]
 8006f3c:	0148      	lsls	r0, r1, #5
 8006f3e:	69f9      	ldr	r1, [r7, #28]
 8006f40:	4401      	add	r1, r0
 8006f42:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f46:	4313      	orrs	r3, r2
 8006f48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f60:	69b9      	ldr	r1, [r7, #24]
 8006f62:	0148      	lsls	r0, r1, #5
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	4401      	add	r1, r0
 8006f68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d10d      	bne.n	8006f92 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d009      	beq.n	8006f92 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	68d9      	ldr	r1, [r3, #12]
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8e:	460a      	mov	r2, r1
 8006f90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	791b      	ldrb	r3, [r3, #4]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d128      	bne.n	8006fec <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d110      	bne.n	8006fcc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fc4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e00f      	b.n	8006fec <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	440a      	add	r2, r1
 8007002:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007006:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800700a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3720      	adds	r7, #32
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	1ff80000 	.word	0x1ff80000

0800701c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d14a      	bne.n	80070d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800704e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007052:	f040 8086 	bne.w	8007162 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	7812      	ldrb	r2, [r2, #0]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	440a      	add	r2, r1
 8007070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007074:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007078:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	7812      	ldrb	r2, [r2, #0]
 800708e:	0151      	lsls	r1, r2, #5
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	440a      	add	r2, r1
 8007094:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007098:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800709c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3301      	adds	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d902      	bls.n	80070b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
          break;
 80070b2:	e056      	b.n	8007162 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070cc:	d0e7      	beq.n	800709e <USB_EPStopXfer+0x82>
 80070ce:	e048      	b.n	8007162 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070e8:	d13b      	bne.n	8007162 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	7812      	ldrb	r2, [r2, #0]
 80070fe:	0151      	lsls	r1, r2, #5
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	440a      	add	r2, r1
 8007104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007108:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800710c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	7812      	ldrb	r2, [r2, #0]
 8007122:	0151      	lsls	r1, r2, #5
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	440a      	add	r2, r1
 8007128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800712c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007130:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800713e:	4293      	cmp	r3, r2
 8007140:	d902      	bls.n	8007148 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	75fb      	strb	r3, [r7, #23]
          break;
 8007146:	e00c      	b.n	8007162 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800715c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007160:	d0e7      	beq.n	8007132 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
}
 8007164:	4618      	mov	r0, r3
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007170:	b480      	push	{r7}
 8007172:	b089      	sub	sp, #36	@ 0x24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4611      	mov	r1, r2
 800717c:	461a      	mov	r2, r3
 800717e:	460b      	mov	r3, r1
 8007180:	71fb      	strb	r3, [r7, #7]
 8007182:	4613      	mov	r3, r2
 8007184:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800718e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	d123      	bne.n	80071de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007196:	88bb      	ldrh	r3, [r7, #4]
 8007198:	3303      	adds	r3, #3
 800719a:	089b      	lsrs	r3, r3, #2
 800719c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800719e:	2300      	movs	r3, #0
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	e018      	b.n	80071d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	031a      	lsls	r2, r3, #12
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071b0:	461a      	mov	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	3301      	adds	r3, #1
 80071bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	3301      	adds	r3, #1
 80071c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	3301      	adds	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3301      	adds	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	3301      	adds	r3, #1
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d3e2      	bcc.n	80071a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3724      	adds	r7, #36	@ 0x24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b08b      	sub	sp, #44	@ 0x2c
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007202:	88fb      	ldrh	r3, [r7, #6]
 8007204:	089b      	lsrs	r3, r3, #2
 8007206:	b29b      	uxth	r3, r3
 8007208:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007212:	2300      	movs	r3, #0
 8007214:	623b      	str	r3, [r7, #32]
 8007216:	e014      	b.n	8007242 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	601a      	str	r2, [r3, #0]
    pDest++;
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	3301      	adds	r3, #1
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	3301      	adds	r3, #1
 800722e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	3301      	adds	r3, #1
 8007234:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	3301      	adds	r3, #1
 800723a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	3301      	adds	r3, #1
 8007240:	623b      	str	r3, [r7, #32]
 8007242:	6a3a      	ldr	r2, [r7, #32]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	429a      	cmp	r2, r3
 8007248:	d3e6      	bcc.n	8007218 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800724a:	8bfb      	ldrh	r3, [r7, #30]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01e      	beq.n	800728e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800725a:	461a      	mov	r2, r3
 800725c:	f107 0310 	add.w	r3, r7, #16
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
 8007270:	b2da      	uxtb	r2, r3
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	701a      	strb	r2, [r3, #0]
      i++;
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	3301      	adds	r3, #1
 800727a:	623b      	str	r3, [r7, #32]
      pDest++;
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	3301      	adds	r3, #1
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007282:	8bfb      	ldrh	r3, [r7, #30]
 8007284:	3b01      	subs	r3, #1
 8007286:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007288:	8bfb      	ldrh	r3, [r7, #30]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1ea      	bne.n	8007264 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007290:	4618      	mov	r0, r3
 8007292:	372c      	adds	r7, #44	@ 0x2c
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d12c      	bne.n	8007312 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	db12      	blt.n	80072f0 <USB_EPSetStall+0x54>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00f      	beq.n	80072f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	0151      	lsls	r1, r2, #5
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	440a      	add	r2, r1
 80072e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800730a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	e02b      	b.n	800736a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	db12      	blt.n	800734a <USB_EPSetStall+0xae>
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00f      	beq.n	800734a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	0151      	lsls	r1, r2, #5
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	440a      	add	r2, r1
 8007340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007344:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007348:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	0151      	lsls	r1, r2, #5
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	440a      	add	r2, r1
 8007360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007364:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007368:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d128      	bne.n	80073e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	791b      	ldrb	r3, [r3, #4]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d003      	beq.n	80073c4 <USB_EPClearStall+0x4c>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	791b      	ldrb	r3, [r3, #4]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d138      	bne.n	8007436 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	e027      	b.n	8007436 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	0151      	lsls	r1, r2, #5
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	440a      	add	r2, r1
 80073fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007400:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007404:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	791b      	ldrb	r3, [r3, #4]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d003      	beq.n	8007416 <USB_EPClearStall+0x9e>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	791b      	ldrb	r3, [r3, #4]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d10f      	bne.n	8007436 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	0151      	lsls	r1, r2, #5
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	440a      	add	r2, r1
 800742c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007434:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007462:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007466:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007478:	68f9      	ldr	r1, [r7, #12]
 800747a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800747e:	4313      	orrs	r3, r2
 8007480:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074aa:	f023 0303 	bic.w	r3, r3, #3
 80074ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074be:	f023 0302 	bic.w	r3, r3, #2
 80074c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074ec:	f023 0303 	bic.w	r3, r3, #3
 80074f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007500:	f043 0302 	orr.w	r3, r3, #2
 8007504:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	4013      	ands	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800752c:	68fb      	ldr	r3, [r7, #12]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800753a:	b480      	push	{r7}
 800753c:	b085      	sub	sp, #20
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	4013      	ands	r3, r2
 800755c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	0c1b      	lsrs	r3, r3, #16
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800756e:	b480      	push	{r7}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	4013      	ands	r3, r2
 8007590:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	b29b      	uxth	r3, r3
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b085      	sub	sp, #20
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	460b      	mov	r3, r1
 80075ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075b2:	78fb      	ldrb	r3, [r7, #3]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	4013      	ands	r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075d0:	68bb      	ldr	r3, [r7, #8]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075de:	b480      	push	{r7}
 80075e0:	b087      	sub	sp, #28
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007600:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007602:	78fb      	ldrb	r3, [r7, #3]
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	fa22 f303 	lsr.w	r3, r2, r3
 800760e:	01db      	lsls	r3, r3, #7
 8007610:	b2db      	uxtb	r3, r3
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4013      	ands	r3, r2
 800762a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800762c:	68bb      	ldr	r3, [r7, #8]
}
 800762e:	4618      	mov	r0, r3
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	f003 0301 	and.w	r3, r3, #1
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007656:	b480      	push	{r7}
 8007658:	b085      	sub	sp, #20
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007670:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007674:	f023 0307 	bic.w	r3, r3, #7
 8007678:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800768c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	460b      	mov	r3, r1
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	333c      	adds	r3, #60	@ 0x3c
 80076b2:	3304      	adds	r3, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	4a26      	ldr	r2, [pc, #152]	@ (8007754 <USB_EP0_OutStart+0xb8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d90a      	bls.n	80076d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076d0:	d101      	bne.n	80076d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	e037      	b.n	8007746 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076dc:	461a      	mov	r2, r3
 80076de:	2300      	movs	r3, #0
 80076e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007704:	f043 0318 	orr.w	r3, r3, #24
 8007708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007718:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800771c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800771e:	7afb      	ldrb	r3, [r7, #11]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d10f      	bne.n	8007744 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800773e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007742:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	4f54300a 	.word	0x4f54300a

08007758 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007770:	d901      	bls.n	8007776 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e01b      	b.n	80077ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	daf2      	bge.n	8007764 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f043 0201 	orr.w	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3301      	adds	r3, #1
 8007792:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800779a:	d901      	bls.n	80077a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e006      	b.n	80077ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d0f0      	beq.n	800778e <USB_CoreReset+0x36>

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
	...

080077bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80077cc:	f002 fc46 	bl	800a05c <USBD_static_malloc>
 80077d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	32b0      	adds	r2, #176	@ 0xb0
 80077e2:	2100      	movs	r1, #0
 80077e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80077e8:	2302      	movs	r3, #2
 80077ea:	e0d4      	b.n	8007996 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80077ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80077f0:	2100      	movs	r1, #0
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f002 fc76 	bl	800a0e4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	32b0      	adds	r2, #176	@ 0xb0
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	32b0      	adds	r2, #176	@ 0xb0
 8007812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7c1b      	ldrb	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d138      	bne.n	8007896 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007824:	4b5e      	ldr	r3, [pc, #376]	@ (80079a0 <USBD_CDC_Init+0x1e4>)
 8007826:	7819      	ldrb	r1, [r3, #0]
 8007828:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800782c:	2202      	movs	r2, #2
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f002 faf1 	bl	8009e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007834:	4b5a      	ldr	r3, [pc, #360]	@ (80079a0 <USBD_CDC_Init+0x1e4>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f003 020f 	and.w	r2, r3, #15
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	440b      	add	r3, r1
 8007848:	3324      	adds	r3, #36	@ 0x24
 800784a:	2201      	movs	r2, #1
 800784c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800784e:	4b55      	ldr	r3, [pc, #340]	@ (80079a4 <USBD_CDC_Init+0x1e8>)
 8007850:	7819      	ldrb	r1, [r3, #0]
 8007852:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007856:	2202      	movs	r2, #2
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f002 fadc 	bl	8009e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800785e:	4b51      	ldr	r3, [pc, #324]	@ (80079a4 <USBD_CDC_Init+0x1e8>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f003 020f 	and.w	r2, r3, #15
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007876:	2201      	movs	r2, #1
 8007878:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800787a:	4b4b      	ldr	r3, [pc, #300]	@ (80079a8 <USBD_CDC_Init+0x1ec>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	f003 020f 	and.w	r2, r3, #15
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	3326      	adds	r3, #38	@ 0x26
 8007890:	2210      	movs	r2, #16
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	e035      	b.n	8007902 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007896:	4b42      	ldr	r3, [pc, #264]	@ (80079a0 <USBD_CDC_Init+0x1e4>)
 8007898:	7819      	ldrb	r1, [r3, #0]
 800789a:	2340      	movs	r3, #64	@ 0x40
 800789c:	2202      	movs	r2, #2
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f002 fab9 	bl	8009e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078a4:	4b3e      	ldr	r3, [pc, #248]	@ (80079a0 <USBD_CDC_Init+0x1e4>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	f003 020f 	and.w	r2, r3, #15
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	440b      	add	r3, r1
 80078b8:	3324      	adds	r3, #36	@ 0x24
 80078ba:	2201      	movs	r2, #1
 80078bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078be:	4b39      	ldr	r3, [pc, #228]	@ (80079a4 <USBD_CDC_Init+0x1e8>)
 80078c0:	7819      	ldrb	r1, [r3, #0]
 80078c2:	2340      	movs	r3, #64	@ 0x40
 80078c4:	2202      	movs	r2, #2
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f002 faa5 	bl	8009e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078cc:	4b35      	ldr	r3, [pc, #212]	@ (80079a4 <USBD_CDC_Init+0x1e8>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f003 020f 	and.w	r2, r3, #15
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	440b      	add	r3, r1
 80078e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80078e4:	2201      	movs	r2, #1
 80078e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078e8:	4b2f      	ldr	r3, [pc, #188]	@ (80079a8 <USBD_CDC_Init+0x1ec>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	f003 020f 	and.w	r2, r3, #15
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	440b      	add	r3, r1
 80078fc:	3326      	adds	r3, #38	@ 0x26
 80078fe:	2210      	movs	r2, #16
 8007900:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007902:	4b29      	ldr	r3, [pc, #164]	@ (80079a8 <USBD_CDC_Init+0x1ec>)
 8007904:	7819      	ldrb	r1, [r3, #0]
 8007906:	2308      	movs	r3, #8
 8007908:	2203      	movs	r2, #3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f002 fa83 	bl	8009e16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007910:	4b25      	ldr	r3, [pc, #148]	@ (80079a8 <USBD_CDC_Init+0x1ec>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	f003 020f 	and.w	r2, r3, #15
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	440b      	add	r3, r1
 8007924:	3324      	adds	r3, #36	@ 0x24
 8007926:	2201      	movs	r2, #1
 8007928:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	33b0      	adds	r3, #176	@ 0xb0
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007960:	2302      	movs	r3, #2
 8007962:	e018      	b.n	8007996 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7c1b      	ldrb	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800796c:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <USBD_CDC_Init+0x1e8>)
 800796e:	7819      	ldrb	r1, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007976:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f002 fb3a 	bl	8009ff4 <USBD_LL_PrepareReceive>
 8007980:	e008      	b.n	8007994 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007982:	4b08      	ldr	r3, [pc, #32]	@ (80079a4 <USBD_CDC_Init+0x1e8>)
 8007984:	7819      	ldrb	r1, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800798c:	2340      	movs	r3, #64	@ 0x40
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f002 fb30 	bl	8009ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000093 	.word	0x20000093
 80079a4:	20000094 	.word	0x20000094
 80079a8:	20000095 	.word	0x20000095

080079ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80079b8:	4b3a      	ldr	r3, [pc, #232]	@ (8007aa4 <USBD_CDC_DeInit+0xf8>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f002 fa4f 	bl	8009e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80079c4:	4b37      	ldr	r3, [pc, #220]	@ (8007aa4 <USBD_CDC_DeInit+0xf8>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	f003 020f 	and.w	r2, r3, #15
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	440b      	add	r3, r1
 80079d8:	3324      	adds	r3, #36	@ 0x24
 80079da:	2200      	movs	r2, #0
 80079dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80079de:	4b32      	ldr	r3, [pc, #200]	@ (8007aa8 <USBD_CDC_DeInit+0xfc>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f002 fa3c 	bl	8009e62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80079ea:	4b2f      	ldr	r3, [pc, #188]	@ (8007aa8 <USBD_CDC_DeInit+0xfc>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	f003 020f 	and.w	r2, r3, #15
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a02:	2200      	movs	r2, #0
 8007a04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a06:	4b29      	ldr	r3, [pc, #164]	@ (8007aac <USBD_CDC_DeInit+0x100>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f002 fa28 	bl	8009e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a12:	4b26      	ldr	r3, [pc, #152]	@ (8007aac <USBD_CDC_DeInit+0x100>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	f003 020f 	and.w	r2, r3, #15
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	3324      	adds	r3, #36	@ 0x24
 8007a28:	2200      	movs	r2, #0
 8007a2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007aac <USBD_CDC_DeInit+0x100>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	f003 020f 	and.w	r2, r3, #15
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	4613      	mov	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	440b      	add	r3, r1
 8007a40:	3326      	adds	r3, #38	@ 0x26
 8007a42:	2200      	movs	r2, #0
 8007a44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	32b0      	adds	r2, #176	@ 0xb0
 8007a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01f      	beq.n	8007a98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	33b0      	adds	r3, #176	@ 0xb0
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	32b0      	adds	r2, #176	@ 0xb0
 8007a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f002 fafc 	bl	800a078 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	32b0      	adds	r2, #176	@ 0xb0
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000093 	.word	0x20000093
 8007aa8:	20000094 	.word	0x20000094
 8007aac:	20000095 	.word	0x20000095

08007ab0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	32b0      	adds	r2, #176	@ 0xb0
 8007ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e0bf      	b.n	8007c60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d050      	beq.n	8007b8e <USBD_CDC_Setup+0xde>
 8007aec:	2b20      	cmp	r3, #32
 8007aee:	f040 80af 	bne.w	8007c50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	88db      	ldrh	r3, [r3, #6]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d03a      	beq.n	8007b70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b25b      	sxtb	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	da1b      	bge.n	8007b3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	33b0      	adds	r3, #176	@ 0xb0
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	88d2      	ldrh	r2, [r2, #6]
 8007b20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	88db      	ldrh	r3, [r3, #6]
 8007b26:	2b07      	cmp	r3, #7
 8007b28:	bf28      	it	cs
 8007b2a:	2307      	movcs	r3, #7
 8007b2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	89fa      	ldrh	r2, [r7, #14]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 fd53 	bl	80095e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007b3a:	e090      	b.n	8007c5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	785a      	ldrb	r2, [r3, #1]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	88db      	ldrh	r3, [r3, #6]
 8007b4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8007b4c:	d803      	bhi.n	8007b56 <USBD_CDC_Setup+0xa6>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	88db      	ldrh	r3, [r3, #6]
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	e000      	b.n	8007b58 <USBD_CDC_Setup+0xa8>
 8007b56:	2240      	movs	r2, #64	@ 0x40
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b5e:	6939      	ldr	r1, [r7, #16]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007b66:	461a      	mov	r2, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 fd65 	bl	8009638 <USBD_CtlPrepareRx>
      break;
 8007b6e:	e076      	b.n	8007c5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	33b0      	adds	r3, #176	@ 0xb0
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	7850      	ldrb	r0, [r2, #1]
 8007b86:	2200      	movs	r2, #0
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	4798      	blx	r3
      break;
 8007b8c:	e067      	b.n	8007c5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	2b0b      	cmp	r3, #11
 8007b94:	d851      	bhi.n	8007c3a <USBD_CDC_Setup+0x18a>
 8007b96:	a201      	add	r2, pc, #4	@ (adr r2, 8007b9c <USBD_CDC_Setup+0xec>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bcd 	.word	0x08007bcd
 8007ba0:	08007c49 	.word	0x08007c49
 8007ba4:	08007c3b 	.word	0x08007c3b
 8007ba8:	08007c3b 	.word	0x08007c3b
 8007bac:	08007c3b 	.word	0x08007c3b
 8007bb0:	08007c3b 	.word	0x08007c3b
 8007bb4:	08007c3b 	.word	0x08007c3b
 8007bb8:	08007c3b 	.word	0x08007c3b
 8007bbc:	08007c3b 	.word	0x08007c3b
 8007bc0:	08007c3b 	.word	0x08007c3b
 8007bc4:	08007bf7 	.word	0x08007bf7
 8007bc8:	08007c21 	.word	0x08007c21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d107      	bne.n	8007be8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007bd8:	f107 030a 	add.w	r3, r7, #10
 8007bdc:	2202      	movs	r2, #2
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 fcfd 	bl	80095e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007be6:	e032      	b.n	8007c4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f001 fc7b 	bl	80094e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	75fb      	strb	r3, [r7, #23]
          break;
 8007bf4:	e02b      	b.n	8007c4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d107      	bne.n	8007c12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c02:	f107 030d 	add.w	r3, r7, #13
 8007c06:	2201      	movs	r2, #1
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 fce8 	bl	80095e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c10:	e01d      	b.n	8007c4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f001 fc66 	bl	80094e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c1e:	e016      	b.n	8007c4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d00f      	beq.n	8007c4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fc59 	bl	80094e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c34:	2303      	movs	r3, #3
 8007c36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c38:	e008      	b.n	8007c4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 fc52 	bl	80094e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c42:	2303      	movs	r3, #3
 8007c44:	75fb      	strb	r3, [r7, #23]
          break;
 8007c46:	e002      	b.n	8007c4e <USBD_CDC_Setup+0x19e>
          break;
 8007c48:	bf00      	nop
 8007c4a:	e008      	b.n	8007c5e <USBD_CDC_Setup+0x1ae>
          break;
 8007c4c:	bf00      	nop
      }
      break;
 8007c4e:	e006      	b.n	8007c5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 fc47 	bl	80094e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	32b0      	adds	r2, #176	@ 0xb0
 8007c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e065      	b.n	8007d5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	32b0      	adds	r2, #176	@ 0xb0
 8007c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	f003 020f 	and.w	r2, r3, #15
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3318      	adds	r3, #24
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d02f      	beq.n	8007d1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	f003 020f 	and.w	r2, r3, #15
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	3318      	adds	r3, #24
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	f003 010f 	and.w	r1, r3, #15
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	440b      	add	r3, r1
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4403      	add	r3, r0
 8007ce4:	331c      	adds	r3, #28
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cec:	fb01 f303 	mul.w	r3, r1, r3
 8007cf0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d112      	bne.n	8007d1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	f003 020f 	and.w	r2, r3, #15
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	440b      	add	r3, r1
 8007d08:	3318      	adds	r3, #24
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d0e:	78f9      	ldrb	r1, [r7, #3]
 8007d10:	2300      	movs	r3, #0
 8007d12:	2200      	movs	r2, #0
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f002 f94c 	bl	8009fb2 <USBD_LL_Transmit>
 8007d1a:	e01f      	b.n	8007d5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	33b0      	adds	r3, #176	@ 0xb0
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d010      	beq.n	8007d5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	33b0      	adds	r3, #176	@ 0xb0
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007d58:	78fa      	ldrb	r2, [r7, #3]
 8007d5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	32b0      	adds	r2, #176	@ 0xb0
 8007d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	32b0      	adds	r2, #176	@ 0xb0
 8007d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e01a      	b.n	8007dce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f002 f94a 	bl	800a036 <USBD_LL_GetRxDataSize>
 8007da2:	4602      	mov	r2, r0
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	33b0      	adds	r3, #176	@ 0xb0
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	32b0      	adds	r2, #176	@ 0xb0
 8007de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e024      	b.n	8007e42 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	33b0      	adds	r3, #176	@ 0xb0
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d019      	beq.n	8007e40 <USBD_CDC_EP0_RxReady+0x6a>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007e12:	2bff      	cmp	r3, #255	@ 0xff
 8007e14:	d014      	beq.n	8007e40 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	33b0      	adds	r3, #176	@ 0xb0
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	22ff      	movs	r2, #255	@ 0xff
 8007e3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e54:	2182      	movs	r1, #130	@ 0x82
 8007e56:	4818      	ldr	r0, [pc, #96]	@ (8007eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e58:	f000 fd0f 	bl	800887a <USBD_GetEpDesc>
 8007e5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4815      	ldr	r0, [pc, #84]	@ (8007eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e62:	f000 fd0a 	bl	800887a <USBD_GetEpDesc>
 8007e66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e68:	2181      	movs	r1, #129	@ 0x81
 8007e6a:	4813      	ldr	r0, [pc, #76]	@ (8007eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e6c:	f000 fd05 	bl	800887a <USBD_GetEpDesc>
 8007e70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2210      	movs	r2, #16
 8007e7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d006      	beq.n	8007e92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e8c:	711a      	strb	r2, [r3, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d006      	beq.n	8007ea6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ea0:	711a      	strb	r2, [r3, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2243      	movs	r2, #67	@ 0x43
 8007eaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007eac:	4b02      	ldr	r3, [pc, #8]	@ (8007eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000050 	.word	0x20000050

08007ebc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ec4:	2182      	movs	r1, #130	@ 0x82
 8007ec6:	4818      	ldr	r0, [pc, #96]	@ (8007f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ec8:	f000 fcd7 	bl	800887a <USBD_GetEpDesc>
 8007ecc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ece:	2101      	movs	r1, #1
 8007ed0:	4815      	ldr	r0, [pc, #84]	@ (8007f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ed2:	f000 fcd2 	bl	800887a <USBD_GetEpDesc>
 8007ed6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ed8:	2181      	movs	r1, #129	@ 0x81
 8007eda:	4813      	ldr	r0, [pc, #76]	@ (8007f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007edc:	f000 fccd 	bl	800887a <USBD_GetEpDesc>
 8007ee0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2210      	movs	r2, #16
 8007eec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d006      	beq.n	8007f02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	711a      	strb	r2, [r3, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f042 0202 	orr.w	r2, r2, #2
 8007f00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d006      	beq.n	8007f16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	711a      	strb	r2, [r3, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f042 0202 	orr.w	r2, r2, #2
 8007f14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2243      	movs	r2, #67	@ 0x43
 8007f1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f1c:	4b02      	ldr	r3, [pc, #8]	@ (8007f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000050 	.word	0x20000050

08007f2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f34:	2182      	movs	r1, #130	@ 0x82
 8007f36:	4818      	ldr	r0, [pc, #96]	@ (8007f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f38:	f000 fc9f 	bl	800887a <USBD_GetEpDesc>
 8007f3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f3e:	2101      	movs	r1, #1
 8007f40:	4815      	ldr	r0, [pc, #84]	@ (8007f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f42:	f000 fc9a 	bl	800887a <USBD_GetEpDesc>
 8007f46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f48:	2181      	movs	r1, #129	@ 0x81
 8007f4a:	4813      	ldr	r0, [pc, #76]	@ (8007f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f4c:	f000 fc95 	bl	800887a <USBD_GetEpDesc>
 8007f50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	2210      	movs	r2, #16
 8007f5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d006      	beq.n	8007f72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f6c:	711a      	strb	r2, [r3, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d006      	beq.n	8007f86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f80:	711a      	strb	r2, [r3, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2243      	movs	r2, #67	@ 0x43
 8007f8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f8c:	4b02      	ldr	r3, [pc, #8]	@ (8007f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000050 	.word	0x20000050

08007f9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	220a      	movs	r2, #10
 8007fa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007faa:	4b03      	ldr	r3, [pc, #12]	@ (8007fb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	2000000c 	.word	0x2000000c

08007fbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e009      	b.n	8007fe4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	33b0      	adds	r3, #176	@ 0xb0
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	32b0      	adds	r2, #176	@ 0xb0
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008012:	2303      	movs	r3, #3
 8008014:	e008      	b.n	8008028 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	371c      	adds	r7, #28
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	32b0      	adds	r2, #176	@ 0xb0
 8008048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008054:	2303      	movs	r3, #3
 8008056:	e004      	b.n	8008062 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	32b0      	adds	r2, #176	@ 0xb0
 8008082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008086:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	32b0      	adds	r2, #176	@ 0xb0
 8008092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800809a:	2303      	movs	r3, #3
 800809c:	e018      	b.n	80080d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	7c1b      	ldrb	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080a6:	4b0c      	ldr	r3, [pc, #48]	@ (80080d8 <USBD_CDC_ReceivePacket+0x68>)
 80080a8:	7819      	ldrb	r1, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 ff9d 	bl	8009ff4 <USBD_LL_PrepareReceive>
 80080ba:	e008      	b.n	80080ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080bc:	4b06      	ldr	r3, [pc, #24]	@ (80080d8 <USBD_CDC_ReceivePacket+0x68>)
 80080be:	7819      	ldrb	r1, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080c6:	2340      	movs	r3, #64	@ 0x40
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 ff93 	bl	8009ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20000094 	.word	0x20000094

080080dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	4613      	mov	r3, r2
 80080e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e01f      	b.n	8008134 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	79fa      	ldrb	r2, [r7, #7]
 8008126:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f001 fe0d 	bl	8009d48 <USBD_LL_Init>
 800812e:	4603      	mov	r3, r0
 8008130:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008150:	2303      	movs	r3, #3
 8008152:	e025      	b.n	80081a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	32ae      	adds	r2, #174	@ 0xae
 8008166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00f      	beq.n	8008190 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	32ae      	adds	r2, #174	@ 0xae
 800817a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008180:	f107 020e 	add.w	r2, r7, #14
 8008184:	4610      	mov	r0, r2
 8008186:	4798      	blx	r3
 8008188:	4602      	mov	r2, r0
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 fe15 	bl	8009de0 <USBD_LL_Start>
 80081b6:	4603      	mov	r3, r0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	460b      	mov	r3, r1
 80081e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d009      	beq.n	8008204 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	78fa      	ldrb	r2, [r7, #3]
 80081fa:	4611      	mov	r1, r2
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
 8008200:	4603      	mov	r3, r0
 8008202:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	4611      	mov	r1, r2
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008238:	7bfb      	ldrb	r3, [r7, #15]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	f001 f90c 	bl	8009472 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008268:	461a      	mov	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008276:	f003 031f 	and.w	r3, r3, #31
 800827a:	2b02      	cmp	r3, #2
 800827c:	d01a      	beq.n	80082b4 <USBD_LL_SetupStage+0x72>
 800827e:	2b02      	cmp	r3, #2
 8008280:	d822      	bhi.n	80082c8 <USBD_LL_SetupStage+0x86>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d002      	beq.n	800828c <USBD_LL_SetupStage+0x4a>
 8008286:	2b01      	cmp	r3, #1
 8008288:	d00a      	beq.n	80082a0 <USBD_LL_SetupStage+0x5e>
 800828a:	e01d      	b.n	80082c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fb63 	bl	8008960 <USBD_StdDevReq>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]
      break;
 800829e:	e020      	b.n	80082e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fbcb 	bl	8008a44 <USBD_StdItfReq>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73fb      	strb	r3, [r7, #15]
      break;
 80082b2:	e016      	b.n	80082e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fc2d 	bl	8008b1c <USBD_StdEPReq>
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]
      break;
 80082c6:	e00c      	b.n	80082e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fde2 	bl	8009ea0 <USBD_LL_StallEP>
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]
      break;
 80082e0:	bf00      	nop
  }

  return ret;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	460b      	mov	r3, r1
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d16e      	bne.n	80083e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800830a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008312:	2b03      	cmp	r3, #3
 8008314:	f040 8098 	bne.w	8008448 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	689a      	ldr	r2, [r3, #8]
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	429a      	cmp	r2, r3
 8008322:	d913      	bls.n	800834c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	1ad2      	subs	r2, r2, r3
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	4293      	cmp	r3, r2
 800833c:	bf28      	it	cs
 800833e:	4613      	movcs	r3, r2
 8008340:	461a      	mov	r2, r3
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f001 f994 	bl	8009672 <USBD_CtlContinueRx>
 800834a:	e07d      	b.n	8008448 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008352:	f003 031f 	and.w	r3, r3, #31
 8008356:	2b02      	cmp	r3, #2
 8008358:	d014      	beq.n	8008384 <USBD_LL_DataOutStage+0x98>
 800835a:	2b02      	cmp	r3, #2
 800835c:	d81d      	bhi.n	800839a <USBD_LL_DataOutStage+0xae>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <USBD_LL_DataOutStage+0x7c>
 8008362:	2b01      	cmp	r3, #1
 8008364:	d003      	beq.n	800836e <USBD_LL_DataOutStage+0x82>
 8008366:	e018      	b.n	800839a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	75bb      	strb	r3, [r7, #22]
            break;
 800836c:	e018      	b.n	80083a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008374:	b2db      	uxtb	r3, r3
 8008376:	4619      	mov	r1, r3
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fa64 	bl	8008846 <USBD_CoreFindIF>
 800837e:	4603      	mov	r3, r0
 8008380:	75bb      	strb	r3, [r7, #22]
            break;
 8008382:	e00d      	b.n	80083a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800838a:	b2db      	uxtb	r3, r3
 800838c:	4619      	mov	r1, r3
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fa66 	bl	8008860 <USBD_CoreFindEP>
 8008394:	4603      	mov	r3, r0
 8008396:	75bb      	strb	r3, [r7, #22]
            break;
 8008398:	e002      	b.n	80083a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	75bb      	strb	r3, [r7, #22]
            break;
 800839e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80083a0:	7dbb      	ldrb	r3, [r7, #22]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d119      	bne.n	80083da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d113      	bne.n	80083da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80083b2:	7dba      	ldrb	r2, [r7, #22]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	32ae      	adds	r2, #174	@ 0xae
 80083b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00b      	beq.n	80083da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80083c2:	7dba      	ldrb	r2, [r7, #22]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80083ca:	7dba      	ldrb	r2, [r7, #22]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	32ae      	adds	r2, #174	@ 0xae
 80083d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f001 f95a 	bl	8009694 <USBD_CtlSendStatus>
 80083e0:	e032      	b.n	8008448 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80083e2:	7afb      	ldrb	r3, [r7, #11]
 80083e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	4619      	mov	r1, r3
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 fa37 	bl	8008860 <USBD_CoreFindEP>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083f6:	7dbb      	ldrb	r3, [r7, #22]
 80083f8:	2bff      	cmp	r3, #255	@ 0xff
 80083fa:	d025      	beq.n	8008448 <USBD_LL_DataOutStage+0x15c>
 80083fc:	7dbb      	ldrb	r3, [r7, #22]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d122      	bne.n	8008448 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b03      	cmp	r3, #3
 800840c:	d117      	bne.n	800843e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800840e:	7dba      	ldrb	r2, [r7, #22]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	32ae      	adds	r2, #174	@ 0xae
 8008414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00f      	beq.n	800843e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800841e:	7dba      	ldrb	r2, [r7, #22]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008426:	7dba      	ldrb	r2, [r7, #22]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	32ae      	adds	r2, #174	@ 0xae
 800842c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	7afa      	ldrb	r2, [r7, #11]
 8008434:	4611      	mov	r1, r2
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	4798      	blx	r3
 800843a:	4603      	mov	r3, r0
 800843c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	e000      	b.n	800844a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b086      	sub	sp, #24
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	460b      	mov	r3, r1
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d16f      	bne.n	8008546 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3314      	adds	r3, #20
 800846a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008472:	2b02      	cmp	r3, #2
 8008474:	d15a      	bne.n	800852c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	689a      	ldr	r2, [r3, #8]
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	429a      	cmp	r2, r3
 8008480:	d914      	bls.n	80084ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	1ad2      	subs	r2, r2, r3
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	461a      	mov	r2, r3
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f001 f8bc 	bl	8009616 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800849e:	2300      	movs	r3, #0
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f001 fda5 	bl	8009ff4 <USBD_LL_PrepareReceive>
 80084aa:	e03f      	b.n	800852c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d11c      	bne.n	80084f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d316      	bcc.n	80084f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d20f      	bcs.n	80084f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084d2:	2200      	movs	r2, #0
 80084d4:	2100      	movs	r1, #0
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f001 f89d 	bl	8009616 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084e4:	2300      	movs	r3, #0
 80084e6:	2200      	movs	r2, #0
 80084e8:	2100      	movs	r1, #0
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f001 fd82 	bl	8009ff4 <USBD_LL_PrepareReceive>
 80084f0:	e01c      	b.n	800852c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d10f      	bne.n	800851e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d009      	beq.n	800851e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800851e:	2180      	movs	r1, #128	@ 0x80
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f001 fcbd 	bl	8009ea0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f001 f8c7 	bl	80096ba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d03a      	beq.n	80085ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7ff fe42 	bl	80081c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008544:	e032      	b.n	80085ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800854c:	b2db      	uxtb	r3, r3
 800854e:	4619      	mov	r1, r3
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f985 	bl	8008860 <USBD_CoreFindEP>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	2bff      	cmp	r3, #255	@ 0xff
 800855e:	d025      	beq.n	80085ac <USBD_LL_DataInStage+0x15a>
 8008560:	7dfb      	ldrb	r3, [r7, #23]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d122      	bne.n	80085ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b03      	cmp	r3, #3
 8008570:	d11c      	bne.n	80085ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008572:	7dfa      	ldrb	r2, [r7, #23]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	32ae      	adds	r2, #174	@ 0xae
 8008578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d014      	beq.n	80085ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008582:	7dfa      	ldrb	r2, [r7, #23]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800858a:	7dfa      	ldrb	r2, [r7, #23]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	32ae      	adds	r2, #174	@ 0xae
 8008590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	7afa      	ldrb	r2, [r7, #11]
 8008598:	4611      	mov	r1, r2
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80085a2:	7dbb      	ldrb	r3, [r7, #22]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80085a8:	7dbb      	ldrb	r3, [r7, #22]
 80085aa:	e000      	b.n	80085ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d014      	beq.n	800861c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00e      	beq.n	800861c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6852      	ldr	r2, [r2, #4]
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	4611      	mov	r1, r2
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008618:	2303      	movs	r3, #3
 800861a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800861c:	2340      	movs	r3, #64	@ 0x40
 800861e:	2200      	movs	r2, #0
 8008620:	2100      	movs	r1, #0
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fbf7 	bl	8009e16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2240      	movs	r2, #64	@ 0x40
 8008634:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008638:	2340      	movs	r3, #64	@ 0x40
 800863a:	2200      	movs	r2, #0
 800863c:	2180      	movs	r1, #128	@ 0x80
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 fbe9 	bl	8009e16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2240      	movs	r2, #64	@ 0x40
 800864e:	621a      	str	r2, [r3, #32]

  return ret;
 8008650:	7bfb      	ldrb	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	460b      	mov	r3, r1
 8008664:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	78fa      	ldrb	r2, [r7, #3]
 800866a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b04      	cmp	r3, #4
 800868c:	d006      	beq.n	800869c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008694:	b2da      	uxtb	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2204      	movs	r2, #4
 80086a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d106      	bne.n	80086d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d110      	bne.n	8008718 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	460b      	mov	r3, r1
 800872c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	32ae      	adds	r2, #174	@ 0xae
 8008738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008740:	2303      	movs	r3, #3
 8008742:	e01c      	b.n	800877e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b03      	cmp	r3, #3
 800874e:	d115      	bne.n	800877c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	32ae      	adds	r2, #174	@ 0xae
 800875a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00b      	beq.n	800877c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	32ae      	adds	r2, #174	@ 0xae
 800876e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	78fa      	ldrb	r2, [r7, #3]
 8008776:	4611      	mov	r1, r2
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	460b      	mov	r3, r1
 8008790:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	32ae      	adds	r2, #174	@ 0xae
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e01c      	b.n	80087e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d115      	bne.n	80087e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	32ae      	adds	r2, #174	@ 0xae
 80087be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	32ae      	adds	r2, #174	@ 0xae
 80087d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d8:	78fa      	ldrb	r2, [r7, #3]
 80087da:	4611      	mov	r1, r2
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00e      	beq.n	800883c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6852      	ldr	r2, [r2, #4]
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	4611      	mov	r1, r2
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008838:	2303      	movs	r3, #3
 800883a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	460b      	mov	r3, r1
 8008850:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008852:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800886c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b086      	sub	sp, #24
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	885b      	ldrh	r3, [r3, #2]
 8008896:	b29b      	uxth	r3, r3
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	7812      	ldrb	r2, [r2, #0]
 800889c:	4293      	cmp	r3, r2
 800889e:	d91f      	bls.n	80088e0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80088a6:	e013      	b.n	80088d0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80088a8:	f107 030a 	add.w	r3, r7, #10
 80088ac:	4619      	mov	r1, r3
 80088ae:	6978      	ldr	r0, [r7, #20]
 80088b0:	f000 f81b 	bl	80088ea <USBD_GetNextDesc>
 80088b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	2b05      	cmp	r3, #5
 80088bc:	d108      	bne.n	80088d0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	789b      	ldrb	r3, [r3, #2]
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d008      	beq.n	80088de <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80088cc:	2300      	movs	r3, #0
 80088ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	897b      	ldrh	r3, [r7, #10]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d8e5      	bhi.n	80088a8 <USBD_GetEpDesc+0x2e>
 80088dc:	e000      	b.n	80088e0 <USBD_GetEpDesc+0x66>
          break;
 80088de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80088e0:	693b      	ldr	r3, [r7, #16]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3718      	adds	r7, #24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b085      	sub	sp, #20
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	7812      	ldrb	r2, [r2, #0]
 8008900:	4413      	add	r3, r2
 8008902:	b29a      	uxth	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008914:	68fb      	ldr	r3, [r7, #12]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008922:	b480      	push	{r7}
 8008924:	b087      	sub	sp, #28
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	3301      	adds	r3, #1
 8008938:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008940:	8a3b      	ldrh	r3, [r7, #16]
 8008942:	021b      	lsls	r3, r3, #8
 8008944:	b21a      	sxth	r2, r3
 8008946:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800894a:	4313      	orrs	r3, r2
 800894c:	b21b      	sxth	r3, r3
 800894e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008950:	89fb      	ldrh	r3, [r7, #14]
}
 8008952:	4618      	mov	r0, r3
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
	...

08008960 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008976:	2b40      	cmp	r3, #64	@ 0x40
 8008978:	d005      	beq.n	8008986 <USBD_StdDevReq+0x26>
 800897a:	2b40      	cmp	r3, #64	@ 0x40
 800897c:	d857      	bhi.n	8008a2e <USBD_StdDevReq+0xce>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00f      	beq.n	80089a2 <USBD_StdDevReq+0x42>
 8008982:	2b20      	cmp	r3, #32
 8008984:	d153      	bne.n	8008a2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	32ae      	adds	r2, #174	@ 0xae
 8008990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	4798      	blx	r3
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]
      break;
 80089a0:	e04a      	b.n	8008a38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	785b      	ldrb	r3, [r3, #1]
 80089a6:	2b09      	cmp	r3, #9
 80089a8:	d83b      	bhi.n	8008a22 <USBD_StdDevReq+0xc2>
 80089aa:	a201      	add	r2, pc, #4	@ (adr r2, 80089b0 <USBD_StdDevReq+0x50>)
 80089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b0:	08008a05 	.word	0x08008a05
 80089b4:	08008a19 	.word	0x08008a19
 80089b8:	08008a23 	.word	0x08008a23
 80089bc:	08008a0f 	.word	0x08008a0f
 80089c0:	08008a23 	.word	0x08008a23
 80089c4:	080089e3 	.word	0x080089e3
 80089c8:	080089d9 	.word	0x080089d9
 80089cc:	08008a23 	.word	0x08008a23
 80089d0:	080089fb 	.word	0x080089fb
 80089d4:	080089ed 	.word	0x080089ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa3c 	bl	8008e58 <USBD_GetDescriptor>
          break;
 80089e0:	e024      	b.n	8008a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fba1 	bl	800912c <USBD_SetAddress>
          break;
 80089ea:	e01f      	b.n	8008a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fbe0 	bl	80091b4 <USBD_SetConfig>
 80089f4:	4603      	mov	r3, r0
 80089f6:	73fb      	strb	r3, [r7, #15]
          break;
 80089f8:	e018      	b.n	8008a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fc83 	bl	8009308 <USBD_GetConfig>
          break;
 8008a02:	e013      	b.n	8008a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fcb4 	bl	8009374 <USBD_GetStatus>
          break;
 8008a0c:	e00e      	b.n	8008a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fce3 	bl	80093dc <USBD_SetFeature>
          break;
 8008a16:	e009      	b.n	8008a2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fd07 	bl	800942e <USBD_ClrFeature>
          break;
 8008a20:	e004      	b.n	8008a2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fd5e 	bl	80094e6 <USBD_CtlError>
          break;
 8008a2a:	bf00      	nop
      }
      break;
 8008a2c:	e004      	b.n	8008a38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fd58 	bl	80094e6 <USBD_CtlError>
      break;
 8008a36:	bf00      	nop
  }

  return ret;
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop

08008a44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a5a:	2b40      	cmp	r3, #64	@ 0x40
 8008a5c:	d005      	beq.n	8008a6a <USBD_StdItfReq+0x26>
 8008a5e:	2b40      	cmp	r3, #64	@ 0x40
 8008a60:	d852      	bhi.n	8008b08 <USBD_StdItfReq+0xc4>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <USBD_StdItfReq+0x26>
 8008a66:	2b20      	cmp	r3, #32
 8008a68:	d14e      	bne.n	8008b08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d840      	bhi.n	8008afa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	889b      	ldrh	r3, [r3, #4]
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d836      	bhi.n	8008af0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	889b      	ldrh	r3, [r3, #4]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff fedb 	bl	8008846 <USBD_CoreFindIF>
 8008a90:	4603      	mov	r3, r0
 8008a92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
 8008a96:	2bff      	cmp	r3, #255	@ 0xff
 8008a98:	d01d      	beq.n	8008ad6 <USBD_StdItfReq+0x92>
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d11a      	bne.n	8008ad6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008aa0:	7bba      	ldrb	r2, [r7, #14]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	32ae      	adds	r2, #174	@ 0xae
 8008aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00f      	beq.n	8008ad0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ab0:	7bba      	ldrb	r2, [r7, #14]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ab8:	7bba      	ldrb	r2, [r7, #14]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	32ae      	adds	r2, #174	@ 0xae
 8008abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	4798      	blx	r3
 8008aca:	4603      	mov	r3, r0
 8008acc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ace:	e004      	b.n	8008ada <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ad4:	e001      	b.n	8008ada <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	88db      	ldrh	r3, [r3, #6]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d110      	bne.n	8008b04 <USBD_StdItfReq+0xc0>
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10d      	bne.n	8008b04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fdd3 	bl	8009694 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008aee:	e009      	b.n	8008b04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fcf7 	bl	80094e6 <USBD_CtlError>
          break;
 8008af8:	e004      	b.n	8008b04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fcf2 	bl	80094e6 <USBD_CtlError>
          break;
 8008b02:	e000      	b.n	8008b06 <USBD_StdItfReq+0xc2>
          break;
 8008b04:	bf00      	nop
      }
      break;
 8008b06:	e004      	b.n	8008b12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fceb 	bl	80094e6 <USBD_CtlError>
      break;
 8008b10:	bf00      	nop
  }

  return ret;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	889b      	ldrh	r3, [r3, #4]
 8008b2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b38:	2b40      	cmp	r3, #64	@ 0x40
 8008b3a:	d007      	beq.n	8008b4c <USBD_StdEPReq+0x30>
 8008b3c:	2b40      	cmp	r3, #64	@ 0x40
 8008b3e:	f200 817f 	bhi.w	8008e40 <USBD_StdEPReq+0x324>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d02a      	beq.n	8008b9c <USBD_StdEPReq+0x80>
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	f040 817a 	bne.w	8008e40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff fe85 	bl	8008860 <USBD_CoreFindEP>
 8008b56:	4603      	mov	r3, r0
 8008b58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b5a:	7b7b      	ldrb	r3, [r7, #13]
 8008b5c:	2bff      	cmp	r3, #255	@ 0xff
 8008b5e:	f000 8174 	beq.w	8008e4a <USBD_StdEPReq+0x32e>
 8008b62:	7b7b      	ldrb	r3, [r7, #13]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f040 8170 	bne.w	8008e4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008b6a:	7b7a      	ldrb	r2, [r7, #13]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b72:	7b7a      	ldrb	r2, [r7, #13]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	32ae      	adds	r2, #174	@ 0xae
 8008b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 8163 	beq.w	8008e4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008b84:	7b7a      	ldrb	r2, [r7, #13]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	32ae      	adds	r2, #174	@ 0xae
 8008b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	4798      	blx	r3
 8008b96:	4603      	mov	r3, r0
 8008b98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b9a:	e156      	b.n	8008e4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	785b      	ldrb	r3, [r3, #1]
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d008      	beq.n	8008bb6 <USBD_StdEPReq+0x9a>
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	f300 8145 	bgt.w	8008e34 <USBD_StdEPReq+0x318>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 809b 	beq.w	8008ce6 <USBD_StdEPReq+0x1ca>
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d03c      	beq.n	8008c2e <USBD_StdEPReq+0x112>
 8008bb4:	e13e      	b.n	8008e34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d002      	beq.n	8008bc8 <USBD_StdEPReq+0xac>
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d016      	beq.n	8008bf4 <USBD_StdEPReq+0xd8>
 8008bc6:	e02c      	b.n	8008c22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00d      	beq.n	8008bea <USBD_StdEPReq+0xce>
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	2b80      	cmp	r3, #128	@ 0x80
 8008bd2:	d00a      	beq.n	8008bea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bd4:	7bbb      	ldrb	r3, [r7, #14]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f001 f961 	bl	8009ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bde:	2180      	movs	r1, #128	@ 0x80
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f001 f95d 	bl	8009ea0 <USBD_LL_StallEP>
 8008be6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008be8:	e020      	b.n	8008c2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fc7a 	bl	80094e6 <USBD_CtlError>
              break;
 8008bf2:	e01b      	b.n	8008c2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	885b      	ldrh	r3, [r3, #2]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10e      	bne.n	8008c1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <USBD_StdEPReq+0xfe>
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	2b80      	cmp	r3, #128	@ 0x80
 8008c06:	d008      	beq.n	8008c1a <USBD_StdEPReq+0xfe>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	88db      	ldrh	r3, [r3, #6]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d104      	bne.n	8008c1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 f943 	bl	8009ea0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fd3a 	bl	8009694 <USBD_CtlSendStatus>

              break;
 8008c20:	e004      	b.n	8008c2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fc5e 	bl	80094e6 <USBD_CtlError>
              break;
 8008c2a:	bf00      	nop
          }
          break;
 8008c2c:	e107      	b.n	8008e3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d002      	beq.n	8008c40 <USBD_StdEPReq+0x124>
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d016      	beq.n	8008c6c <USBD_StdEPReq+0x150>
 8008c3e:	e04b      	b.n	8008cd8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00d      	beq.n	8008c62 <USBD_StdEPReq+0x146>
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	2b80      	cmp	r3, #128	@ 0x80
 8008c4a:	d00a      	beq.n	8008c62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 f925 	bl	8009ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c56:	2180      	movs	r1, #128	@ 0x80
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 f921 	bl	8009ea0 <USBD_LL_StallEP>
 8008c5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c60:	e040      	b.n	8008ce4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fc3e 	bl	80094e6 <USBD_CtlError>
              break;
 8008c6a:	e03b      	b.n	8008ce4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	885b      	ldrh	r3, [r3, #2]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d136      	bne.n	8008ce2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d004      	beq.n	8008c88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	4619      	mov	r1, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f001 f92b 	bl	8009ede <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fd03 	bl	8009694 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fde4 	bl	8008860 <USBD_CoreFindEP>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c9c:	7b7b      	ldrb	r3, [r7, #13]
 8008c9e:	2bff      	cmp	r3, #255	@ 0xff
 8008ca0:	d01f      	beq.n	8008ce2 <USBD_StdEPReq+0x1c6>
 8008ca2:	7b7b      	ldrb	r3, [r7, #13]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d11c      	bne.n	8008ce2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ca8:	7b7a      	ldrb	r2, [r7, #13]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008cb0:	7b7a      	ldrb	r2, [r7, #13]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	32ae      	adds	r2, #174	@ 0xae
 8008cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d010      	beq.n	8008ce2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008cc0:	7b7a      	ldrb	r2, [r7, #13]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	32ae      	adds	r2, #174	@ 0xae
 8008cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4798      	blx	r3
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008cd6:	e004      	b.n	8008ce2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fc03 	bl	80094e6 <USBD_CtlError>
              break;
 8008ce0:	e000      	b.n	8008ce4 <USBD_StdEPReq+0x1c8>
              break;
 8008ce2:	bf00      	nop
          }
          break;
 8008ce4:	e0ab      	b.n	8008e3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d002      	beq.n	8008cf8 <USBD_StdEPReq+0x1dc>
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d032      	beq.n	8008d5c <USBD_StdEPReq+0x240>
 8008cf6:	e097      	b.n	8008e28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cf8:	7bbb      	ldrb	r3, [r7, #14]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d007      	beq.n	8008d0e <USBD_StdEPReq+0x1f2>
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	2b80      	cmp	r3, #128	@ 0x80
 8008d02:	d004      	beq.n	8008d0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fbed 	bl	80094e6 <USBD_CtlError>
                break;
 8008d0c:	e091      	b.n	8008e32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	da0b      	bge.n	8008d2e <USBD_StdEPReq+0x212>
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	3310      	adds	r3, #16
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	4413      	add	r3, r2
 8008d2a:	3304      	adds	r3, #4
 8008d2c:	e00b      	b.n	8008d46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	4413      	add	r3, r2
 8008d44:	3304      	adds	r3, #4
 8008d46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	2202      	movs	r2, #2
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fc43 	bl	80095e0 <USBD_CtlSendData>
              break;
 8008d5a:	e06a      	b.n	8008e32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	da11      	bge.n	8008d88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	f003 020f 	and.w	r2, r3, #15
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	440b      	add	r3, r1
 8008d76:	3324      	adds	r3, #36	@ 0x24
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d117      	bne.n	8008dae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fbb0 	bl	80094e6 <USBD_CtlError>
                  break;
 8008d86:	e054      	b.n	8008e32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	f003 020f 	and.w	r2, r3, #15
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d104      	bne.n	8008dae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fb9d 	bl	80094e6 <USBD_CtlError>
                  break;
 8008dac:	e041      	b.n	8008e32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	da0b      	bge.n	8008dce <USBD_StdEPReq+0x2b2>
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	3310      	adds	r3, #16
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	4413      	add	r3, r2
 8008dca:	3304      	adds	r3, #4
 8008dcc:	e00b      	b.n	8008de6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
 8008dd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	4413      	add	r3, r2
 8008de4:	3304      	adds	r3, #4
 8008de6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <USBD_StdEPReq+0x2d8>
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b80      	cmp	r3, #128	@ 0x80
 8008df2:	d103      	bne.n	8008dfc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	e00e      	b.n	8008e1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 f88b 	bl	8009f1c <USBD_LL_IsStallEP>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	e002      	b.n	8008e1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fbdd 	bl	80095e0 <USBD_CtlSendData>
              break;
 8008e26:	e004      	b.n	8008e32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fb5b 	bl	80094e6 <USBD_CtlError>
              break;
 8008e30:	bf00      	nop
          }
          break;
 8008e32:	e004      	b.n	8008e3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fb55 	bl	80094e6 <USBD_CtlError>
          break;
 8008e3c:	bf00      	nop
      }
      break;
 8008e3e:	e005      	b.n	8008e4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fb4f 	bl	80094e6 <USBD_CtlError>
      break;
 8008e48:	e000      	b.n	8008e4c <USBD_StdEPReq+0x330>
      break;
 8008e4a:	bf00      	nop
  }

  return ret;
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	885b      	ldrh	r3, [r3, #2]
 8008e72:	0a1b      	lsrs	r3, r3, #8
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	2b06      	cmp	r3, #6
 8008e7a:	f200 8128 	bhi.w	80090ce <USBD_GetDescriptor+0x276>
 8008e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e84 <USBD_GetDescriptor+0x2c>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008ea1 	.word	0x08008ea1
 8008e88:	08008eb9 	.word	0x08008eb9
 8008e8c:	08008ef9 	.word	0x08008ef9
 8008e90:	080090cf 	.word	0x080090cf
 8008e94:	080090cf 	.word	0x080090cf
 8008e98:	0800906f 	.word	0x0800906f
 8008e9c:	0800909b 	.word	0x0800909b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	7c12      	ldrb	r2, [r2, #16]
 8008eac:	f107 0108 	add.w	r1, r7, #8
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4798      	blx	r3
 8008eb4:	60f8      	str	r0, [r7, #12]
      break;
 8008eb6:	e112      	b.n	80090de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	7c1b      	ldrb	r3, [r3, #16]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10d      	bne.n	8008edc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec8:	f107 0208 	add.w	r2, r7, #8
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4798      	blx	r3
 8008ed0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008eda:	e100      	b.n	80090de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee4:	f107 0208 	add.w	r2, r7, #8
 8008ee8:	4610      	mov	r0, r2
 8008eea:	4798      	blx	r3
 8008eec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	701a      	strb	r2, [r3, #0]
      break;
 8008ef6:	e0f2      	b.n	80090de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	885b      	ldrh	r3, [r3, #2]
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b05      	cmp	r3, #5
 8008f00:	f200 80ac 	bhi.w	800905c <USBD_GetDescriptor+0x204>
 8008f04:	a201      	add	r2, pc, #4	@ (adr r2, 8008f0c <USBD_GetDescriptor+0xb4>)
 8008f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0a:	bf00      	nop
 8008f0c:	08008f25 	.word	0x08008f25
 8008f10:	08008f59 	.word	0x08008f59
 8008f14:	08008f8d 	.word	0x08008f8d
 8008f18:	08008fc1 	.word	0x08008fc1
 8008f1c:	08008ff5 	.word	0x08008ff5
 8008f20:	08009029 	.word	0x08009029
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	7c12      	ldrb	r2, [r2, #16]
 8008f3c:	f107 0108 	add.w	r1, r7, #8
 8008f40:	4610      	mov	r0, r2
 8008f42:	4798      	blx	r3
 8008f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f46:	e091      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 facb 	bl	80094e6 <USBD_CtlError>
            err++;
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	3301      	adds	r3, #1
 8008f54:	72fb      	strb	r3, [r7, #11]
          break;
 8008f56:	e089      	b.n	800906c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	7c12      	ldrb	r2, [r2, #16]
 8008f70:	f107 0108 	add.w	r1, r7, #8
 8008f74:	4610      	mov	r0, r2
 8008f76:	4798      	blx	r3
 8008f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f7a:	e077      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fab1 	bl	80094e6 <USBD_CtlError>
            err++;
 8008f84:	7afb      	ldrb	r3, [r7, #11]
 8008f86:	3301      	adds	r3, #1
 8008f88:	72fb      	strb	r3, [r7, #11]
          break;
 8008f8a:	e06f      	b.n	800906c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	7c12      	ldrb	r2, [r2, #16]
 8008fa4:	f107 0108 	add.w	r1, r7, #8
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4798      	blx	r3
 8008fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fae:	e05d      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa97 	bl	80094e6 <USBD_CtlError>
            err++;
 8008fb8:	7afb      	ldrb	r3, [r7, #11]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fbe:	e055      	b.n	800906c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	7c12      	ldrb	r2, [r2, #16]
 8008fd8:	f107 0108 	add.w	r1, r7, #8
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
 8008fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe2:	e043      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa7d 	bl	80094e6 <USBD_CtlError>
            err++;
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff2:	e03b      	b.n	800906c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	7c12      	ldrb	r2, [r2, #16]
 800900c:	f107 0108 	add.w	r1, r7, #8
 8009010:	4610      	mov	r0, r2
 8009012:	4798      	blx	r3
 8009014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009016:	e029      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fa63 	bl	80094e6 <USBD_CtlError>
            err++;
 8009020:	7afb      	ldrb	r3, [r7, #11]
 8009022:	3301      	adds	r3, #1
 8009024:	72fb      	strb	r3, [r7, #11]
          break;
 8009026:	e021      	b.n	800906c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00b      	beq.n	800904c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	7c12      	ldrb	r2, [r2, #16]
 8009040:	f107 0108 	add.w	r1, r7, #8
 8009044:	4610      	mov	r0, r2
 8009046:	4798      	blx	r3
 8009048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904a:	e00f      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa49 	bl	80094e6 <USBD_CtlError>
            err++;
 8009054:	7afb      	ldrb	r3, [r7, #11]
 8009056:	3301      	adds	r3, #1
 8009058:	72fb      	strb	r3, [r7, #11]
          break;
 800905a:	e007      	b.n	800906c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa41 	bl	80094e6 <USBD_CtlError>
          err++;
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	3301      	adds	r3, #1
 8009068:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800906a:	bf00      	nop
      }
      break;
 800906c:	e037      	b.n	80090de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	7c1b      	ldrb	r3, [r3, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d109      	bne.n	800908a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800907c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800907e:	f107 0208 	add.w	r2, r7, #8
 8009082:	4610      	mov	r0, r2
 8009084:	4798      	blx	r3
 8009086:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009088:	e029      	b.n	80090de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fa2a 	bl	80094e6 <USBD_CtlError>
        err++;
 8009092:	7afb      	ldrb	r3, [r7, #11]
 8009094:	3301      	adds	r3, #1
 8009096:	72fb      	strb	r3, [r7, #11]
      break;
 8009098:	e021      	b.n	80090de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	7c1b      	ldrb	r3, [r3, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10d      	bne.n	80090be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090aa:	f107 0208 	add.w	r2, r7, #8
 80090ae:	4610      	mov	r0, r2
 80090b0:	4798      	blx	r3
 80090b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	3301      	adds	r3, #1
 80090b8:	2207      	movs	r2, #7
 80090ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090bc:	e00f      	b.n	80090de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fa10 	bl	80094e6 <USBD_CtlError>
        err++;
 80090c6:	7afb      	ldrb	r3, [r7, #11]
 80090c8:	3301      	adds	r3, #1
 80090ca:	72fb      	strb	r3, [r7, #11]
      break;
 80090cc:	e007      	b.n	80090de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fa08 	bl	80094e6 <USBD_CtlError>
      err++;
 80090d6:	7afb      	ldrb	r3, [r7, #11]
 80090d8:	3301      	adds	r3, #1
 80090da:	72fb      	strb	r3, [r7, #11]
      break;
 80090dc:	bf00      	nop
  }

  if (err != 0U)
 80090de:	7afb      	ldrb	r3, [r7, #11]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d11e      	bne.n	8009122 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	88db      	ldrh	r3, [r3, #6]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d016      	beq.n	800911a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80090ec:	893b      	ldrh	r3, [r7, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00e      	beq.n	8009110 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	88da      	ldrh	r2, [r3, #6]
 80090f6:	893b      	ldrh	r3, [r7, #8]
 80090f8:	4293      	cmp	r3, r2
 80090fa:	bf28      	it	cs
 80090fc:	4613      	movcs	r3, r2
 80090fe:	b29b      	uxth	r3, r3
 8009100:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009102:	893b      	ldrh	r3, [r7, #8]
 8009104:	461a      	mov	r2, r3
 8009106:	68f9      	ldr	r1, [r7, #12]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fa69 	bl	80095e0 <USBD_CtlSendData>
 800910e:	e009      	b.n	8009124 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f9e7 	bl	80094e6 <USBD_CtlError>
 8009118:	e004      	b.n	8009124 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 faba 	bl	8009694 <USBD_CtlSendStatus>
 8009120:	e000      	b.n	8009124 <USBD_GetDescriptor+0x2cc>
    return;
 8009122:	bf00      	nop
  }
}
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop

0800912c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	889b      	ldrh	r3, [r3, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d131      	bne.n	80091a2 <USBD_SetAddress+0x76>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	88db      	ldrh	r3, [r3, #6]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d12d      	bne.n	80091a2 <USBD_SetAddress+0x76>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	885b      	ldrh	r3, [r3, #2]
 800914a:	2b7f      	cmp	r3, #127	@ 0x7f
 800914c:	d829      	bhi.n	80091a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	885b      	ldrh	r3, [r3, #2]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009158:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b03      	cmp	r3, #3
 8009164:	d104      	bne.n	8009170 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f9bc 	bl	80094e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916e:	e01d      	b.n	80091ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	7bfa      	ldrb	r2, [r7, #15]
 8009174:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fef9 	bl	8009f74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fa86 	bl	8009694 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d004      	beq.n	8009198 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2202      	movs	r2, #2
 8009192:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009196:	e009      	b.n	80091ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a0:	e004      	b.n	80091ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f99e 	bl	80094e6 <USBD_CtlError>
  }
}
 80091aa:	bf00      	nop
 80091ac:	bf00      	nop
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	885b      	ldrh	r3, [r3, #2]
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	4b4e      	ldr	r3, [pc, #312]	@ (8009304 <USBD_SetConfig+0x150>)
 80091ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091cc:	4b4d      	ldr	r3, [pc, #308]	@ (8009304 <USBD_SetConfig+0x150>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d905      	bls.n	80091e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f985 	bl	80094e6 <USBD_CtlError>
    return USBD_FAIL;
 80091dc:	2303      	movs	r3, #3
 80091de:	e08c      	b.n	80092fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d002      	beq.n	80091f2 <USBD_SetConfig+0x3e>
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d029      	beq.n	8009244 <USBD_SetConfig+0x90>
 80091f0:	e075      	b.n	80092de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80091f2:	4b44      	ldr	r3, [pc, #272]	@ (8009304 <USBD_SetConfig+0x150>)
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d020      	beq.n	800923c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80091fa:	4b42      	ldr	r3, [pc, #264]	@ (8009304 <USBD_SetConfig+0x150>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009204:	4b3f      	ldr	r3, [pc, #252]	@ (8009304 <USBD_SetConfig+0x150>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7fe ffe3 	bl	80081d6 <USBD_SetClassConfig>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d008      	beq.n	800922c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f962 	bl	80094e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2202      	movs	r2, #2
 8009226:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800922a:	e065      	b.n	80092f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fa31 	bl	8009694 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2203      	movs	r2, #3
 8009236:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800923a:	e05d      	b.n	80092f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fa29 	bl	8009694 <USBD_CtlSendStatus>
      break;
 8009242:	e059      	b.n	80092f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009244:	4b2f      	ldr	r3, [pc, #188]	@ (8009304 <USBD_SetConfig+0x150>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d112      	bne.n	8009272 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009254:	4b2b      	ldr	r3, [pc, #172]	@ (8009304 <USBD_SetConfig+0x150>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800925e:	4b29      	ldr	r3, [pc, #164]	@ (8009304 <USBD_SetConfig+0x150>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7fe ffd2 	bl	800820e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fa12 	bl	8009694 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009270:	e042      	b.n	80092f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009272:	4b24      	ldr	r3, [pc, #144]	@ (8009304 <USBD_SetConfig+0x150>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	429a      	cmp	r2, r3
 800927e:	d02a      	beq.n	80092d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	b2db      	uxtb	r3, r3
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7fe ffc0 	bl	800820e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800928e:	4b1d      	ldr	r3, [pc, #116]	@ (8009304 <USBD_SetConfig+0x150>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009298:	4b1a      	ldr	r3, [pc, #104]	@ (8009304 <USBD_SetConfig+0x150>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7fe ff99 	bl	80081d6 <USBD_SetClassConfig>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00f      	beq.n	80092ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f918 	bl	80094e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7fe ffa5 	bl	800820e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092cc:	e014      	b.n	80092f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f9e0 	bl	8009694 <USBD_CtlSendStatus>
      break;
 80092d4:	e010      	b.n	80092f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f9dc 	bl	8009694 <USBD_CtlSendStatus>
      break;
 80092dc:	e00c      	b.n	80092f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f900 	bl	80094e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092e6:	4b07      	ldr	r3, [pc, #28]	@ (8009304 <USBD_SetConfig+0x150>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7fe ff8e 	bl	800820e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80092f2:	2303      	movs	r3, #3
 80092f4:	73fb      	strb	r3, [r7, #15]
      break;
 80092f6:	bf00      	nop
  }

  return ret;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20000768 	.word	0x20000768

08009308 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	88db      	ldrh	r3, [r3, #6]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d004      	beq.n	8009324 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f8e2 	bl	80094e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009322:	e023      	b.n	800936c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b02      	cmp	r3, #2
 800932e:	dc02      	bgt.n	8009336 <USBD_GetConfig+0x2e>
 8009330:	2b00      	cmp	r3, #0
 8009332:	dc03      	bgt.n	800933c <USBD_GetConfig+0x34>
 8009334:	e015      	b.n	8009362 <USBD_GetConfig+0x5a>
 8009336:	2b03      	cmp	r3, #3
 8009338:	d00b      	beq.n	8009352 <USBD_GetConfig+0x4a>
 800933a:	e012      	b.n	8009362 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	3308      	adds	r3, #8
 8009346:	2201      	movs	r2, #1
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f948 	bl	80095e0 <USBD_CtlSendData>
        break;
 8009350:	e00c      	b.n	800936c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3304      	adds	r3, #4
 8009356:	2201      	movs	r2, #1
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f940 	bl	80095e0 <USBD_CtlSendData>
        break;
 8009360:	e004      	b.n	800936c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f8be 	bl	80094e6 <USBD_CtlError>
        break;
 800936a:	bf00      	nop
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009384:	b2db      	uxtb	r3, r3
 8009386:	3b01      	subs	r3, #1
 8009388:	2b02      	cmp	r3, #2
 800938a:	d81e      	bhi.n	80093ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	88db      	ldrh	r3, [r3, #6]
 8009390:	2b02      	cmp	r3, #2
 8009392:	d004      	beq.n	800939e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f8a5 	bl	80094e6 <USBD_CtlError>
        break;
 800939c:	e01a      	b.n	80093d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d005      	beq.n	80093ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f043 0202 	orr.w	r2, r3, #2
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	330c      	adds	r3, #12
 80093be:	2202      	movs	r2, #2
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f90c 	bl	80095e0 <USBD_CtlSendData>
      break;
 80093c8:	e004      	b.n	80093d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f88a 	bl	80094e6 <USBD_CtlError>
      break;
 80093d2:	bf00      	nop
  }
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	885b      	ldrh	r3, [r3, #2]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d107      	bne.n	80093fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f94c 	bl	8009694 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80093fc:	e013      	b.n	8009426 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	885b      	ldrh	r3, [r3, #2]
 8009402:	2b02      	cmp	r3, #2
 8009404:	d10b      	bne.n	800941e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	889b      	ldrh	r3, [r3, #4]
 800940a:	0a1b      	lsrs	r3, r3, #8
 800940c:	b29b      	uxth	r3, r3
 800940e:	b2da      	uxtb	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f93c 	bl	8009694 <USBD_CtlSendStatus>
}
 800941c:	e003      	b.n	8009426 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f860 	bl	80094e6 <USBD_CtlError>
}
 8009426:	bf00      	nop
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800943e:	b2db      	uxtb	r3, r3
 8009440:	3b01      	subs	r3, #1
 8009442:	2b02      	cmp	r3, #2
 8009444:	d80b      	bhi.n	800945e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	885b      	ldrh	r3, [r3, #2]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d10c      	bne.n	8009468 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f91c 	bl	8009694 <USBD_CtlSendStatus>
      }
      break;
 800945c:	e004      	b.n	8009468 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f840 	bl	80094e6 <USBD_CtlError>
      break;
 8009466:	e000      	b.n	800946a <USBD_ClrFeature+0x3c>
      break;
 8009468:	bf00      	nop
  }
}
 800946a:	bf00      	nop
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	781a      	ldrb	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3301      	adds	r3, #1
 800948c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	781a      	ldrb	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3301      	adds	r3, #1
 800949a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f7ff fa40 	bl	8008922 <SWAPBYTE>
 80094a2:	4603      	mov	r3, r0
 80094a4:	461a      	mov	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3301      	adds	r3, #1
 80094ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3301      	adds	r3, #1
 80094b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7ff fa33 	bl	8008922 <SWAPBYTE>
 80094bc:	4603      	mov	r3, r0
 80094be:	461a      	mov	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3301      	adds	r3, #1
 80094c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3301      	adds	r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f7ff fa26 	bl	8008922 <SWAPBYTE>
 80094d6:	4603      	mov	r3, r0
 80094d8:	461a      	mov	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	80da      	strh	r2, [r3, #6]
}
 80094de:	bf00      	nop
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b082      	sub	sp, #8
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f0:	2180      	movs	r1, #128	@ 0x80
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fcd4 	bl	8009ea0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094f8:	2100      	movs	r1, #0
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fcd0 	bl	8009ea0 <USBD_LL_StallEP>
}
 8009500:	bf00      	nop
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d042      	beq.n	80095a4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009522:	6938      	ldr	r0, [r7, #16]
 8009524:	f000 f842 	bl	80095ac <USBD_GetLen>
 8009528:	4603      	mov	r3, r0
 800952a:	3301      	adds	r3, #1
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009532:	d808      	bhi.n	8009546 <USBD_GetString+0x3e>
 8009534:	6938      	ldr	r0, [r7, #16]
 8009536:	f000 f839 	bl	80095ac <USBD_GetLen>
 800953a:	4603      	mov	r3, r0
 800953c:	3301      	adds	r3, #1
 800953e:	b29b      	uxth	r3, r3
 8009540:	005b      	lsls	r3, r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	e001      	b.n	800954a <USBD_GetString+0x42>
 8009546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	4413      	add	r3, r2
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	7812      	ldrb	r2, [r2, #0]
 8009558:	701a      	strb	r2, [r3, #0]
  idx++;
 800955a:	7dfb      	ldrb	r3, [r7, #23]
 800955c:	3301      	adds	r3, #1
 800955e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009560:	7dfb      	ldrb	r3, [r7, #23]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	4413      	add	r3, r2
 8009566:	2203      	movs	r2, #3
 8009568:	701a      	strb	r2, [r3, #0]
  idx++;
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	3301      	adds	r3, #1
 800956e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009570:	e013      	b.n	800959a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009572:	7dfb      	ldrb	r3, [r7, #23]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	4413      	add	r3, r2
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	7812      	ldrb	r2, [r2, #0]
 800957c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	3301      	adds	r3, #1
 8009582:	613b      	str	r3, [r7, #16]
    idx++;
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	3301      	adds	r3, #1
 8009588:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800958a:	7dfb      	ldrb	r3, [r7, #23]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	4413      	add	r3, r2
 8009590:	2200      	movs	r2, #0
 8009592:	701a      	strb	r2, [r3, #0]
    idx++;
 8009594:	7dfb      	ldrb	r3, [r7, #23]
 8009596:	3301      	adds	r3, #1
 8009598:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1e7      	bne.n	8009572 <USBD_GetString+0x6a>
 80095a2:	e000      	b.n	80095a6 <USBD_GetString+0x9e>
    return;
 80095a4:	bf00      	nop
  }
}
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095bc:	e005      	b.n	80095ca <USBD_GetLen+0x1e>
  {
    len++;
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	3301      	adds	r3, #1
 80095c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	3301      	adds	r3, #1
 80095c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1f5      	bne.n	80095be <USBD_GetLen+0x12>
  }

  return len;
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2202      	movs	r2, #2
 80095f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	2100      	movs	r1, #0
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 fcd3 	bl	8009fb2 <USBD_LL_Transmit>

  return USBD_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	2100      	movs	r1, #0
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 fcc2 	bl	8009fb2 <USBD_LL_Transmit>

  return USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2203      	movs	r2, #3
 8009648:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	2100      	movs	r1, #0
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 fcc6 	bl	8009ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	2100      	movs	r1, #0
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 fcb5 	bl	8009ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2204      	movs	r2, #4
 80096a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096a4:	2300      	movs	r3, #0
 80096a6:	2200      	movs	r2, #0
 80096a8:	2100      	movs	r1, #0
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fc81 	bl	8009fb2 <USBD_LL_Transmit>

  return USBD_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2205      	movs	r2, #5
 80096c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096ca:	2300      	movs	r3, #0
 80096cc:	2200      	movs	r2, #0
 80096ce:	2100      	movs	r1, #0
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fc8f 	bl	8009ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096e4:	2200      	movs	r2, #0
 80096e6:	4912      	ldr	r1, [pc, #72]	@ (8009730 <MX_USB_DEVICE_Init+0x50>)
 80096e8:	4812      	ldr	r0, [pc, #72]	@ (8009734 <MX_USB_DEVICE_Init+0x54>)
 80096ea:	f7fe fcf7 	bl	80080dc <USBD_Init>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096f4:	f7f7 ff70 	bl	80015d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80096f8:	490f      	ldr	r1, [pc, #60]	@ (8009738 <MX_USB_DEVICE_Init+0x58>)
 80096fa:	480e      	ldr	r0, [pc, #56]	@ (8009734 <MX_USB_DEVICE_Init+0x54>)
 80096fc:	f7fe fd1e 	bl	800813c <USBD_RegisterClass>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009706:	f7f7 ff67 	bl	80015d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800970a:	490c      	ldr	r1, [pc, #48]	@ (800973c <MX_USB_DEVICE_Init+0x5c>)
 800970c:	4809      	ldr	r0, [pc, #36]	@ (8009734 <MX_USB_DEVICE_Init+0x54>)
 800970e:	f7fe fc55 	bl	8007fbc <USBD_CDC_RegisterInterface>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009718:	f7f7 ff5e 	bl	80015d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800971c:	4805      	ldr	r0, [pc, #20]	@ (8009734 <MX_USB_DEVICE_Init+0x54>)
 800971e:	f7fe fd43 	bl	80081a8 <USBD_Start>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009728:	f7f7 ff56 	bl	80015d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800972c:	bf00      	nop
 800972e:	bd80      	pop	{r7, pc}
 8009730:	200000ac 	.word	0x200000ac
 8009734:	2000076c 	.word	0x2000076c
 8009738:	20000018 	.word	0x20000018
 800973c:	20000098 	.word	0x20000098

08009740 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009744:	2200      	movs	r2, #0
 8009746:	4905      	ldr	r1, [pc, #20]	@ (800975c <CDC_Init_FS+0x1c>)
 8009748:	4805      	ldr	r0, [pc, #20]	@ (8009760 <CDC_Init_FS+0x20>)
 800974a:	f7fe fc51 	bl	8007ff0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800974e:	4905      	ldr	r1, [pc, #20]	@ (8009764 <CDC_Init_FS+0x24>)
 8009750:	4803      	ldr	r0, [pc, #12]	@ (8009760 <CDC_Init_FS+0x20>)
 8009752:	f7fe fc6f 	bl	8008034 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009756:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009758:	4618      	mov	r0, r3
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20001248 	.word	0x20001248
 8009760:	2000076c 	.word	0x2000076c
 8009764:	20000a48 	.word	0x20000a48

08009768 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800976c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800976e:	4618      	mov	r0, r3
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	6039      	str	r1, [r7, #0]
 8009782:	71fb      	strb	r3, [r7, #7]
 8009784:	4613      	mov	r3, r2
 8009786:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	2b23      	cmp	r3, #35	@ 0x23
 800978c:	d84a      	bhi.n	8009824 <CDC_Control_FS+0xac>
 800978e:	a201      	add	r2, pc, #4	@ (adr r2, 8009794 <CDC_Control_FS+0x1c>)
 8009790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009794:	08009825 	.word	0x08009825
 8009798:	08009825 	.word	0x08009825
 800979c:	08009825 	.word	0x08009825
 80097a0:	08009825 	.word	0x08009825
 80097a4:	08009825 	.word	0x08009825
 80097a8:	08009825 	.word	0x08009825
 80097ac:	08009825 	.word	0x08009825
 80097b0:	08009825 	.word	0x08009825
 80097b4:	08009825 	.word	0x08009825
 80097b8:	08009825 	.word	0x08009825
 80097bc:	08009825 	.word	0x08009825
 80097c0:	08009825 	.word	0x08009825
 80097c4:	08009825 	.word	0x08009825
 80097c8:	08009825 	.word	0x08009825
 80097cc:	08009825 	.word	0x08009825
 80097d0:	08009825 	.word	0x08009825
 80097d4:	08009825 	.word	0x08009825
 80097d8:	08009825 	.word	0x08009825
 80097dc:	08009825 	.word	0x08009825
 80097e0:	08009825 	.word	0x08009825
 80097e4:	08009825 	.word	0x08009825
 80097e8:	08009825 	.word	0x08009825
 80097ec:	08009825 	.word	0x08009825
 80097f0:	08009825 	.word	0x08009825
 80097f4:	08009825 	.word	0x08009825
 80097f8:	08009825 	.word	0x08009825
 80097fc:	08009825 	.word	0x08009825
 8009800:	08009825 	.word	0x08009825
 8009804:	08009825 	.word	0x08009825
 8009808:	08009825 	.word	0x08009825
 800980c:	08009825 	.word	0x08009825
 8009810:	08009825 	.word	0x08009825
 8009814:	08009825 	.word	0x08009825
 8009818:	08009825 	.word	0x08009825
 800981c:	08009825 	.word	0x08009825
 8009820:	08009825 	.word	0x08009825
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009824:	bf00      	nop
  }

  return (USBD_OK);
 8009826:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	4805      	ldr	r0, [pc, #20]	@ (8009858 <CDC_Receive_FS+0x24>)
 8009842:	f7fe fbf7 	bl	8008034 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009846:	4804      	ldr	r0, [pc, #16]	@ (8009858 <CDC_Receive_FS+0x24>)
 8009848:	f7fe fc12 	bl	8008070 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800984c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	2000076c 	.word	0x2000076c

0800985c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	4613      	mov	r3, r2
 8009868:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800986e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009872:	4618      	mov	r0, r3
 8009874:	371c      	adds	r7, #28
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
	...

08009880 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	4603      	mov	r3, r0
 8009888:	6039      	str	r1, [r7, #0]
 800988a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	2212      	movs	r2, #18
 8009890:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009892:	4b03      	ldr	r3, [pc, #12]	@ (80098a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009894:	4618      	mov	r0, r3
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	200000c8 	.word	0x200000c8

080098a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	6039      	str	r1, [r7, #0]
 80098ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	2204      	movs	r2, #4
 80098b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80098b6:	4b03      	ldr	r3, [pc, #12]	@ (80098c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	200000dc 	.word	0x200000dc

080098c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	6039      	str	r1, [r7, #0]
 80098d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d105      	bne.n	80098e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	4907      	ldr	r1, [pc, #28]	@ (80098fc <USBD_FS_ProductStrDescriptor+0x34>)
 80098de:	4808      	ldr	r0, [pc, #32]	@ (8009900 <USBD_FS_ProductStrDescriptor+0x38>)
 80098e0:	f7ff fe12 	bl	8009508 <USBD_GetString>
 80098e4:	e004      	b.n	80098f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	4904      	ldr	r1, [pc, #16]	@ (80098fc <USBD_FS_ProductStrDescriptor+0x34>)
 80098ea:	4805      	ldr	r0, [pc, #20]	@ (8009900 <USBD_FS_ProductStrDescriptor+0x38>)
 80098ec:	f7ff fe0c 	bl	8009508 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098f0:	4b02      	ldr	r3, [pc, #8]	@ (80098fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20001a48 	.word	0x20001a48
 8009900:	0800b1b8 	.word	0x0800b1b8

08009904 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	4603      	mov	r3, r0
 800990c:	6039      	str	r1, [r7, #0]
 800990e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	4904      	ldr	r1, [pc, #16]	@ (8009924 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009914:	4804      	ldr	r0, [pc, #16]	@ (8009928 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009916:	f7ff fdf7 	bl	8009508 <USBD_GetString>
  return USBD_StrDesc;
 800991a:	4b02      	ldr	r3, [pc, #8]	@ (8009924 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20001a48 	.word	0x20001a48
 8009928:	0800b1d0 	.word	0x0800b1d0

0800992c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	6039      	str	r1, [r7, #0]
 8009936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	221a      	movs	r2, #26
 800993c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800993e:	f000 f843 	bl	80099c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009942:	4b02      	ldr	r3, [pc, #8]	@ (800994c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009944:	4618      	mov	r0, r3
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	200000e0 	.word	0x200000e0

08009950 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	6039      	str	r1, [r7, #0]
 800995a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d105      	bne.n	800996e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	4907      	ldr	r1, [pc, #28]	@ (8009984 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009966:	4808      	ldr	r0, [pc, #32]	@ (8009988 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009968:	f7ff fdce 	bl	8009508 <USBD_GetString>
 800996c:	e004      	b.n	8009978 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	4904      	ldr	r1, [pc, #16]	@ (8009984 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009972:	4805      	ldr	r0, [pc, #20]	@ (8009988 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009974:	f7ff fdc8 	bl	8009508 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009978:	4b02      	ldr	r3, [pc, #8]	@ (8009984 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20001a48 	.word	0x20001a48
 8009988:	0800b1e4 	.word	0x0800b1e4

0800998c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	6039      	str	r1, [r7, #0]
 8009996:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d105      	bne.n	80099aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4907      	ldr	r1, [pc, #28]	@ (80099c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099a2:	4808      	ldr	r0, [pc, #32]	@ (80099c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099a4:	f7ff fdb0 	bl	8009508 <USBD_GetString>
 80099a8:	e004      	b.n	80099b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	4904      	ldr	r1, [pc, #16]	@ (80099c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099ae:	4805      	ldr	r0, [pc, #20]	@ (80099c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099b0:	f7ff fdaa 	bl	8009508 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099b4:	4b02      	ldr	r3, [pc, #8]	@ (80099c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20001a48 	.word	0x20001a48
 80099c4:	0800b1f0 	.word	0x0800b1f0

080099c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80099ce:	4b0f      	ldr	r3, [pc, #60]	@ (8009a0c <Get_SerialNum+0x44>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009a10 <Get_SerialNum+0x48>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099da:	4b0e      	ldr	r3, [pc, #56]	@ (8009a14 <Get_SerialNum+0x4c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4413      	add	r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d009      	beq.n	8009a02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099ee:	2208      	movs	r2, #8
 80099f0:	4909      	ldr	r1, [pc, #36]	@ (8009a18 <Get_SerialNum+0x50>)
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 f814 	bl	8009a20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099f8:	2204      	movs	r2, #4
 80099fa:	4908      	ldr	r1, [pc, #32]	@ (8009a1c <Get_SerialNum+0x54>)
 80099fc:	68b8      	ldr	r0, [r7, #8]
 80099fe:	f000 f80f 	bl	8009a20 <IntToUnicode>
  }
}
 8009a02:	bf00      	nop
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	1fff7a10 	.word	0x1fff7a10
 8009a10:	1fff7a14 	.word	0x1fff7a14
 8009a14:	1fff7a18 	.word	0x1fff7a18
 8009a18:	200000e2 	.word	0x200000e2
 8009a1c:	200000f2 	.word	0x200000f2

08009a20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a32:	2300      	movs	r3, #0
 8009a34:	75fb      	strb	r3, [r7, #23]
 8009a36:	e027      	b.n	8009a88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	0f1b      	lsrs	r3, r3, #28
 8009a3c:	2b09      	cmp	r3, #9
 8009a3e:	d80b      	bhi.n	8009a58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	0f1b      	lsrs	r3, r3, #28
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	005b      	lsls	r3, r3, #1
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	440b      	add	r3, r1
 8009a50:	3230      	adds	r2, #48	@ 0x30
 8009a52:	b2d2      	uxtb	r2, r2
 8009a54:	701a      	strb	r2, [r3, #0]
 8009a56:	e00a      	b.n	8009a6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	0f1b      	lsrs	r3, r3, #28
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	7dfb      	ldrb	r3, [r7, #23]
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	4619      	mov	r1, r3
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	440b      	add	r3, r1
 8009a68:	3237      	adds	r2, #55	@ 0x37
 8009a6a:	b2d2      	uxtb	r2, r2
 8009a6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	011b      	lsls	r3, r3, #4
 8009a72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a74:	7dfb      	ldrb	r3, [r7, #23]
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	3301      	adds	r3, #1
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	2200      	movs	r2, #0
 8009a80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
 8009a84:	3301      	adds	r3, #1
 8009a86:	75fb      	strb	r3, [r7, #23]
 8009a88:	7dfa      	ldrb	r2, [r7, #23]
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d3d3      	bcc.n	8009a38 <IntToUnicode+0x18>
  }
}
 8009a90:	bf00      	nop
 8009a92:	bf00      	nop
 8009a94:	371c      	adds	r7, #28
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
	...

08009aa0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08a      	sub	sp, #40	@ 0x28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aa8:	f107 0314 	add.w	r3, r7, #20
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	605a      	str	r2, [r3, #4]
 8009ab2:	609a      	str	r2, [r3, #8]
 8009ab4:	60da      	str	r2, [r3, #12]
 8009ab6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ac0:	d147      	bne.n	8009b52 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
 8009ac6:	4b25      	ldr	r3, [pc, #148]	@ (8009b5c <HAL_PCD_MspInit+0xbc>)
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aca:	4a24      	ldr	r2, [pc, #144]	@ (8009b5c <HAL_PCD_MspInit+0xbc>)
 8009acc:	f043 0301 	orr.w	r3, r3, #1
 8009ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ad2:	4b22      	ldr	r3, [pc, #136]	@ (8009b5c <HAL_PCD_MspInit+0xbc>)
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	613b      	str	r3, [r7, #16]
 8009adc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009ade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009aec:	f107 0314 	add.w	r3, r7, #20
 8009af0:	4619      	mov	r1, r3
 8009af2:	481b      	ldr	r0, [pc, #108]	@ (8009b60 <HAL_PCD_MspInit+0xc0>)
 8009af4:	f7f9 f9fa 	bl	8002eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009af8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009afe:	2302      	movs	r3, #2
 8009b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b02:	2300      	movs	r3, #0
 8009b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b06:	2300      	movs	r3, #0
 8009b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b0a:	230a      	movs	r3, #10
 8009b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b0e:	f107 0314 	add.w	r3, r7, #20
 8009b12:	4619      	mov	r1, r3
 8009b14:	4812      	ldr	r0, [pc, #72]	@ (8009b60 <HAL_PCD_MspInit+0xc0>)
 8009b16:	f7f9 f9e9 	bl	8002eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b1a:	4b10      	ldr	r3, [pc, #64]	@ (8009b5c <HAL_PCD_MspInit+0xbc>)
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8009b5c <HAL_PCD_MspInit+0xbc>)
 8009b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b24:	6353      	str	r3, [r2, #52]	@ 0x34
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b5c <HAL_PCD_MspInit+0xbc>)
 8009b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8009b5c <HAL_PCD_MspInit+0xbc>)
 8009b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b36:	4b09      	ldr	r3, [pc, #36]	@ (8009b5c <HAL_PCD_MspInit+0xbc>)
 8009b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b42:	2200      	movs	r2, #0
 8009b44:	2100      	movs	r1, #0
 8009b46:	2043      	movs	r0, #67	@ 0x43
 8009b48:	f7f8 fbd9 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b4c:	2043      	movs	r0, #67	@ 0x43
 8009b4e:	f7f8 fbf2 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b52:	bf00      	nop
 8009b54:	3728      	adds	r7, #40	@ 0x28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	40023800 	.word	0x40023800
 8009b60:	40020000 	.word	0x40020000

08009b64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	f7fe fb61 	bl	8008242 <USBD_LL_SetupStage>
}
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009b9a:	78fa      	ldrb	r2, [r7, #3]
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	78fb      	ldrb	r3, [r7, #3]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	f7fe fb9b 	bl	80082ec <USBD_LL_DataOutStage>
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009bd0:	78fa      	ldrb	r2, [r7, #3]
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	00db      	lsls	r3, r3, #3
 8009bd8:	4413      	add	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	440b      	add	r3, r1
 8009bde:	3320      	adds	r3, #32
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	78fb      	ldrb	r3, [r7, #3]
 8009be4:	4619      	mov	r1, r3
 8009be6:	f7fe fc34 	bl	8008452 <USBD_LL_DataInStage>
}
 8009bea:	bf00      	nop
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe fd6e 	bl	80086e2 <USBD_LL_SOF>
}
 8009c06:	bf00      	nop
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c16:	2301      	movs	r3, #1
 8009c18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	79db      	ldrb	r3, [r3, #7]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d102      	bne.n	8009c28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009c22:	2300      	movs	r3, #0
 8009c24:	73fb      	strb	r3, [r7, #15]
 8009c26:	e008      	b.n	8009c3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	79db      	ldrb	r3, [r3, #7]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d102      	bne.n	8009c36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009c30:	2301      	movs	r3, #1
 8009c32:	73fb      	strb	r3, [r7, #15]
 8009c34:	e001      	b.n	8009c3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009c36:	f7f7 fccf 	bl	80015d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c40:	7bfa      	ldrb	r2, [r7, #15]
 8009c42:	4611      	mov	r1, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe fd08 	bl	800865a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fcb0 	bl	80085b6 <USBD_LL_Reset>
}
 8009c56:	bf00      	nop
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe fd03 	bl	800867a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	6812      	ldr	r2, [r2, #0]
 8009c82:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009c86:	f043 0301 	orr.w	r3, r3, #1
 8009c8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	7adb      	ldrb	r3, [r3, #11]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c94:	4b04      	ldr	r3, [pc, #16]	@ (8009ca8 <HAL_PCD_SuspendCallback+0x48>)
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	4a03      	ldr	r2, [pc, #12]	@ (8009ca8 <HAL_PCD_SuspendCallback+0x48>)
 8009c9a:	f043 0306 	orr.w	r3, r3, #6
 8009c9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	e000ed00 	.word	0xe000ed00

08009cac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe fcf9 	bl	80086b2 <USBD_LL_Resume>
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cda:	78fa      	ldrb	r2, [r7, #3]
 8009cdc:	4611      	mov	r1, r2
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fe fd51 	bl	8008786 <USBD_LL_IsoOUTIncomplete>
}
 8009ce4:	bf00      	nop
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cfe:	78fa      	ldrb	r2, [r7, #3]
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe fd0d 	bl	8008722 <USBD_LL_IsoINIncomplete>
}
 8009d08:	bf00      	nop
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fd63 	bl	80087ea <USBD_LL_DevConnected>
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fe fd60 	bl	8008800 <USBD_LL_DevDisconnected>
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d13c      	bne.n	8009dd2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d58:	4a20      	ldr	r2, [pc, #128]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a1e      	ldr	r2, [pc, #120]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009d64:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d68:	4b1c      	ldr	r3, [pc, #112]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009d6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009d6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009d70:	4b1a      	ldr	r3, [pc, #104]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009d72:	2204      	movs	r2, #4
 8009d74:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d76:	4b19      	ldr	r3, [pc, #100]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009d78:	2202      	movs	r2, #2
 8009d7a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d7c:	4b17      	ldr	r3, [pc, #92]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d82:	4b16      	ldr	r3, [pc, #88]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009d84:	2202      	movs	r2, #2
 8009d86:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d88:	4b14      	ldr	r3, [pc, #80]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d8e:	4b13      	ldr	r3, [pc, #76]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009d94:	4b11      	ldr	r3, [pc, #68]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009d9a:	4b10      	ldr	r3, [pc, #64]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009da0:	4b0e      	ldr	r3, [pc, #56]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009da6:	480d      	ldr	r0, [pc, #52]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009da8:	f7f9 fb9a 	bl	80034e0 <HAL_PCD_Init>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009db2:	f7f7 fc11 	bl	80015d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009db6:	2180      	movs	r1, #128	@ 0x80
 8009db8:	4808      	ldr	r0, [pc, #32]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009dba:	f7fa fdc6 	bl	800494a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009dbe:	2240      	movs	r2, #64	@ 0x40
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4806      	ldr	r0, [pc, #24]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009dc4:	f7fa fd7a 	bl	80048bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009dc8:	2280      	movs	r2, #128	@ 0x80
 8009dca:	2101      	movs	r1, #1
 8009dcc:	4803      	ldr	r0, [pc, #12]	@ (8009ddc <USBD_LL_Init+0x94>)
 8009dce:	f7fa fd75 	bl	80048bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	20001c48 	.word	0x20001c48

08009de0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7f9 fc81 	bl	80036fe <HAL_PCD_Start>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 f942 	bl	800a08c <USBD_Get_USB_Status>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	4608      	mov	r0, r1
 8009e20:	4611      	mov	r1, r2
 8009e22:	461a      	mov	r2, r3
 8009e24:	4603      	mov	r3, r0
 8009e26:	70fb      	strb	r3, [r7, #3]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	70bb      	strb	r3, [r7, #2]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009e3e:	78bb      	ldrb	r3, [r7, #2]
 8009e40:	883a      	ldrh	r2, [r7, #0]
 8009e42:	78f9      	ldrb	r1, [r7, #3]
 8009e44:	f7fa f955 	bl	80040f2 <HAL_PCD_EP_Open>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 f91c 	bl	800a08c <USBD_Get_USB_Status>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e7c:	78fa      	ldrb	r2, [r7, #3]
 8009e7e:	4611      	mov	r1, r2
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fa f9a0 	bl	80041c6 <HAL_PCD_EP_Close>
 8009e86:	4603      	mov	r3, r0
 8009e88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 f8fd 	bl	800a08c <USBD_Get_USB_Status>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009eba:	78fa      	ldrb	r2, [r7, #3]
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fa fa58 	bl	8004374 <HAL_PCD_EP_SetStall>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 f8de 	bl	800a08c <USBD_Get_USB_Status>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b084      	sub	sp, #16
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ef8:	78fa      	ldrb	r2, [r7, #3]
 8009efa:	4611      	mov	r1, r2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fa fa9c 	bl	800443a <HAL_PCD_EP_ClrStall>
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 f8bf 	bl	800a08c <USBD_Get_USB_Status>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	460b      	mov	r3, r1
 8009f26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	da0b      	bge.n	8009f50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f3e:	68f9      	ldr	r1, [r7, #12]
 8009f40:	4613      	mov	r3, r2
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	4413      	add	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	440b      	add	r3, r1
 8009f4a:	3316      	adds	r3, #22
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	e00b      	b.n	8009f68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f56:	68f9      	ldr	r1, [r7, #12]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	4413      	add	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	440b      	add	r3, r1
 8009f62:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009f66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f8e:	78fa      	ldrb	r2, [r7, #3]
 8009f90:	4611      	mov	r1, r2
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fa f889 	bl	80040aa <HAL_PCD_SetAddress>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 f874 	bl	800a08c <USBD_Get_USB_Status>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b086      	sub	sp, #24
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009fd0:	7af9      	ldrb	r1, [r7, #11]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	f7fa f993 	bl	8004300 <HAL_PCD_EP_Transmit>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 f853 	bl	800a08c <USBD_Get_USB_Status>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fea:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	607a      	str	r2, [r7, #4]
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	460b      	mov	r3, r1
 800a002:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a012:	7af9      	ldrb	r1, [r7, #11]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	f7fa f91f 	bl	800425a <HAL_PCD_EP_Receive>
 800a01c:	4603      	mov	r3, r0
 800a01e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f832 	bl	800a08c <USBD_Get_USB_Status>
 800a028:	4603      	mov	r3, r0
 800a02a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a02c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	460b      	mov	r3, r1
 800a040:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a048:	78fa      	ldrb	r2, [r7, #3]
 800a04a:	4611      	mov	r1, r2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fa f93f 	bl	80042d0 <HAL_PCD_EP_GetRxCount>
 800a052:	4603      	mov	r3, r0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a064:	4b03      	ldr	r3, [pc, #12]	@ (800a074 <USBD_static_malloc+0x18>)
}
 800a066:	4618      	mov	r0, r3
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	2000212c 	.word	0x2000212c

0800a078 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]

}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	4603      	mov	r3, r0
 800a094:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a09a:	79fb      	ldrb	r3, [r7, #7]
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d817      	bhi.n	800a0d0 <USBD_Get_USB_Status+0x44>
 800a0a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a8 <USBD_Get_USB_Status+0x1c>)
 800a0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a6:	bf00      	nop
 800a0a8:	0800a0b9 	.word	0x0800a0b9
 800a0ac:	0800a0bf 	.word	0x0800a0bf
 800a0b0:	0800a0c5 	.word	0x0800a0c5
 800a0b4:	0800a0cb 	.word	0x0800a0cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a0bc:	e00b      	b.n	800a0d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c2:	e008      	b.n	800a0d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c8:	e005      	b.n	800a0d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ce:	e002      	b.n	800a0d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d4:	bf00      	nop
  }
  return usb_status;
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <memset>:
 800a0e4:	4402      	add	r2, r0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d100      	bne.n	800a0ee <memset+0xa>
 800a0ec:	4770      	bx	lr
 800a0ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a0f2:	e7f9      	b.n	800a0e8 <memset+0x4>

0800a0f4 <__libc_init_array>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	4d0d      	ldr	r5, [pc, #52]	@ (800a12c <__libc_init_array+0x38>)
 800a0f8:	4c0d      	ldr	r4, [pc, #52]	@ (800a130 <__libc_init_array+0x3c>)
 800a0fa:	1b64      	subs	r4, r4, r5
 800a0fc:	10a4      	asrs	r4, r4, #2
 800a0fe:	2600      	movs	r6, #0
 800a100:	42a6      	cmp	r6, r4
 800a102:	d109      	bne.n	800a118 <__libc_init_array+0x24>
 800a104:	4d0b      	ldr	r5, [pc, #44]	@ (800a134 <__libc_init_array+0x40>)
 800a106:	4c0c      	ldr	r4, [pc, #48]	@ (800a138 <__libc_init_array+0x44>)
 800a108:	f001 f84a 	bl	800b1a0 <_init>
 800a10c:	1b64      	subs	r4, r4, r5
 800a10e:	10a4      	asrs	r4, r4, #2
 800a110:	2600      	movs	r6, #0
 800a112:	42a6      	cmp	r6, r4
 800a114:	d105      	bne.n	800a122 <__libc_init_array+0x2e>
 800a116:	bd70      	pop	{r4, r5, r6, pc}
 800a118:	f855 3b04 	ldr.w	r3, [r5], #4
 800a11c:	4798      	blx	r3
 800a11e:	3601      	adds	r6, #1
 800a120:	e7ee      	b.n	800a100 <__libc_init_array+0xc>
 800a122:	f855 3b04 	ldr.w	r3, [r5], #4
 800a126:	4798      	blx	r3
 800a128:	3601      	adds	r6, #1
 800a12a:	e7f2      	b.n	800a112 <__libc_init_array+0x1e>
 800a12c:	0800b400 	.word	0x0800b400
 800a130:	0800b400 	.word	0x0800b400
 800a134:	0800b400 	.word	0x0800b400
 800a138:	0800b404 	.word	0x0800b404
 800a13c:	00000000 	.word	0x00000000

0800a140 <sin>:
 800a140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a142:	ec53 2b10 	vmov	r2, r3, d0
 800a146:	4826      	ldr	r0, [pc, #152]	@ (800a1e0 <sin+0xa0>)
 800a148:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a14c:	4281      	cmp	r1, r0
 800a14e:	d807      	bhi.n	800a160 <sin+0x20>
 800a150:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a1d8 <sin+0x98>
 800a154:	2000      	movs	r0, #0
 800a156:	b005      	add	sp, #20
 800a158:	f85d eb04 	ldr.w	lr, [sp], #4
 800a15c:	f000 b90c 	b.w	800a378 <__kernel_sin>
 800a160:	4820      	ldr	r0, [pc, #128]	@ (800a1e4 <sin+0xa4>)
 800a162:	4281      	cmp	r1, r0
 800a164:	d908      	bls.n	800a178 <sin+0x38>
 800a166:	4610      	mov	r0, r2
 800a168:	4619      	mov	r1, r3
 800a16a:	f7f6 f831 	bl	80001d0 <__aeabi_dsub>
 800a16e:	ec41 0b10 	vmov	d0, r0, r1
 800a172:	b005      	add	sp, #20
 800a174:	f85d fb04 	ldr.w	pc, [sp], #4
 800a178:	4668      	mov	r0, sp
 800a17a:	f000 f9b9 	bl	800a4f0 <__ieee754_rem_pio2>
 800a17e:	f000 0003 	and.w	r0, r0, #3
 800a182:	2801      	cmp	r0, #1
 800a184:	d00c      	beq.n	800a1a0 <sin+0x60>
 800a186:	2802      	cmp	r0, #2
 800a188:	d011      	beq.n	800a1ae <sin+0x6e>
 800a18a:	b9e8      	cbnz	r0, 800a1c8 <sin+0x88>
 800a18c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a190:	ed9d 0b00 	vldr	d0, [sp]
 800a194:	2001      	movs	r0, #1
 800a196:	f000 f8ef 	bl	800a378 <__kernel_sin>
 800a19a:	ec51 0b10 	vmov	r0, r1, d0
 800a19e:	e7e6      	b.n	800a16e <sin+0x2e>
 800a1a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1a4:	ed9d 0b00 	vldr	d0, [sp]
 800a1a8:	f000 f81e 	bl	800a1e8 <__kernel_cos>
 800a1ac:	e7f5      	b.n	800a19a <sin+0x5a>
 800a1ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1b2:	ed9d 0b00 	vldr	d0, [sp]
 800a1b6:	2001      	movs	r0, #1
 800a1b8:	f000 f8de 	bl	800a378 <__kernel_sin>
 800a1bc:	ec53 2b10 	vmov	r2, r3, d0
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a1c6:	e7d2      	b.n	800a16e <sin+0x2e>
 800a1c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1cc:	ed9d 0b00 	vldr	d0, [sp]
 800a1d0:	f000 f80a 	bl	800a1e8 <__kernel_cos>
 800a1d4:	e7f2      	b.n	800a1bc <sin+0x7c>
 800a1d6:	bf00      	nop
	...
 800a1e0:	3fe921fb 	.word	0x3fe921fb
 800a1e4:	7fefffff 	.word	0x7fefffff

0800a1e8 <__kernel_cos>:
 800a1e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	ec57 6b10 	vmov	r6, r7, d0
 800a1f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a1f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a1f8:	ed8d 1b00 	vstr	d1, [sp]
 800a1fc:	d206      	bcs.n	800a20c <__kernel_cos+0x24>
 800a1fe:	4630      	mov	r0, r6
 800a200:	4639      	mov	r1, r7
 800a202:	f7f6 fc37 	bl	8000a74 <__aeabi_d2iz>
 800a206:	2800      	cmp	r0, #0
 800a208:	f000 8088 	beq.w	800a31c <__kernel_cos+0x134>
 800a20c:	4632      	mov	r2, r6
 800a20e:	463b      	mov	r3, r7
 800a210:	4630      	mov	r0, r6
 800a212:	4639      	mov	r1, r7
 800a214:	f7f6 f994 	bl	8000540 <__aeabi_dmul>
 800a218:	4b51      	ldr	r3, [pc, #324]	@ (800a360 <__kernel_cos+0x178>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	4604      	mov	r4, r0
 800a21e:	460d      	mov	r5, r1
 800a220:	f7f6 f98e 	bl	8000540 <__aeabi_dmul>
 800a224:	a340      	add	r3, pc, #256	@ (adr r3, 800a328 <__kernel_cos+0x140>)
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	4682      	mov	sl, r0
 800a22c:	468b      	mov	fp, r1
 800a22e:	4620      	mov	r0, r4
 800a230:	4629      	mov	r1, r5
 800a232:	f7f6 f985 	bl	8000540 <__aeabi_dmul>
 800a236:	a33e      	add	r3, pc, #248	@ (adr r3, 800a330 <__kernel_cos+0x148>)
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	f7f5 ffca 	bl	80001d4 <__adddf3>
 800a240:	4622      	mov	r2, r4
 800a242:	462b      	mov	r3, r5
 800a244:	f7f6 f97c 	bl	8000540 <__aeabi_dmul>
 800a248:	a33b      	add	r3, pc, #236	@ (adr r3, 800a338 <__kernel_cos+0x150>)
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	f7f5 ffbf 	bl	80001d0 <__aeabi_dsub>
 800a252:	4622      	mov	r2, r4
 800a254:	462b      	mov	r3, r5
 800a256:	f7f6 f973 	bl	8000540 <__aeabi_dmul>
 800a25a:	a339      	add	r3, pc, #228	@ (adr r3, 800a340 <__kernel_cos+0x158>)
 800a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a260:	f7f5 ffb8 	bl	80001d4 <__adddf3>
 800a264:	4622      	mov	r2, r4
 800a266:	462b      	mov	r3, r5
 800a268:	f7f6 f96a 	bl	8000540 <__aeabi_dmul>
 800a26c:	a336      	add	r3, pc, #216	@ (adr r3, 800a348 <__kernel_cos+0x160>)
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	f7f5 ffad 	bl	80001d0 <__aeabi_dsub>
 800a276:	4622      	mov	r2, r4
 800a278:	462b      	mov	r3, r5
 800a27a:	f7f6 f961 	bl	8000540 <__aeabi_dmul>
 800a27e:	a334      	add	r3, pc, #208	@ (adr r3, 800a350 <__kernel_cos+0x168>)
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	f7f5 ffa6 	bl	80001d4 <__adddf3>
 800a288:	4622      	mov	r2, r4
 800a28a:	462b      	mov	r3, r5
 800a28c:	f7f6 f958 	bl	8000540 <__aeabi_dmul>
 800a290:	4622      	mov	r2, r4
 800a292:	462b      	mov	r3, r5
 800a294:	f7f6 f954 	bl	8000540 <__aeabi_dmul>
 800a298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a29c:	4604      	mov	r4, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	f7f6 f94c 	bl	8000540 <__aeabi_dmul>
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f7f5 ff8e 	bl	80001d0 <__aeabi_dsub>
 800a2b4:	4b2b      	ldr	r3, [pc, #172]	@ (800a364 <__kernel_cos+0x17c>)
 800a2b6:	4598      	cmp	r8, r3
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	460f      	mov	r7, r1
 800a2bc:	d810      	bhi.n	800a2e0 <__kernel_cos+0xf8>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4650      	mov	r0, sl
 800a2c4:	4659      	mov	r1, fp
 800a2c6:	f7f5 ff83 	bl	80001d0 <__aeabi_dsub>
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4926      	ldr	r1, [pc, #152]	@ (800a368 <__kernel_cos+0x180>)
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	f7f5 ff7d 	bl	80001d0 <__aeabi_dsub>
 800a2d6:	ec41 0b10 	vmov	d0, r0, r1
 800a2da:	b003      	add	sp, #12
 800a2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e0:	4b22      	ldr	r3, [pc, #136]	@ (800a36c <__kernel_cos+0x184>)
 800a2e2:	4921      	ldr	r1, [pc, #132]	@ (800a368 <__kernel_cos+0x180>)
 800a2e4:	4598      	cmp	r8, r3
 800a2e6:	bf8c      	ite	hi
 800a2e8:	4d21      	ldrhi	r5, [pc, #132]	@ (800a370 <__kernel_cos+0x188>)
 800a2ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a2ee:	2400      	movs	r4, #0
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	462b      	mov	r3, r5
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	f7f5 ff6b 	bl	80001d0 <__aeabi_dsub>
 800a2fa:	4622      	mov	r2, r4
 800a2fc:	4680      	mov	r8, r0
 800a2fe:	4689      	mov	r9, r1
 800a300:	462b      	mov	r3, r5
 800a302:	4650      	mov	r0, sl
 800a304:	4659      	mov	r1, fp
 800a306:	f7f5 ff63 	bl	80001d0 <__aeabi_dsub>
 800a30a:	4632      	mov	r2, r6
 800a30c:	463b      	mov	r3, r7
 800a30e:	f7f5 ff5f 	bl	80001d0 <__aeabi_dsub>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	4640      	mov	r0, r8
 800a318:	4649      	mov	r1, r9
 800a31a:	e7da      	b.n	800a2d2 <__kernel_cos+0xea>
 800a31c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a358 <__kernel_cos+0x170>
 800a320:	e7db      	b.n	800a2da <__kernel_cos+0xf2>
 800a322:	bf00      	nop
 800a324:	f3af 8000 	nop.w
 800a328:	be8838d4 	.word	0xbe8838d4
 800a32c:	bda8fae9 	.word	0xbda8fae9
 800a330:	bdb4b1c4 	.word	0xbdb4b1c4
 800a334:	3e21ee9e 	.word	0x3e21ee9e
 800a338:	809c52ad 	.word	0x809c52ad
 800a33c:	3e927e4f 	.word	0x3e927e4f
 800a340:	19cb1590 	.word	0x19cb1590
 800a344:	3efa01a0 	.word	0x3efa01a0
 800a348:	16c15177 	.word	0x16c15177
 800a34c:	3f56c16c 	.word	0x3f56c16c
 800a350:	5555554c 	.word	0x5555554c
 800a354:	3fa55555 	.word	0x3fa55555
 800a358:	00000000 	.word	0x00000000
 800a35c:	3ff00000 	.word	0x3ff00000
 800a360:	3fe00000 	.word	0x3fe00000
 800a364:	3fd33332 	.word	0x3fd33332
 800a368:	3ff00000 	.word	0x3ff00000
 800a36c:	3fe90000 	.word	0x3fe90000
 800a370:	3fd20000 	.word	0x3fd20000
 800a374:	00000000 	.word	0x00000000

0800a378 <__kernel_sin>:
 800a378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37c:	ec55 4b10 	vmov	r4, r5, d0
 800a380:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a384:	b085      	sub	sp, #20
 800a386:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a38a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a38e:	4680      	mov	r8, r0
 800a390:	d205      	bcs.n	800a39e <__kernel_sin+0x26>
 800a392:	4620      	mov	r0, r4
 800a394:	4629      	mov	r1, r5
 800a396:	f7f6 fb6d 	bl	8000a74 <__aeabi_d2iz>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d052      	beq.n	800a444 <__kernel_sin+0xcc>
 800a39e:	4622      	mov	r2, r4
 800a3a0:	462b      	mov	r3, r5
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	f7f6 f8cb 	bl	8000540 <__aeabi_dmul>
 800a3aa:	4682      	mov	sl, r0
 800a3ac:	468b      	mov	fp, r1
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	f7f6 f8c3 	bl	8000540 <__aeabi_dmul>
 800a3ba:	a342      	add	r3, pc, #264	@ (adr r3, 800a4c4 <__kernel_sin+0x14c>)
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	e9cd 0100 	strd	r0, r1, [sp]
 800a3c4:	4650      	mov	r0, sl
 800a3c6:	4659      	mov	r1, fp
 800a3c8:	f7f6 f8ba 	bl	8000540 <__aeabi_dmul>
 800a3cc:	a33f      	add	r3, pc, #252	@ (adr r3, 800a4cc <__kernel_sin+0x154>)
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f7f5 fefd 	bl	80001d0 <__aeabi_dsub>
 800a3d6:	4652      	mov	r2, sl
 800a3d8:	465b      	mov	r3, fp
 800a3da:	f7f6 f8b1 	bl	8000540 <__aeabi_dmul>
 800a3de:	a33d      	add	r3, pc, #244	@ (adr r3, 800a4d4 <__kernel_sin+0x15c>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f5 fef6 	bl	80001d4 <__adddf3>
 800a3e8:	4652      	mov	r2, sl
 800a3ea:	465b      	mov	r3, fp
 800a3ec:	f7f6 f8a8 	bl	8000540 <__aeabi_dmul>
 800a3f0:	a33a      	add	r3, pc, #232	@ (adr r3, 800a4dc <__kernel_sin+0x164>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	f7f5 feeb 	bl	80001d0 <__aeabi_dsub>
 800a3fa:	4652      	mov	r2, sl
 800a3fc:	465b      	mov	r3, fp
 800a3fe:	f7f6 f89f 	bl	8000540 <__aeabi_dmul>
 800a402:	a338      	add	r3, pc, #224	@ (adr r3, 800a4e4 <__kernel_sin+0x16c>)
 800a404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a408:	f7f5 fee4 	bl	80001d4 <__adddf3>
 800a40c:	4606      	mov	r6, r0
 800a40e:	460f      	mov	r7, r1
 800a410:	f1b8 0f00 	cmp.w	r8, #0
 800a414:	d11b      	bne.n	800a44e <__kernel_sin+0xd6>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4650      	mov	r0, sl
 800a41c:	4659      	mov	r1, fp
 800a41e:	f7f6 f88f 	bl	8000540 <__aeabi_dmul>
 800a422:	a325      	add	r3, pc, #148	@ (adr r3, 800a4b8 <__kernel_sin+0x140>)
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f7f5 fed2 	bl	80001d0 <__aeabi_dsub>
 800a42c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a430:	f7f6 f886 	bl	8000540 <__aeabi_dmul>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4620      	mov	r0, r4
 800a43a:	4629      	mov	r1, r5
 800a43c:	f7f5 feca 	bl	80001d4 <__adddf3>
 800a440:	4604      	mov	r4, r0
 800a442:	460d      	mov	r5, r1
 800a444:	ec45 4b10 	vmov	d0, r4, r5
 800a448:	b005      	add	sp, #20
 800a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a452:	4b1b      	ldr	r3, [pc, #108]	@ (800a4c0 <__kernel_sin+0x148>)
 800a454:	2200      	movs	r2, #0
 800a456:	f7f6 f873 	bl	8000540 <__aeabi_dmul>
 800a45a:	4632      	mov	r2, r6
 800a45c:	4680      	mov	r8, r0
 800a45e:	4689      	mov	r9, r1
 800a460:	463b      	mov	r3, r7
 800a462:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a466:	f7f6 f86b 	bl	8000540 <__aeabi_dmul>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	4640      	mov	r0, r8
 800a470:	4649      	mov	r1, r9
 800a472:	f7f5 fead 	bl	80001d0 <__aeabi_dsub>
 800a476:	4652      	mov	r2, sl
 800a478:	465b      	mov	r3, fp
 800a47a:	f7f6 f861 	bl	8000540 <__aeabi_dmul>
 800a47e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a482:	f7f5 fea5 	bl	80001d0 <__aeabi_dsub>
 800a486:	a30c      	add	r3, pc, #48	@ (adr r3, 800a4b8 <__kernel_sin+0x140>)
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	4606      	mov	r6, r0
 800a48e:	460f      	mov	r7, r1
 800a490:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a494:	f7f6 f854 	bl	8000540 <__aeabi_dmul>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	4630      	mov	r0, r6
 800a49e:	4639      	mov	r1, r7
 800a4a0:	f7f5 fe98 	bl	80001d4 <__adddf3>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	f7f5 fe90 	bl	80001d0 <__aeabi_dsub>
 800a4b0:	e7c6      	b.n	800a440 <__kernel_sin+0xc8>
 800a4b2:	bf00      	nop
 800a4b4:	f3af 8000 	nop.w
 800a4b8:	55555549 	.word	0x55555549
 800a4bc:	3fc55555 	.word	0x3fc55555
 800a4c0:	3fe00000 	.word	0x3fe00000
 800a4c4:	5acfd57c 	.word	0x5acfd57c
 800a4c8:	3de5d93a 	.word	0x3de5d93a
 800a4cc:	8a2b9ceb 	.word	0x8a2b9ceb
 800a4d0:	3e5ae5e6 	.word	0x3e5ae5e6
 800a4d4:	57b1fe7d 	.word	0x57b1fe7d
 800a4d8:	3ec71de3 	.word	0x3ec71de3
 800a4dc:	19c161d5 	.word	0x19c161d5
 800a4e0:	3f2a01a0 	.word	0x3f2a01a0
 800a4e4:	1110f8a6 	.word	0x1110f8a6
 800a4e8:	3f811111 	.word	0x3f811111
 800a4ec:	00000000 	.word	0x00000000

0800a4f0 <__ieee754_rem_pio2>:
 800a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	ec57 6b10 	vmov	r6, r7, d0
 800a4f8:	4bc5      	ldr	r3, [pc, #788]	@ (800a810 <__ieee754_rem_pio2+0x320>)
 800a4fa:	b08d      	sub	sp, #52	@ 0x34
 800a4fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a500:	4598      	cmp	r8, r3
 800a502:	4604      	mov	r4, r0
 800a504:	9704      	str	r7, [sp, #16]
 800a506:	d807      	bhi.n	800a518 <__ieee754_rem_pio2+0x28>
 800a508:	2200      	movs	r2, #0
 800a50a:	2300      	movs	r3, #0
 800a50c:	ed80 0b00 	vstr	d0, [r0]
 800a510:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a514:	2500      	movs	r5, #0
 800a516:	e028      	b.n	800a56a <__ieee754_rem_pio2+0x7a>
 800a518:	4bbe      	ldr	r3, [pc, #760]	@ (800a814 <__ieee754_rem_pio2+0x324>)
 800a51a:	4598      	cmp	r8, r3
 800a51c:	d878      	bhi.n	800a610 <__ieee754_rem_pio2+0x120>
 800a51e:	9b04      	ldr	r3, [sp, #16]
 800a520:	4dbd      	ldr	r5, [pc, #756]	@ (800a818 <__ieee754_rem_pio2+0x328>)
 800a522:	2b00      	cmp	r3, #0
 800a524:	4630      	mov	r0, r6
 800a526:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a7d8 <__ieee754_rem_pio2+0x2e8>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	4639      	mov	r1, r7
 800a52e:	dd38      	ble.n	800a5a2 <__ieee754_rem_pio2+0xb2>
 800a530:	f7f5 fe4e 	bl	80001d0 <__aeabi_dsub>
 800a534:	45a8      	cmp	r8, r5
 800a536:	4606      	mov	r6, r0
 800a538:	460f      	mov	r7, r1
 800a53a:	d01a      	beq.n	800a572 <__ieee754_rem_pio2+0x82>
 800a53c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a7e0 <__ieee754_rem_pio2+0x2f0>)
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	f7f5 fe45 	bl	80001d0 <__aeabi_dsub>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	4680      	mov	r8, r0
 800a54c:	4689      	mov	r9, r1
 800a54e:	4630      	mov	r0, r6
 800a550:	4639      	mov	r1, r7
 800a552:	f7f5 fe3d 	bl	80001d0 <__aeabi_dsub>
 800a556:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a7e0 <__ieee754_rem_pio2+0x2f0>)
 800a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55c:	f7f5 fe38 	bl	80001d0 <__aeabi_dsub>
 800a560:	e9c4 8900 	strd	r8, r9, [r4]
 800a564:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a568:	2501      	movs	r5, #1
 800a56a:	4628      	mov	r0, r5
 800a56c:	b00d      	add	sp, #52	@ 0x34
 800a56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a572:	a39d      	add	r3, pc, #628	@ (adr r3, 800a7e8 <__ieee754_rem_pio2+0x2f8>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f7f5 fe2a 	bl	80001d0 <__aeabi_dsub>
 800a57c:	a39c      	add	r3, pc, #624	@ (adr r3, 800a7f0 <__ieee754_rem_pio2+0x300>)
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	4606      	mov	r6, r0
 800a584:	460f      	mov	r7, r1
 800a586:	f7f5 fe23 	bl	80001d0 <__aeabi_dsub>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	4680      	mov	r8, r0
 800a590:	4689      	mov	r9, r1
 800a592:	4630      	mov	r0, r6
 800a594:	4639      	mov	r1, r7
 800a596:	f7f5 fe1b 	bl	80001d0 <__aeabi_dsub>
 800a59a:	a395      	add	r3, pc, #596	@ (adr r3, 800a7f0 <__ieee754_rem_pio2+0x300>)
 800a59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a0:	e7dc      	b.n	800a55c <__ieee754_rem_pio2+0x6c>
 800a5a2:	f7f5 fe17 	bl	80001d4 <__adddf3>
 800a5a6:	45a8      	cmp	r8, r5
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	460f      	mov	r7, r1
 800a5ac:	d018      	beq.n	800a5e0 <__ieee754_rem_pio2+0xf0>
 800a5ae:	a38c      	add	r3, pc, #560	@ (adr r3, 800a7e0 <__ieee754_rem_pio2+0x2f0>)
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f7f5 fe0e 	bl	80001d4 <__adddf3>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4680      	mov	r8, r0
 800a5be:	4689      	mov	r9, r1
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f5 fe04 	bl	80001d0 <__aeabi_dsub>
 800a5c8:	a385      	add	r3, pc, #532	@ (adr r3, 800a7e0 <__ieee754_rem_pio2+0x2f0>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f7f5 fe01 	bl	80001d4 <__adddf3>
 800a5d2:	f04f 35ff 	mov.w	r5, #4294967295
 800a5d6:	e9c4 8900 	strd	r8, r9, [r4]
 800a5da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a5de:	e7c4      	b.n	800a56a <__ieee754_rem_pio2+0x7a>
 800a5e0:	a381      	add	r3, pc, #516	@ (adr r3, 800a7e8 <__ieee754_rem_pio2+0x2f8>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f5 fdf5 	bl	80001d4 <__adddf3>
 800a5ea:	a381      	add	r3, pc, #516	@ (adr r3, 800a7f0 <__ieee754_rem_pio2+0x300>)
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	4606      	mov	r6, r0
 800a5f2:	460f      	mov	r7, r1
 800a5f4:	f7f5 fdee 	bl	80001d4 <__adddf3>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4680      	mov	r8, r0
 800a5fe:	4689      	mov	r9, r1
 800a600:	4630      	mov	r0, r6
 800a602:	4639      	mov	r1, r7
 800a604:	f7f5 fde4 	bl	80001d0 <__aeabi_dsub>
 800a608:	a379      	add	r3, pc, #484	@ (adr r3, 800a7f0 <__ieee754_rem_pio2+0x300>)
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	e7de      	b.n	800a5ce <__ieee754_rem_pio2+0xde>
 800a610:	4b82      	ldr	r3, [pc, #520]	@ (800a81c <__ieee754_rem_pio2+0x32c>)
 800a612:	4598      	cmp	r8, r3
 800a614:	f200 80d1 	bhi.w	800a7ba <__ieee754_rem_pio2+0x2ca>
 800a618:	f000 f966 	bl	800a8e8 <fabs>
 800a61c:	ec57 6b10 	vmov	r6, r7, d0
 800a620:	a375      	add	r3, pc, #468	@ (adr r3, 800a7f8 <__ieee754_rem_pio2+0x308>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	4630      	mov	r0, r6
 800a628:	4639      	mov	r1, r7
 800a62a:	f7f5 ff89 	bl	8000540 <__aeabi_dmul>
 800a62e:	4b7c      	ldr	r3, [pc, #496]	@ (800a820 <__ieee754_rem_pio2+0x330>)
 800a630:	2200      	movs	r2, #0
 800a632:	f7f5 fdcf 	bl	80001d4 <__adddf3>
 800a636:	f7f6 fa1d 	bl	8000a74 <__aeabi_d2iz>
 800a63a:	4605      	mov	r5, r0
 800a63c:	f7f5 ff16 	bl	800046c <__aeabi_i2d>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a648:	a363      	add	r3, pc, #396	@ (adr r3, 800a7d8 <__ieee754_rem_pio2+0x2e8>)
 800a64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64e:	f7f5 ff77 	bl	8000540 <__aeabi_dmul>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	4630      	mov	r0, r6
 800a658:	4639      	mov	r1, r7
 800a65a:	f7f5 fdb9 	bl	80001d0 <__aeabi_dsub>
 800a65e:	a360      	add	r3, pc, #384	@ (adr r3, 800a7e0 <__ieee754_rem_pio2+0x2f0>)
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	4682      	mov	sl, r0
 800a666:	468b      	mov	fp, r1
 800a668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a66c:	f7f5 ff68 	bl	8000540 <__aeabi_dmul>
 800a670:	2d1f      	cmp	r5, #31
 800a672:	4606      	mov	r6, r0
 800a674:	460f      	mov	r7, r1
 800a676:	dc0c      	bgt.n	800a692 <__ieee754_rem_pio2+0x1a2>
 800a678:	4b6a      	ldr	r3, [pc, #424]	@ (800a824 <__ieee754_rem_pio2+0x334>)
 800a67a:	1e6a      	subs	r2, r5, #1
 800a67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a680:	4543      	cmp	r3, r8
 800a682:	d006      	beq.n	800a692 <__ieee754_rem_pio2+0x1a2>
 800a684:	4632      	mov	r2, r6
 800a686:	463b      	mov	r3, r7
 800a688:	4650      	mov	r0, sl
 800a68a:	4659      	mov	r1, fp
 800a68c:	f7f5 fda0 	bl	80001d0 <__aeabi_dsub>
 800a690:	e00e      	b.n	800a6b0 <__ieee754_rem_pio2+0x1c0>
 800a692:	463b      	mov	r3, r7
 800a694:	4632      	mov	r2, r6
 800a696:	4650      	mov	r0, sl
 800a698:	4659      	mov	r1, fp
 800a69a:	f7f5 fd99 	bl	80001d0 <__aeabi_dsub>
 800a69e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a6a2:	9305      	str	r3, [sp, #20]
 800a6a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a6a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a6ac:	2b10      	cmp	r3, #16
 800a6ae:	dc02      	bgt.n	800a6b6 <__ieee754_rem_pio2+0x1c6>
 800a6b0:	e9c4 0100 	strd	r0, r1, [r4]
 800a6b4:	e039      	b.n	800a72a <__ieee754_rem_pio2+0x23a>
 800a6b6:	a34c      	add	r3, pc, #304	@ (adr r3, 800a7e8 <__ieee754_rem_pio2+0x2f8>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6c0:	f7f5 ff3e 	bl	8000540 <__aeabi_dmul>
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	460f      	mov	r7, r1
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4650      	mov	r0, sl
 800a6ce:	4659      	mov	r1, fp
 800a6d0:	f7f5 fd7e 	bl	80001d0 <__aeabi_dsub>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4680      	mov	r8, r0
 800a6da:	4689      	mov	r9, r1
 800a6dc:	4650      	mov	r0, sl
 800a6de:	4659      	mov	r1, fp
 800a6e0:	f7f5 fd76 	bl	80001d0 <__aeabi_dsub>
 800a6e4:	4632      	mov	r2, r6
 800a6e6:	463b      	mov	r3, r7
 800a6e8:	f7f5 fd72 	bl	80001d0 <__aeabi_dsub>
 800a6ec:	a340      	add	r3, pc, #256	@ (adr r3, 800a7f0 <__ieee754_rem_pio2+0x300>)
 800a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	460f      	mov	r7, r1
 800a6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6fa:	f7f5 ff21 	bl	8000540 <__aeabi_dmul>
 800a6fe:	4632      	mov	r2, r6
 800a700:	463b      	mov	r3, r7
 800a702:	f7f5 fd65 	bl	80001d0 <__aeabi_dsub>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	4606      	mov	r6, r0
 800a70c:	460f      	mov	r7, r1
 800a70e:	4640      	mov	r0, r8
 800a710:	4649      	mov	r1, r9
 800a712:	f7f5 fd5d 	bl	80001d0 <__aeabi_dsub>
 800a716:	9a05      	ldr	r2, [sp, #20]
 800a718:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	2b31      	cmp	r3, #49	@ 0x31
 800a720:	dc20      	bgt.n	800a764 <__ieee754_rem_pio2+0x274>
 800a722:	e9c4 0100 	strd	r0, r1, [r4]
 800a726:	46c2      	mov	sl, r8
 800a728:	46cb      	mov	fp, r9
 800a72a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a72e:	4650      	mov	r0, sl
 800a730:	4642      	mov	r2, r8
 800a732:	464b      	mov	r3, r9
 800a734:	4659      	mov	r1, fp
 800a736:	f7f5 fd4b 	bl	80001d0 <__aeabi_dsub>
 800a73a:	463b      	mov	r3, r7
 800a73c:	4632      	mov	r2, r6
 800a73e:	f7f5 fd47 	bl	80001d0 <__aeabi_dsub>
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	2b00      	cmp	r3, #0
 800a746:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a74a:	f6bf af0e 	bge.w	800a56a <__ieee754_rem_pio2+0x7a>
 800a74e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a752:	6063      	str	r3, [r4, #4]
 800a754:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a758:	f8c4 8000 	str.w	r8, [r4]
 800a75c:	60a0      	str	r0, [r4, #8]
 800a75e:	60e3      	str	r3, [r4, #12]
 800a760:	426d      	negs	r5, r5
 800a762:	e702      	b.n	800a56a <__ieee754_rem_pio2+0x7a>
 800a764:	a326      	add	r3, pc, #152	@ (adr r3, 800a800 <__ieee754_rem_pio2+0x310>)
 800a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a76e:	f7f5 fee7 	bl	8000540 <__aeabi_dmul>
 800a772:	4606      	mov	r6, r0
 800a774:	460f      	mov	r7, r1
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4640      	mov	r0, r8
 800a77c:	4649      	mov	r1, r9
 800a77e:	f7f5 fd27 	bl	80001d0 <__aeabi_dsub>
 800a782:	4602      	mov	r2, r0
 800a784:	460b      	mov	r3, r1
 800a786:	4682      	mov	sl, r0
 800a788:	468b      	mov	fp, r1
 800a78a:	4640      	mov	r0, r8
 800a78c:	4649      	mov	r1, r9
 800a78e:	f7f5 fd1f 	bl	80001d0 <__aeabi_dsub>
 800a792:	4632      	mov	r2, r6
 800a794:	463b      	mov	r3, r7
 800a796:	f7f5 fd1b 	bl	80001d0 <__aeabi_dsub>
 800a79a:	a31b      	add	r3, pc, #108	@ (adr r3, 800a808 <__ieee754_rem_pio2+0x318>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	460f      	mov	r7, r1
 800a7a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7a8:	f7f5 feca 	bl	8000540 <__aeabi_dmul>
 800a7ac:	4632      	mov	r2, r6
 800a7ae:	463b      	mov	r3, r7
 800a7b0:	f7f5 fd0e 	bl	80001d0 <__aeabi_dsub>
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	460f      	mov	r7, r1
 800a7b8:	e764      	b.n	800a684 <__ieee754_rem_pio2+0x194>
 800a7ba:	4b1b      	ldr	r3, [pc, #108]	@ (800a828 <__ieee754_rem_pio2+0x338>)
 800a7bc:	4598      	cmp	r8, r3
 800a7be:	d935      	bls.n	800a82c <__ieee754_rem_pio2+0x33c>
 800a7c0:	4632      	mov	r2, r6
 800a7c2:	463b      	mov	r3, r7
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	4639      	mov	r1, r7
 800a7c8:	f7f5 fd02 	bl	80001d0 <__aeabi_dsub>
 800a7cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7d0:	e9c4 0100 	strd	r0, r1, [r4]
 800a7d4:	e69e      	b.n	800a514 <__ieee754_rem_pio2+0x24>
 800a7d6:	bf00      	nop
 800a7d8:	54400000 	.word	0x54400000
 800a7dc:	3ff921fb 	.word	0x3ff921fb
 800a7e0:	1a626331 	.word	0x1a626331
 800a7e4:	3dd0b461 	.word	0x3dd0b461
 800a7e8:	1a600000 	.word	0x1a600000
 800a7ec:	3dd0b461 	.word	0x3dd0b461
 800a7f0:	2e037073 	.word	0x2e037073
 800a7f4:	3ba3198a 	.word	0x3ba3198a
 800a7f8:	6dc9c883 	.word	0x6dc9c883
 800a7fc:	3fe45f30 	.word	0x3fe45f30
 800a800:	2e000000 	.word	0x2e000000
 800a804:	3ba3198a 	.word	0x3ba3198a
 800a808:	252049c1 	.word	0x252049c1
 800a80c:	397b839a 	.word	0x397b839a
 800a810:	3fe921fb 	.word	0x3fe921fb
 800a814:	4002d97b 	.word	0x4002d97b
 800a818:	3ff921fb 	.word	0x3ff921fb
 800a81c:	413921fb 	.word	0x413921fb
 800a820:	3fe00000 	.word	0x3fe00000
 800a824:	0800b220 	.word	0x0800b220
 800a828:	7fefffff 	.word	0x7fefffff
 800a82c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a830:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a834:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a838:	4630      	mov	r0, r6
 800a83a:	460f      	mov	r7, r1
 800a83c:	f7f6 f91a 	bl	8000a74 <__aeabi_d2iz>
 800a840:	f7f5 fe14 	bl	800046c <__aeabi_i2d>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4630      	mov	r0, r6
 800a84a:	4639      	mov	r1, r7
 800a84c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a850:	f7f5 fcbe 	bl	80001d0 <__aeabi_dsub>
 800a854:	4b22      	ldr	r3, [pc, #136]	@ (800a8e0 <__ieee754_rem_pio2+0x3f0>)
 800a856:	2200      	movs	r2, #0
 800a858:	f7f5 fe72 	bl	8000540 <__aeabi_dmul>
 800a85c:	460f      	mov	r7, r1
 800a85e:	4606      	mov	r6, r0
 800a860:	f7f6 f908 	bl	8000a74 <__aeabi_d2iz>
 800a864:	f7f5 fe02 	bl	800046c <__aeabi_i2d>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	4630      	mov	r0, r6
 800a86e:	4639      	mov	r1, r7
 800a870:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a874:	f7f5 fcac 	bl	80001d0 <__aeabi_dsub>
 800a878:	4b19      	ldr	r3, [pc, #100]	@ (800a8e0 <__ieee754_rem_pio2+0x3f0>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	f7f5 fe60 	bl	8000540 <__aeabi_dmul>
 800a880:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a884:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a888:	f04f 0803 	mov.w	r8, #3
 800a88c:	2600      	movs	r6, #0
 800a88e:	2700      	movs	r7, #0
 800a890:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a894:	4632      	mov	r2, r6
 800a896:	463b      	mov	r3, r7
 800a898:	46c2      	mov	sl, r8
 800a89a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a89e:	f7f6 f8b7 	bl	8000a10 <__aeabi_dcmpeq>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d1f4      	bne.n	800a890 <__ieee754_rem_pio2+0x3a0>
 800a8a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a8e4 <__ieee754_rem_pio2+0x3f4>)
 800a8a8:	9301      	str	r3, [sp, #4]
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	9300      	str	r3, [sp, #0]
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	4653      	mov	r3, sl
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	a806      	add	r0, sp, #24
 800a8b6:	f000 f81f 	bl	800a8f8 <__kernel_rem_pio2>
 800a8ba:	9b04      	ldr	r3, [sp, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	4605      	mov	r5, r0
 800a8c0:	f6bf ae53 	bge.w	800a56a <__ieee754_rem_pio2+0x7a>
 800a8c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a8c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8cc:	e9c4 2300 	strd	r2, r3, [r4]
 800a8d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a8d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a8dc:	e740      	b.n	800a760 <__ieee754_rem_pio2+0x270>
 800a8de:	bf00      	nop
 800a8e0:	41700000 	.word	0x41700000
 800a8e4:	0800b2a0 	.word	0x0800b2a0

0800a8e8 <fabs>:
 800a8e8:	ec51 0b10 	vmov	r0, r1, d0
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a8f2:	ec43 2b10 	vmov	d0, r2, r3
 800a8f6:	4770      	bx	lr

0800a8f8 <__kernel_rem_pio2>:
 800a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	ed2d 8b02 	vpush	{d8}
 800a900:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a904:	f112 0f14 	cmn.w	r2, #20
 800a908:	9306      	str	r3, [sp, #24]
 800a90a:	9104      	str	r1, [sp, #16]
 800a90c:	4bbe      	ldr	r3, [pc, #760]	@ (800ac08 <__kernel_rem_pio2+0x310>)
 800a90e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a910:	9008      	str	r0, [sp, #32]
 800a912:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	9b06      	ldr	r3, [sp, #24]
 800a91a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a91e:	bfa8      	it	ge
 800a920:	1ed4      	subge	r4, r2, #3
 800a922:	9305      	str	r3, [sp, #20]
 800a924:	bfb2      	itee	lt
 800a926:	2400      	movlt	r4, #0
 800a928:	2318      	movge	r3, #24
 800a92a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a92e:	f06f 0317 	mvn.w	r3, #23
 800a932:	fb04 3303 	mla	r3, r4, r3, r3
 800a936:	eb03 0b02 	add.w	fp, r3, r2
 800a93a:	9b00      	ldr	r3, [sp, #0]
 800a93c:	9a05      	ldr	r2, [sp, #20]
 800a93e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800abf8 <__kernel_rem_pio2+0x300>
 800a942:	eb03 0802 	add.w	r8, r3, r2
 800a946:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a948:	1aa7      	subs	r7, r4, r2
 800a94a:	ae20      	add	r6, sp, #128	@ 0x80
 800a94c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a950:	2500      	movs	r5, #0
 800a952:	4545      	cmp	r5, r8
 800a954:	dd13      	ble.n	800a97e <__kernel_rem_pio2+0x86>
 800a956:	9b06      	ldr	r3, [sp, #24]
 800a958:	aa20      	add	r2, sp, #128	@ 0x80
 800a95a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a95e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a962:	f04f 0800 	mov.w	r8, #0
 800a966:	9b00      	ldr	r3, [sp, #0]
 800a968:	4598      	cmp	r8, r3
 800a96a:	dc31      	bgt.n	800a9d0 <__kernel_rem_pio2+0xd8>
 800a96c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800abf8 <__kernel_rem_pio2+0x300>
 800a970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a974:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a978:	462f      	mov	r7, r5
 800a97a:	2600      	movs	r6, #0
 800a97c:	e01b      	b.n	800a9b6 <__kernel_rem_pio2+0xbe>
 800a97e:	42ef      	cmn	r7, r5
 800a980:	d407      	bmi.n	800a992 <__kernel_rem_pio2+0x9a>
 800a982:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a986:	f7f5 fd71 	bl	800046c <__aeabi_i2d>
 800a98a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a98e:	3501      	adds	r5, #1
 800a990:	e7df      	b.n	800a952 <__kernel_rem_pio2+0x5a>
 800a992:	ec51 0b18 	vmov	r0, r1, d8
 800a996:	e7f8      	b.n	800a98a <__kernel_rem_pio2+0x92>
 800a998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a99c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a9a0:	f7f5 fdce 	bl	8000540 <__aeabi_dmul>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ac:	f7f5 fc12 	bl	80001d4 <__adddf3>
 800a9b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9b4:	3601      	adds	r6, #1
 800a9b6:	9b05      	ldr	r3, [sp, #20]
 800a9b8:	429e      	cmp	r6, r3
 800a9ba:	f1a7 0708 	sub.w	r7, r7, #8
 800a9be:	ddeb      	ble.n	800a998 <__kernel_rem_pio2+0xa0>
 800a9c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9c4:	f108 0801 	add.w	r8, r8, #1
 800a9c8:	ecaa 7b02 	vstmia	sl!, {d7}
 800a9cc:	3508      	adds	r5, #8
 800a9ce:	e7ca      	b.n	800a966 <__kernel_rem_pio2+0x6e>
 800a9d0:	9b00      	ldr	r3, [sp, #0]
 800a9d2:	f8dd 8000 	ldr.w	r8, [sp]
 800a9d6:	aa0c      	add	r2, sp, #48	@ 0x30
 800a9d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a9e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a9e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a9ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9ec:	ab98      	add	r3, sp, #608	@ 0x260
 800a9ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a9f2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a9f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9fa:	ac0c      	add	r4, sp, #48	@ 0x30
 800a9fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a9fe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800aa02:	46a1      	mov	r9, r4
 800aa04:	46c2      	mov	sl, r8
 800aa06:	f1ba 0f00 	cmp.w	sl, #0
 800aa0a:	f1a5 0508 	sub.w	r5, r5, #8
 800aa0e:	dc77      	bgt.n	800ab00 <__kernel_rem_pio2+0x208>
 800aa10:	4658      	mov	r0, fp
 800aa12:	ed9d 0b02 	vldr	d0, [sp, #8]
 800aa16:	f000 fac7 	bl	800afa8 <scalbn>
 800aa1a:	ec57 6b10 	vmov	r6, r7, d0
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800aa24:	4630      	mov	r0, r6
 800aa26:	4639      	mov	r1, r7
 800aa28:	f7f5 fd8a 	bl	8000540 <__aeabi_dmul>
 800aa2c:	ec41 0b10 	vmov	d0, r0, r1
 800aa30:	f000 fb3a 	bl	800b0a8 <floor>
 800aa34:	4b75      	ldr	r3, [pc, #468]	@ (800ac0c <__kernel_rem_pio2+0x314>)
 800aa36:	ec51 0b10 	vmov	r0, r1, d0
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f7f5 fd80 	bl	8000540 <__aeabi_dmul>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4630      	mov	r0, r6
 800aa46:	4639      	mov	r1, r7
 800aa48:	f7f5 fbc2 	bl	80001d0 <__aeabi_dsub>
 800aa4c:	460f      	mov	r7, r1
 800aa4e:	4606      	mov	r6, r0
 800aa50:	f7f6 f810 	bl	8000a74 <__aeabi_d2iz>
 800aa54:	9002      	str	r0, [sp, #8]
 800aa56:	f7f5 fd09 	bl	800046c <__aeabi_i2d>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	4630      	mov	r0, r6
 800aa60:	4639      	mov	r1, r7
 800aa62:	f7f5 fbb5 	bl	80001d0 <__aeabi_dsub>
 800aa66:	f1bb 0f00 	cmp.w	fp, #0
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	460f      	mov	r7, r1
 800aa6e:	dd6c      	ble.n	800ab4a <__kernel_rem_pio2+0x252>
 800aa70:	f108 31ff 	add.w	r1, r8, #4294967295
 800aa74:	ab0c      	add	r3, sp, #48	@ 0x30
 800aa76:	9d02      	ldr	r5, [sp, #8]
 800aa78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa7c:	f1cb 0018 	rsb	r0, fp, #24
 800aa80:	fa43 f200 	asr.w	r2, r3, r0
 800aa84:	4415      	add	r5, r2
 800aa86:	4082      	lsls	r2, r0
 800aa88:	1a9b      	subs	r3, r3, r2
 800aa8a:	aa0c      	add	r2, sp, #48	@ 0x30
 800aa8c:	9502      	str	r5, [sp, #8]
 800aa8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800aa92:	f1cb 0217 	rsb	r2, fp, #23
 800aa96:	fa43 f902 	asr.w	r9, r3, r2
 800aa9a:	f1b9 0f00 	cmp.w	r9, #0
 800aa9e:	dd64      	ble.n	800ab6a <__kernel_rem_pio2+0x272>
 800aaa0:	9b02      	ldr	r3, [sp, #8]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	9302      	str	r3, [sp, #8]
 800aaa8:	4615      	mov	r5, r2
 800aaaa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800aaae:	4590      	cmp	r8, r2
 800aab0:	f300 80b8 	bgt.w	800ac24 <__kernel_rem_pio2+0x32c>
 800aab4:	f1bb 0f00 	cmp.w	fp, #0
 800aab8:	dd07      	ble.n	800aaca <__kernel_rem_pio2+0x1d2>
 800aaba:	f1bb 0f01 	cmp.w	fp, #1
 800aabe:	f000 80bf 	beq.w	800ac40 <__kernel_rem_pio2+0x348>
 800aac2:	f1bb 0f02 	cmp.w	fp, #2
 800aac6:	f000 80c6 	beq.w	800ac56 <__kernel_rem_pio2+0x35e>
 800aaca:	f1b9 0f02 	cmp.w	r9, #2
 800aace:	d14c      	bne.n	800ab6a <__kernel_rem_pio2+0x272>
 800aad0:	4632      	mov	r2, r6
 800aad2:	463b      	mov	r3, r7
 800aad4:	494e      	ldr	r1, [pc, #312]	@ (800ac10 <__kernel_rem_pio2+0x318>)
 800aad6:	2000      	movs	r0, #0
 800aad8:	f7f5 fb7a 	bl	80001d0 <__aeabi_dsub>
 800aadc:	4606      	mov	r6, r0
 800aade:	460f      	mov	r7, r1
 800aae0:	2d00      	cmp	r5, #0
 800aae2:	d042      	beq.n	800ab6a <__kernel_rem_pio2+0x272>
 800aae4:	4658      	mov	r0, fp
 800aae6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800ac00 <__kernel_rem_pio2+0x308>
 800aaea:	f000 fa5d 	bl	800afa8 <scalbn>
 800aaee:	4630      	mov	r0, r6
 800aaf0:	4639      	mov	r1, r7
 800aaf2:	ec53 2b10 	vmov	r2, r3, d0
 800aaf6:	f7f5 fb6b 	bl	80001d0 <__aeabi_dsub>
 800aafa:	4606      	mov	r6, r0
 800aafc:	460f      	mov	r7, r1
 800aafe:	e034      	b.n	800ab6a <__kernel_rem_pio2+0x272>
 800ab00:	4b44      	ldr	r3, [pc, #272]	@ (800ac14 <__kernel_rem_pio2+0x31c>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab08:	f7f5 fd1a 	bl	8000540 <__aeabi_dmul>
 800ab0c:	f7f5 ffb2 	bl	8000a74 <__aeabi_d2iz>
 800ab10:	f7f5 fcac 	bl	800046c <__aeabi_i2d>
 800ab14:	4b40      	ldr	r3, [pc, #256]	@ (800ac18 <__kernel_rem_pio2+0x320>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	4606      	mov	r6, r0
 800ab1a:	460f      	mov	r7, r1
 800ab1c:	f7f5 fd10 	bl	8000540 <__aeabi_dmul>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab28:	f7f5 fb52 	bl	80001d0 <__aeabi_dsub>
 800ab2c:	f7f5 ffa2 	bl	8000a74 <__aeabi_d2iz>
 800ab30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab34:	f849 0b04 	str.w	r0, [r9], #4
 800ab38:	4639      	mov	r1, r7
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f7f5 fb4a 	bl	80001d4 <__adddf3>
 800ab40:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab48:	e75d      	b.n	800aa06 <__kernel_rem_pio2+0x10e>
 800ab4a:	d107      	bne.n	800ab5c <__kernel_rem_pio2+0x264>
 800ab4c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab50:	aa0c      	add	r2, sp, #48	@ 0x30
 800ab52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab56:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ab5a:	e79e      	b.n	800aa9a <__kernel_rem_pio2+0x1a2>
 800ab5c:	4b2f      	ldr	r3, [pc, #188]	@ (800ac1c <__kernel_rem_pio2+0x324>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f7f5 ff74 	bl	8000a4c <__aeabi_dcmpge>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d143      	bne.n	800abf0 <__kernel_rem_pio2+0x2f8>
 800ab68:	4681      	mov	r9, r0
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	4630      	mov	r0, r6
 800ab70:	4639      	mov	r1, r7
 800ab72:	f7f5 ff4d 	bl	8000a10 <__aeabi_dcmpeq>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	f000 80bf 	beq.w	800acfa <__kernel_rem_pio2+0x402>
 800ab7c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab80:	2200      	movs	r2, #0
 800ab82:	9900      	ldr	r1, [sp, #0]
 800ab84:	428b      	cmp	r3, r1
 800ab86:	da6e      	bge.n	800ac66 <__kernel_rem_pio2+0x36e>
 800ab88:	2a00      	cmp	r2, #0
 800ab8a:	f000 8089 	beq.w	800aca0 <__kernel_rem_pio2+0x3a8>
 800ab8e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab92:	ab0c      	add	r3, sp, #48	@ 0x30
 800ab94:	f1ab 0b18 	sub.w	fp, fp, #24
 800ab98:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d0f6      	beq.n	800ab8e <__kernel_rem_pio2+0x296>
 800aba0:	4658      	mov	r0, fp
 800aba2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800ac00 <__kernel_rem_pio2+0x308>
 800aba6:	f000 f9ff 	bl	800afa8 <scalbn>
 800abaa:	f108 0301 	add.w	r3, r8, #1
 800abae:	00da      	lsls	r2, r3, #3
 800abb0:	9205      	str	r2, [sp, #20]
 800abb2:	ec55 4b10 	vmov	r4, r5, d0
 800abb6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800abb8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800ac14 <__kernel_rem_pio2+0x31c>
 800abbc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800abc0:	4646      	mov	r6, r8
 800abc2:	f04f 0a00 	mov.w	sl, #0
 800abc6:	2e00      	cmp	r6, #0
 800abc8:	f280 80cf 	bge.w	800ad6a <__kernel_rem_pio2+0x472>
 800abcc:	4644      	mov	r4, r8
 800abce:	2c00      	cmp	r4, #0
 800abd0:	f2c0 80fd 	blt.w	800adce <__kernel_rem_pio2+0x4d6>
 800abd4:	4b12      	ldr	r3, [pc, #72]	@ (800ac20 <__kernel_rem_pio2+0x328>)
 800abd6:	461f      	mov	r7, r3
 800abd8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800abda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abde:	9306      	str	r3, [sp, #24]
 800abe0:	f04f 0a00 	mov.w	sl, #0
 800abe4:	f04f 0b00 	mov.w	fp, #0
 800abe8:	2600      	movs	r6, #0
 800abea:	eba8 0504 	sub.w	r5, r8, r4
 800abee:	e0e2      	b.n	800adb6 <__kernel_rem_pio2+0x4be>
 800abf0:	f04f 0902 	mov.w	r9, #2
 800abf4:	e754      	b.n	800aaa0 <__kernel_rem_pio2+0x1a8>
 800abf6:	bf00      	nop
	...
 800ac04:	3ff00000 	.word	0x3ff00000
 800ac08:	0800b3e8 	.word	0x0800b3e8
 800ac0c:	40200000 	.word	0x40200000
 800ac10:	3ff00000 	.word	0x3ff00000
 800ac14:	3e700000 	.word	0x3e700000
 800ac18:	41700000 	.word	0x41700000
 800ac1c:	3fe00000 	.word	0x3fe00000
 800ac20:	0800b3a8 	.word	0x0800b3a8
 800ac24:	f854 3b04 	ldr.w	r3, [r4], #4
 800ac28:	b945      	cbnz	r5, 800ac3c <__kernel_rem_pio2+0x344>
 800ac2a:	b123      	cbz	r3, 800ac36 <__kernel_rem_pio2+0x33e>
 800ac2c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800ac30:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac34:	2301      	movs	r3, #1
 800ac36:	3201      	adds	r2, #1
 800ac38:	461d      	mov	r5, r3
 800ac3a:	e738      	b.n	800aaae <__kernel_rem_pio2+0x1b6>
 800ac3c:	1acb      	subs	r3, r1, r3
 800ac3e:	e7f7      	b.n	800ac30 <__kernel_rem_pio2+0x338>
 800ac40:	f108 32ff 	add.w	r2, r8, #4294967295
 800ac44:	ab0c      	add	r3, sp, #48	@ 0x30
 800ac46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ac4e:	a90c      	add	r1, sp, #48	@ 0x30
 800ac50:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ac54:	e739      	b.n	800aaca <__kernel_rem_pio2+0x1d2>
 800ac56:	f108 32ff 	add.w	r2, r8, #4294967295
 800ac5a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ac5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ac64:	e7f3      	b.n	800ac4e <__kernel_rem_pio2+0x356>
 800ac66:	a90c      	add	r1, sp, #48	@ 0x30
 800ac68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	e787      	b.n	800ab82 <__kernel_rem_pio2+0x28a>
 800ac72:	3401      	adds	r4, #1
 800ac74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ac78:	2a00      	cmp	r2, #0
 800ac7a:	d0fa      	beq.n	800ac72 <__kernel_rem_pio2+0x37a>
 800ac7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ac82:	eb0d 0503 	add.w	r5, sp, r3
 800ac86:	9b06      	ldr	r3, [sp, #24]
 800ac88:	aa20      	add	r2, sp, #128	@ 0x80
 800ac8a:	4443      	add	r3, r8
 800ac8c:	f108 0701 	add.w	r7, r8, #1
 800ac90:	3d98      	subs	r5, #152	@ 0x98
 800ac92:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ac96:	4444      	add	r4, r8
 800ac98:	42bc      	cmp	r4, r7
 800ac9a:	da04      	bge.n	800aca6 <__kernel_rem_pio2+0x3ae>
 800ac9c:	46a0      	mov	r8, r4
 800ac9e:	e6a2      	b.n	800a9e6 <__kernel_rem_pio2+0xee>
 800aca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aca2:	2401      	movs	r4, #1
 800aca4:	e7e6      	b.n	800ac74 <__kernel_rem_pio2+0x37c>
 800aca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800acac:	f7f5 fbde 	bl	800046c <__aeabi_i2d>
 800acb0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800af78 <__kernel_rem_pio2+0x680>
 800acb4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800acb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800acbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acc0:	46b2      	mov	sl, r6
 800acc2:	f04f 0800 	mov.w	r8, #0
 800acc6:	9b05      	ldr	r3, [sp, #20]
 800acc8:	4598      	cmp	r8, r3
 800acca:	dd05      	ble.n	800acd8 <__kernel_rem_pio2+0x3e0>
 800accc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800acd0:	3701      	adds	r7, #1
 800acd2:	eca5 7b02 	vstmia	r5!, {d7}
 800acd6:	e7df      	b.n	800ac98 <__kernel_rem_pio2+0x3a0>
 800acd8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800acdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ace0:	f7f5 fc2e 	bl	8000540 <__aeabi_dmul>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acec:	f7f5 fa72 	bl	80001d4 <__adddf3>
 800acf0:	f108 0801 	add.w	r8, r8, #1
 800acf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acf8:	e7e5      	b.n	800acc6 <__kernel_rem_pio2+0x3ce>
 800acfa:	f1cb 0000 	rsb	r0, fp, #0
 800acfe:	ec47 6b10 	vmov	d0, r6, r7
 800ad02:	f000 f951 	bl	800afa8 <scalbn>
 800ad06:	ec55 4b10 	vmov	r4, r5, d0
 800ad0a:	4b9d      	ldr	r3, [pc, #628]	@ (800af80 <__kernel_rem_pio2+0x688>)
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4620      	mov	r0, r4
 800ad10:	4629      	mov	r1, r5
 800ad12:	f7f5 fe9b 	bl	8000a4c <__aeabi_dcmpge>
 800ad16:	b300      	cbz	r0, 800ad5a <__kernel_rem_pio2+0x462>
 800ad18:	4b9a      	ldr	r3, [pc, #616]	@ (800af84 <__kernel_rem_pio2+0x68c>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	4629      	mov	r1, r5
 800ad20:	f7f5 fc0e 	bl	8000540 <__aeabi_dmul>
 800ad24:	f7f5 fea6 	bl	8000a74 <__aeabi_d2iz>
 800ad28:	4606      	mov	r6, r0
 800ad2a:	f7f5 fb9f 	bl	800046c <__aeabi_i2d>
 800ad2e:	4b94      	ldr	r3, [pc, #592]	@ (800af80 <__kernel_rem_pio2+0x688>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	f7f5 fc05 	bl	8000540 <__aeabi_dmul>
 800ad36:	460b      	mov	r3, r1
 800ad38:	4602      	mov	r2, r0
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f7f5 fa47 	bl	80001d0 <__aeabi_dsub>
 800ad42:	f7f5 fe97 	bl	8000a74 <__aeabi_d2iz>
 800ad46:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad48:	f10b 0b18 	add.w	fp, fp, #24
 800ad4c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800ad50:	f108 0801 	add.w	r8, r8, #1
 800ad54:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800ad58:	e722      	b.n	800aba0 <__kernel_rem_pio2+0x2a8>
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	f7f5 fe89 	bl	8000a74 <__aeabi_d2iz>
 800ad62:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800ad68:	e71a      	b.n	800aba0 <__kernel_rem_pio2+0x2a8>
 800ad6a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ad70:	f7f5 fb7c 	bl	800046c <__aeabi_i2d>
 800ad74:	4622      	mov	r2, r4
 800ad76:	462b      	mov	r3, r5
 800ad78:	f7f5 fbe2 	bl	8000540 <__aeabi_dmul>
 800ad7c:	4652      	mov	r2, sl
 800ad7e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800ad82:	465b      	mov	r3, fp
 800ad84:	4620      	mov	r0, r4
 800ad86:	4629      	mov	r1, r5
 800ad88:	f7f5 fbda 	bl	8000540 <__aeabi_dmul>
 800ad8c:	3e01      	subs	r6, #1
 800ad8e:	4604      	mov	r4, r0
 800ad90:	460d      	mov	r5, r1
 800ad92:	e718      	b.n	800abc6 <__kernel_rem_pio2+0x2ce>
 800ad94:	9906      	ldr	r1, [sp, #24]
 800ad96:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800ad9a:	9106      	str	r1, [sp, #24]
 800ad9c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800ada0:	f7f5 fbce 	bl	8000540 <__aeabi_dmul>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	4650      	mov	r0, sl
 800adaa:	4659      	mov	r1, fp
 800adac:	f7f5 fa12 	bl	80001d4 <__adddf3>
 800adb0:	3601      	adds	r6, #1
 800adb2:	4682      	mov	sl, r0
 800adb4:	468b      	mov	fp, r1
 800adb6:	9b00      	ldr	r3, [sp, #0]
 800adb8:	429e      	cmp	r6, r3
 800adba:	dc01      	bgt.n	800adc0 <__kernel_rem_pio2+0x4c8>
 800adbc:	42b5      	cmp	r5, r6
 800adbe:	dae9      	bge.n	800ad94 <__kernel_rem_pio2+0x49c>
 800adc0:	ab48      	add	r3, sp, #288	@ 0x120
 800adc2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800adc6:	e9c5 ab00 	strd	sl, fp, [r5]
 800adca:	3c01      	subs	r4, #1
 800adcc:	e6ff      	b.n	800abce <__kernel_rem_pio2+0x2d6>
 800adce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800add0:	2b02      	cmp	r3, #2
 800add2:	dc0b      	bgt.n	800adec <__kernel_rem_pio2+0x4f4>
 800add4:	2b00      	cmp	r3, #0
 800add6:	dc39      	bgt.n	800ae4c <__kernel_rem_pio2+0x554>
 800add8:	d05d      	beq.n	800ae96 <__kernel_rem_pio2+0x59e>
 800adda:	9b02      	ldr	r3, [sp, #8]
 800addc:	f003 0007 	and.w	r0, r3, #7
 800ade0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800ade4:	ecbd 8b02 	vpop	{d8}
 800ade8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d1f3      	bne.n	800adda <__kernel_rem_pio2+0x4e2>
 800adf2:	9b05      	ldr	r3, [sp, #20]
 800adf4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800adf8:	eb0d 0403 	add.w	r4, sp, r3
 800adfc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800ae00:	4625      	mov	r5, r4
 800ae02:	46c2      	mov	sl, r8
 800ae04:	f1ba 0f00 	cmp.w	sl, #0
 800ae08:	f1a5 0508 	sub.w	r5, r5, #8
 800ae0c:	dc6b      	bgt.n	800aee6 <__kernel_rem_pio2+0x5ee>
 800ae0e:	4645      	mov	r5, r8
 800ae10:	2d01      	cmp	r5, #1
 800ae12:	f1a4 0408 	sub.w	r4, r4, #8
 800ae16:	f300 8087 	bgt.w	800af28 <__kernel_rem_pio2+0x630>
 800ae1a:	9c05      	ldr	r4, [sp, #20]
 800ae1c:	ab48      	add	r3, sp, #288	@ 0x120
 800ae1e:	441c      	add	r4, r3
 800ae20:	2000      	movs	r0, #0
 800ae22:	2100      	movs	r1, #0
 800ae24:	f1b8 0f01 	cmp.w	r8, #1
 800ae28:	f300 809c 	bgt.w	800af64 <__kernel_rem_pio2+0x66c>
 800ae2c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800ae30:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800ae34:	f1b9 0f00 	cmp.w	r9, #0
 800ae38:	f040 80a6 	bne.w	800af88 <__kernel_rem_pio2+0x690>
 800ae3c:	9b04      	ldr	r3, [sp, #16]
 800ae3e:	e9c3 7800 	strd	r7, r8, [r3]
 800ae42:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ae46:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ae4a:	e7c6      	b.n	800adda <__kernel_rem_pio2+0x4e2>
 800ae4c:	9d05      	ldr	r5, [sp, #20]
 800ae4e:	ab48      	add	r3, sp, #288	@ 0x120
 800ae50:	441d      	add	r5, r3
 800ae52:	4644      	mov	r4, r8
 800ae54:	2000      	movs	r0, #0
 800ae56:	2100      	movs	r1, #0
 800ae58:	2c00      	cmp	r4, #0
 800ae5a:	da35      	bge.n	800aec8 <__kernel_rem_pio2+0x5d0>
 800ae5c:	f1b9 0f00 	cmp.w	r9, #0
 800ae60:	d038      	beq.n	800aed4 <__kernel_rem_pio2+0x5dc>
 800ae62:	4602      	mov	r2, r0
 800ae64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae68:	9c04      	ldr	r4, [sp, #16]
 800ae6a:	e9c4 2300 	strd	r2, r3, [r4]
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800ae76:	f7f5 f9ab 	bl	80001d0 <__aeabi_dsub>
 800ae7a:	ad4a      	add	r5, sp, #296	@ 0x128
 800ae7c:	2401      	movs	r4, #1
 800ae7e:	45a0      	cmp	r8, r4
 800ae80:	da2b      	bge.n	800aeda <__kernel_rem_pio2+0x5e2>
 800ae82:	f1b9 0f00 	cmp.w	r9, #0
 800ae86:	d002      	beq.n	800ae8e <__kernel_rem_pio2+0x596>
 800ae88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	9b04      	ldr	r3, [sp, #16]
 800ae90:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ae94:	e7a1      	b.n	800adda <__kernel_rem_pio2+0x4e2>
 800ae96:	9c05      	ldr	r4, [sp, #20]
 800ae98:	ab48      	add	r3, sp, #288	@ 0x120
 800ae9a:	441c      	add	r4, r3
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	2100      	movs	r1, #0
 800aea0:	f1b8 0f00 	cmp.w	r8, #0
 800aea4:	da09      	bge.n	800aeba <__kernel_rem_pio2+0x5c2>
 800aea6:	f1b9 0f00 	cmp.w	r9, #0
 800aeaa:	d002      	beq.n	800aeb2 <__kernel_rem_pio2+0x5ba>
 800aeac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	9b04      	ldr	r3, [sp, #16]
 800aeb4:	e9c3 0100 	strd	r0, r1, [r3]
 800aeb8:	e78f      	b.n	800adda <__kernel_rem_pio2+0x4e2>
 800aeba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aebe:	f7f5 f989 	bl	80001d4 <__adddf3>
 800aec2:	f108 38ff 	add.w	r8, r8, #4294967295
 800aec6:	e7eb      	b.n	800aea0 <__kernel_rem_pio2+0x5a8>
 800aec8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800aecc:	f7f5 f982 	bl	80001d4 <__adddf3>
 800aed0:	3c01      	subs	r4, #1
 800aed2:	e7c1      	b.n	800ae58 <__kernel_rem_pio2+0x560>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	e7c6      	b.n	800ae68 <__kernel_rem_pio2+0x570>
 800aeda:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800aede:	f7f5 f979 	bl	80001d4 <__adddf3>
 800aee2:	3401      	adds	r4, #1
 800aee4:	e7cb      	b.n	800ae7e <__kernel_rem_pio2+0x586>
 800aee6:	ed95 7b00 	vldr	d7, [r5]
 800aeea:	ed8d 7b00 	vstr	d7, [sp]
 800aeee:	ed95 7b02 	vldr	d7, [r5, #8]
 800aef2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aef6:	ec53 2b17 	vmov	r2, r3, d7
 800aefa:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aefe:	f7f5 f969 	bl	80001d4 <__adddf3>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	4606      	mov	r6, r0
 800af08:	460f      	mov	r7, r1
 800af0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af0e:	f7f5 f95f 	bl	80001d0 <__aeabi_dsub>
 800af12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af16:	f7f5 f95d 	bl	80001d4 <__adddf3>
 800af1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af1e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800af22:	e9c5 6700 	strd	r6, r7, [r5]
 800af26:	e76d      	b.n	800ae04 <__kernel_rem_pio2+0x50c>
 800af28:	ed94 7b00 	vldr	d7, [r4]
 800af2c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800af30:	ec51 0b17 	vmov	r0, r1, d7
 800af34:	4652      	mov	r2, sl
 800af36:	465b      	mov	r3, fp
 800af38:	ed8d 7b00 	vstr	d7, [sp]
 800af3c:	f7f5 f94a 	bl	80001d4 <__adddf3>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	4606      	mov	r6, r0
 800af46:	460f      	mov	r7, r1
 800af48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af4c:	f7f5 f940 	bl	80001d0 <__aeabi_dsub>
 800af50:	4652      	mov	r2, sl
 800af52:	465b      	mov	r3, fp
 800af54:	f7f5 f93e 	bl	80001d4 <__adddf3>
 800af58:	3d01      	subs	r5, #1
 800af5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800af5e:	e9c4 6700 	strd	r6, r7, [r4]
 800af62:	e755      	b.n	800ae10 <__kernel_rem_pio2+0x518>
 800af64:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800af68:	f7f5 f934 	bl	80001d4 <__adddf3>
 800af6c:	f108 38ff 	add.w	r8, r8, #4294967295
 800af70:	e758      	b.n	800ae24 <__kernel_rem_pio2+0x52c>
 800af72:	bf00      	nop
 800af74:	f3af 8000 	nop.w
	...
 800af80:	41700000 	.word	0x41700000
 800af84:	3e700000 	.word	0x3e700000
 800af88:	9b04      	ldr	r3, [sp, #16]
 800af8a:	9a04      	ldr	r2, [sp, #16]
 800af8c:	601f      	str	r7, [r3, #0]
 800af8e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800af92:	605c      	str	r4, [r3, #4]
 800af94:	609d      	str	r5, [r3, #8]
 800af96:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af9a:	60d3      	str	r3, [r2, #12]
 800af9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800afa0:	6110      	str	r0, [r2, #16]
 800afa2:	6153      	str	r3, [r2, #20]
 800afa4:	e719      	b.n	800adda <__kernel_rem_pio2+0x4e2>
 800afa6:	bf00      	nop

0800afa8 <scalbn>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	ec55 4b10 	vmov	r4, r5, d0
 800afae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800afb2:	4606      	mov	r6, r0
 800afb4:	462b      	mov	r3, r5
 800afb6:	b991      	cbnz	r1, 800afde <scalbn+0x36>
 800afb8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800afbc:	4323      	orrs	r3, r4
 800afbe:	d03d      	beq.n	800b03c <scalbn+0x94>
 800afc0:	4b35      	ldr	r3, [pc, #212]	@ (800b098 <scalbn+0xf0>)
 800afc2:	4620      	mov	r0, r4
 800afc4:	4629      	mov	r1, r5
 800afc6:	2200      	movs	r2, #0
 800afc8:	f7f5 faba 	bl	8000540 <__aeabi_dmul>
 800afcc:	4b33      	ldr	r3, [pc, #204]	@ (800b09c <scalbn+0xf4>)
 800afce:	429e      	cmp	r6, r3
 800afd0:	4604      	mov	r4, r0
 800afd2:	460d      	mov	r5, r1
 800afd4:	da0f      	bge.n	800aff6 <scalbn+0x4e>
 800afd6:	a328      	add	r3, pc, #160	@ (adr r3, 800b078 <scalbn+0xd0>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	e01e      	b.n	800b01c <scalbn+0x74>
 800afde:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800afe2:	4291      	cmp	r1, r2
 800afe4:	d10b      	bne.n	800affe <scalbn+0x56>
 800afe6:	4622      	mov	r2, r4
 800afe8:	4620      	mov	r0, r4
 800afea:	4629      	mov	r1, r5
 800afec:	f7f5 f8f2 	bl	80001d4 <__adddf3>
 800aff0:	4604      	mov	r4, r0
 800aff2:	460d      	mov	r5, r1
 800aff4:	e022      	b.n	800b03c <scalbn+0x94>
 800aff6:	460b      	mov	r3, r1
 800aff8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800affc:	3936      	subs	r1, #54	@ 0x36
 800affe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b002:	4296      	cmp	r6, r2
 800b004:	dd0d      	ble.n	800b022 <scalbn+0x7a>
 800b006:	2d00      	cmp	r5, #0
 800b008:	a11d      	add	r1, pc, #116	@ (adr r1, 800b080 <scalbn+0xd8>)
 800b00a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b00e:	da02      	bge.n	800b016 <scalbn+0x6e>
 800b010:	a11d      	add	r1, pc, #116	@ (adr r1, 800b088 <scalbn+0xe0>)
 800b012:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b016:	a31a      	add	r3, pc, #104	@ (adr r3, 800b080 <scalbn+0xd8>)
 800b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01c:	f7f5 fa90 	bl	8000540 <__aeabi_dmul>
 800b020:	e7e6      	b.n	800aff0 <scalbn+0x48>
 800b022:	1872      	adds	r2, r6, r1
 800b024:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b028:	428a      	cmp	r2, r1
 800b02a:	dcec      	bgt.n	800b006 <scalbn+0x5e>
 800b02c:	2a00      	cmp	r2, #0
 800b02e:	dd08      	ble.n	800b042 <scalbn+0x9a>
 800b030:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b034:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b038:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b03c:	ec45 4b10 	vmov	d0, r4, r5
 800b040:	bd70      	pop	{r4, r5, r6, pc}
 800b042:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b046:	da08      	bge.n	800b05a <scalbn+0xb2>
 800b048:	2d00      	cmp	r5, #0
 800b04a:	a10b      	add	r1, pc, #44	@ (adr r1, 800b078 <scalbn+0xd0>)
 800b04c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b050:	dac1      	bge.n	800afd6 <scalbn+0x2e>
 800b052:	a10f      	add	r1, pc, #60	@ (adr r1, 800b090 <scalbn+0xe8>)
 800b054:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b058:	e7bd      	b.n	800afd6 <scalbn+0x2e>
 800b05a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b05e:	3236      	adds	r2, #54	@ 0x36
 800b060:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b064:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b068:	4620      	mov	r0, r4
 800b06a:	4b0d      	ldr	r3, [pc, #52]	@ (800b0a0 <scalbn+0xf8>)
 800b06c:	4629      	mov	r1, r5
 800b06e:	2200      	movs	r2, #0
 800b070:	e7d4      	b.n	800b01c <scalbn+0x74>
 800b072:	bf00      	nop
 800b074:	f3af 8000 	nop.w
 800b078:	c2f8f359 	.word	0xc2f8f359
 800b07c:	01a56e1f 	.word	0x01a56e1f
 800b080:	8800759c 	.word	0x8800759c
 800b084:	7e37e43c 	.word	0x7e37e43c
 800b088:	8800759c 	.word	0x8800759c
 800b08c:	fe37e43c 	.word	0xfe37e43c
 800b090:	c2f8f359 	.word	0xc2f8f359
 800b094:	81a56e1f 	.word	0x81a56e1f
 800b098:	43500000 	.word	0x43500000
 800b09c:	ffff3cb0 	.word	0xffff3cb0
 800b0a0:	3c900000 	.word	0x3c900000
 800b0a4:	00000000 	.word	0x00000000

0800b0a8 <floor>:
 800b0a8:	ec51 0b10 	vmov	r0, r1, d0
 800b0ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b0b8:	2e13      	cmp	r6, #19
 800b0ba:	460c      	mov	r4, r1
 800b0bc:	4605      	mov	r5, r0
 800b0be:	4680      	mov	r8, r0
 800b0c0:	dc34      	bgt.n	800b12c <floor+0x84>
 800b0c2:	2e00      	cmp	r6, #0
 800b0c4:	da17      	bge.n	800b0f6 <floor+0x4e>
 800b0c6:	a332      	add	r3, pc, #200	@ (adr r3, 800b190 <floor+0xe8>)
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f7f5 f882 	bl	80001d4 <__adddf3>
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f7f5 fcc4 	bl	8000a60 <__aeabi_dcmpgt>
 800b0d8:	b150      	cbz	r0, 800b0f0 <floor+0x48>
 800b0da:	2c00      	cmp	r4, #0
 800b0dc:	da55      	bge.n	800b18a <floor+0xe2>
 800b0de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b0e2:	432c      	orrs	r4, r5
 800b0e4:	2500      	movs	r5, #0
 800b0e6:	42ac      	cmp	r4, r5
 800b0e8:	4c2b      	ldr	r4, [pc, #172]	@ (800b198 <floor+0xf0>)
 800b0ea:	bf08      	it	eq
 800b0ec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b0f0:	4621      	mov	r1, r4
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	e023      	b.n	800b13e <floor+0x96>
 800b0f6:	4f29      	ldr	r7, [pc, #164]	@ (800b19c <floor+0xf4>)
 800b0f8:	4137      	asrs	r7, r6
 800b0fa:	ea01 0307 	and.w	r3, r1, r7
 800b0fe:	4303      	orrs	r3, r0
 800b100:	d01d      	beq.n	800b13e <floor+0x96>
 800b102:	a323      	add	r3, pc, #140	@ (adr r3, 800b190 <floor+0xe8>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	f7f5 f864 	bl	80001d4 <__adddf3>
 800b10c:	2200      	movs	r2, #0
 800b10e:	2300      	movs	r3, #0
 800b110:	f7f5 fca6 	bl	8000a60 <__aeabi_dcmpgt>
 800b114:	2800      	cmp	r0, #0
 800b116:	d0eb      	beq.n	800b0f0 <floor+0x48>
 800b118:	2c00      	cmp	r4, #0
 800b11a:	bfbe      	ittt	lt
 800b11c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b120:	4133      	asrlt	r3, r6
 800b122:	18e4      	addlt	r4, r4, r3
 800b124:	ea24 0407 	bic.w	r4, r4, r7
 800b128:	2500      	movs	r5, #0
 800b12a:	e7e1      	b.n	800b0f0 <floor+0x48>
 800b12c:	2e33      	cmp	r6, #51	@ 0x33
 800b12e:	dd0a      	ble.n	800b146 <floor+0x9e>
 800b130:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b134:	d103      	bne.n	800b13e <floor+0x96>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	f7f5 f84b 	bl	80001d4 <__adddf3>
 800b13e:	ec41 0b10 	vmov	d0, r0, r1
 800b142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b146:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b14a:	f04f 37ff 	mov.w	r7, #4294967295
 800b14e:	40df      	lsrs	r7, r3
 800b150:	4207      	tst	r7, r0
 800b152:	d0f4      	beq.n	800b13e <floor+0x96>
 800b154:	a30e      	add	r3, pc, #56	@ (adr r3, 800b190 <floor+0xe8>)
 800b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15a:	f7f5 f83b 	bl	80001d4 <__adddf3>
 800b15e:	2200      	movs	r2, #0
 800b160:	2300      	movs	r3, #0
 800b162:	f7f5 fc7d 	bl	8000a60 <__aeabi_dcmpgt>
 800b166:	2800      	cmp	r0, #0
 800b168:	d0c2      	beq.n	800b0f0 <floor+0x48>
 800b16a:	2c00      	cmp	r4, #0
 800b16c:	da0a      	bge.n	800b184 <floor+0xdc>
 800b16e:	2e14      	cmp	r6, #20
 800b170:	d101      	bne.n	800b176 <floor+0xce>
 800b172:	3401      	adds	r4, #1
 800b174:	e006      	b.n	800b184 <floor+0xdc>
 800b176:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b17a:	2301      	movs	r3, #1
 800b17c:	40b3      	lsls	r3, r6
 800b17e:	441d      	add	r5, r3
 800b180:	4545      	cmp	r5, r8
 800b182:	d3f6      	bcc.n	800b172 <floor+0xca>
 800b184:	ea25 0507 	bic.w	r5, r5, r7
 800b188:	e7b2      	b.n	800b0f0 <floor+0x48>
 800b18a:	2500      	movs	r5, #0
 800b18c:	462c      	mov	r4, r5
 800b18e:	e7af      	b.n	800b0f0 <floor+0x48>
 800b190:	8800759c 	.word	0x8800759c
 800b194:	7e37e43c 	.word	0x7e37e43c
 800b198:	bff00000 	.word	0xbff00000
 800b19c:	000fffff 	.word	0x000fffff

0800b1a0 <_init>:
 800b1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a2:	bf00      	nop
 800b1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1a6:	bc08      	pop	{r3}
 800b1a8:	469e      	mov	lr, r3
 800b1aa:	4770      	bx	lr

0800b1ac <_fini>:
 800b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ae:	bf00      	nop
 800b1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b2:	bc08      	pop	{r3}
 800b1b4:	469e      	mov	lr, r3
 800b1b6:	4770      	bx	lr
